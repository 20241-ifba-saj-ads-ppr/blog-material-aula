import{_ as c}from"./EstruturaSingleton-PB5fxm8k.js";import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as l,c as r,b as n,d as u,e,a as o}from"./app-U9K3UZKY.js";const d={},m={href:"https://github.com/GuiSamp",target:"_blank",rel:"noopener noreferrer"};function g(v,a){const i=s("ExternalLinkIcon"),t=s("Mermaid");return l(),r("div",null,[a[1]||(a[1]=n("h1",{id:"singleton",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#singleton"},[n("span",null,"Singleton")])],-1)),a[2]||(a[2]=n("h2",{id:"guilherme-sampaio-oliveira-20221tadssaj0011",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#guilherme-sampaio-oliveira-20221tadssaj0011"},[n("span",null,"Guilherme Sampaio Oliveira (20221TADSSAJ0011)")])],-1)),n("p",null,[n("a",m,[a[0]||(a[0]=u("@GuiSamp")),e(i)])]),a[3]||(a[3]=o('<h1 id="singleton-criacao-de-objetos" tabindex="-1"><a class="header-anchor" href="#singleton-criacao-de-objetos"><span>Singleton: Criação de Objetos</span></a></h1><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><p>Garantir que uma classe tenha somente uma instância e fornecer um ponto global de acesso para a mesma.</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como"><span>Também conhecido como</span></a></h2><p>Unique instance</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><p>É importante para algumas classes ter uma, e apenas uma, instância. Por exemplo, embora possam existir muitas impressoras em um sistema, deveria haver somente um spooler de impressoras. Da mesma forma, deveria haver somente um sistema de arquivos e um gerenciador de janelas. Um filtro digital terá somente um conversor A/D. Um sistema de contabilidade será dedicado a servir somente a uma companhia.</p><p>Como garantimos que uma classe tenha somente uma instância e que essa instância seja facilmente acessível? Uma variável global torna um objeto acessível, mas não impede você de instanciar múltiplos objetos.</p><p>Uma solução melhor seria tornar a própria classe responsável por manter o controle da sua única instância. A classe pode garantir que nenhuma outra instância seja criada (pela interceptação das solicitações para criação de novos objetos), bem como pode fornecer um meio para acessar sua única instância. Este é o padrão Singleton.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade"><span>Aplicabilidade</span></a></h2><p>Use o padrão Singleton quando:</p><ul><li>For preciso haver apenas uma instância de uma classe, e essa instância tiver que dar acesso aos clientes através de um ponto bem conhecido.</li><li>A única instância tiver de ser extensível através de subclasses, possibilitando aos clientes usar uma instância estendida sem alterar o seu código.</li></ul><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h2><figure><img src="'+c+`" alt="Estrutura Singleton" tabindex="0" loading="lazy"><figcaption>Estrutura Singleton</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h2><ul><li><strong>Singleton</strong><ul><li>Define uma operação <code>Instance</code> que permite aos clientes acessarem sua única instância. <code>Instance</code> é uma operação de classe (ou seja, em Smalltalk é um método de classe e em C++ é uma função-membro estática).</li><li>Pode ser responsável pela criação da sua própria instância única.</li></ul></li></ul><h2 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes"><span>Colaborações</span></a></h2><ul><li>Os clientes acessam uma instância <code>Singleton</code> unicamente pela operação <code>Instance</code> do Singleton.</li></ul><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Consequências</span></a></h2><p>O padrão Singleton apresenta vários benefícios:</p><ol><li><strong>Acesso controlado à instância única:</strong> Como a classe Singleton encapsula a sua única instância, possui controle total sobre como e quando os clientes a acessam.</li><li><strong>Espaço de nomes reduzido:</strong> O padrão Singleton representa uma melhoria em relação ao uso de variáveis globais. Ele evita a poluição do espaço de nomes com variáveis globais que armazenam instâncias únicas.</li><li><strong>Permite um refinamento de operações e da representação:</strong> A classe Singleton pode ter subclasses e é fácil configurar uma aplicação com uma instância dessa classe estendida. Você pode configurar a aplicação com uma instância da classe de que necessita em tempo de execução.</li><li><strong>Permite um número variável de instâncias:</strong> O padrão torna fácil mudar de ideia, permitindo mais de uma instância da classe Singleton. Além disso, você pode usar a mesma abordagem para controlar o número de instâncias que a aplicação utiliza. Somente a operação que permite acesso à instância de Singleton necessita ser mudada.</li><li><strong>Mais flexível do que operações de classe:</strong> Uma outra maneira de empacotar a funcionalidade de um singleton é usando operações de classe (ou seja, funções-membro estáticas em C++ ou métodos de classe em Smalltalk). Porém, as técnicas de ambas as linguagens tornam difícil mudar um projeto para permitir mais de uma instância de uma classe. Além disso, as funções-membro estáticas em C++ nunca são virtuais, o que significa que as subclasses não podem redefini-las polimorficamente.</li></ol><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao"><span>Implementação</span></a></h2><p>A seguir apresentamos tópicos de implementação a serem considerados ao usar o padrão Singleton:</p><ol><li><p><strong>Garantindo uma única instância:</strong> O padrão Singleton torna a instância única uma instância normal de uma classe, mas essa classe é escrita de maneira que somente uma instância possa ser criada.</p><p>Uma forma comum de fazer isso é ocultando a operação que cria a instância usando uma operação de classe (isto é, ou uma função-membro estática ou um método de classe) que garanta que apenas uma única instância seja criada. Esta operação tem acesso à variável que mantém a única instância e garante que a variável seja iniciada com a instância única antes de retornar ao seu valor. Esta abordagem assegura que um singleton seja criado e iniciado antes da sua primeira utilização.</p><p>Em C++, você pode definir a operação de classe com uma função-membro estática <code>Instance</code> da classe <code>Singleton</code>. <code>Singleton</code> também define uma variável-membro estática <code>_instance</code> que contém um apontador para sua única instância.</p><p>A classe <code>Singleton</code> é declarada como:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> <span class="token function">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> _instance<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>A implementação correspondente é a seguinte \`\`\`cpp Singleton* Singleton::_instance = 0;</p><pre><code>  Singleton* Singleton::Instance () {
      if(_instance == 0) {
          _instance = new Singleton;
      }
      return _instance;
  }
</code></pre><p>Os clientes acessam o singleton através da função membro <code>Instance</code>. A variável <code>_instance</code> é iniciada com <code>0</code>, e a função-membro estática <code>Instance</code> retorna o seu valor, iniciando-a com a única instância se ele for <code>0</code>. <code>Instance</code> usa lazy initialization; o valor que ela retorna não é criado e armazenado até ser acessado pela primeira vez.</p><p>Note que o construtor é protegido. Um cliente que tenta instanciar <code>Singleton</code> diretamente obterá como resposta um erro em tempo de compilação. Isto assegura que somente uma instância possa ser criada.</p><p>Além do mais, uma vez que <code>_instance</code> é um apontador para um objeto <code>Singleton</code>, a função-membro <code>Instance</code> pode atribuir um apontador para uma subclasse de <code>Singleton</code> para esta variável. Daremos um exemplo do que dissemos aqui na seção &quot;Exemplo de código&quot;.</p><p>Há uma outra coisa a ser observada sobre a implementação em C++. Não é suficiente definir o singleton como um objeto global ou estático, confiando numa inicialização automática. Existem três razões para isto:</p><p><strong>(a)</strong> Não podemos garantir que somente uma instância de um objeto estático será declarada.</p><p><strong>(b)</strong> Talvez não tenhamos informação suficiente para instanciar cada singleton em tempo de inicialização estática. Um singleton pode necessitar de valores que são computados mais tarde, durante a execução do programa.</p><p><strong>(c)</strong> C++ não define a ordem pela qual os construtores para objetos globais são chamados entre unidades de compilação [ES90]. Isso significa que não podem existir dependências entre singletons; se alguma existir, então é inevitável a ocorrência de erro.</p><h2 id="exemplos-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplos-de-codigo"><span>EXEMPLOS DE CÓDIGO</span></a></h2><h3 id="design-patterns-com-java-projeto-orientado-a-objetos-guiado-por-padroes-casa-do-codigo" tabindex="-1"><a class="header-anchor" href="#design-patterns-com-java-projeto-orientado-a-objetos-guiado-por-padroes-casa-do-codigo"><span>Design Patterns com Java - Projeto orientado a objetos guiado por padroes - Casa do Codigo</span></a></h3><p>public class Configuracao { private static Configuracao instancia;</p><pre><code>    public static Configuracao getInstancia() {
        if (instancia == null) {
            instancia = new Configuracao();
        }
        return instancia;
    }

    // Construtor privado!
    private Configuracao() {
        // lê as configurações
    }

    // Outros métodos e atributos
}
</code></pre><h3 id="meu-exemplo" tabindex="-1"><a class="header-anchor" href="#meu-exemplo"><span>Meu exemplo</span></a></h3><pre><code>public class Configuracao {
  private static Configuracao instancia;
  private String urlBancoDeDados;
  private String usuario;
  private String senha;

  private Configuracao() {
      this.urlBancoDeDados = &quot;jdbc:mysql://localhost:3306/meuBanco&quot;;
      this.usuario = &quot;admin&quot;;
      this.senha = &quot;senha123&quot;;
  }

  public static Configuracao getInstancia() {
      if (instancia == null) {
          instancia = new Configuracao();
      }
      return instancia;
  }

  public String getUrlBancoDeDados() {
      return urlBancoDeDados;
  }

  public String getUsuario() {
      return usuario;
  }

  public String getSenha() {
      return senha;
  }

  public void exibirConfiguracoes() {
      System.out.println(&quot;URL do Banco de Dados: &quot; + urlBancoDeDados);
      System.out.println(&quot;Usuário: &quot; + usuario);
      System.out.println(&quot;Senha: &quot; + senha);
  }
}

public static void main(String[] args) {
      Configuracao config = Configuracao.getInstancia();
      config.exibirConfiguracoes();
      Configuracao outraConfig = Configuracao.getInstancia();
      System.out.println(&quot;São as mesmas instâncias? &quot; + (config == outraConfig));
}
</code></pre>`,39)),e(t,{id:"mermaid-188",code:"eJyVVs1uI0UQvvdTlJKLw9pxNsdwYM0a0CIhIrw5IaS0Zzp2h+muSfeMQSAegMdYOKAgcVpx2eu82H7VM86MHfuwPvinq7rqq6++Kk9W6BjnVq+CdorwSgf0mv2dXdVBZ5rp92SQ14RipSub7dqtx6nPrB74Lapg/YrqUHwJE8/NXOccDzjEWgfLzw3R+PUw4DDj6OzJ8OIgopWp3mxB7Th3wWG/2UV2zKuFd8S6EIw7tg3bnMyvdmlDD4jNNvwfKn3sYL2iyS6B+9ZDHD7zGdC4b+uZ3LO8OEDTAZfDTB1y3CHrgMOQr33zcdKUemV9VtS5mZRc4lCdntIPVnta2GKjKdf0NftoMk2jy4vLy5dvZ/PFYvbtxcXF5Zn68ZW4xs7jp9G6qsp4NZ2ubLWul+cZu+nQAdH7bHVcj6ZrdmYaau9NmP7C4efpsuDVxOnKBKuLia4LfegohmzaBYrTaJz1ws3k5WQv2ym98ZXxzT/N36y+0UH7ygZ6qA3VTrfTaAgOa00RSOCbDCKZ5i9pHBm64+BNZgIsVLKvMAAFL3VBuVE6MzEylYhMmpyJTp9L1rfaLZtHRxn7tclszvjmWH1P1zoPwIK7dB343iDaAnov8MVT1d1qHimYOxOMIMBdXayAKtLG/GZiikQng0ADtM0HbzN9kjB8x5Xd6Lb05k+yruQANaLEFm4XtCUhggWpUI9RsS6NhyX96oOf0zUHjJ9xZcFjZdySEabkGLWTqYxCratthatIFoSZgO/GCXMRdiMBc7ORRtJa43PLuhKPkrnAkVTUXz+neUesNOJogEGK1JfwUNsNI7kYVk9Upuj32hsUfU43ju5sUQWwaKFYtBQkNO+GMdFAZAESmk3VPF3p04i10ktb2FzjV0yXc5OjBdI1OdiAk2043YqOXan9Gnwq9VpauWpl6YD204Qp3mBJq8FpNPcgSme26HKKQJv/Nqb4Atg1bTAnzTv83Iq4groFGPEyqbG/MFYiDy8iQz8MCtxw1vy7VVzaa2h486GoLBQRuwgRdUmmyEWdxIfuFWsQCDYAMOUL4KIMzftSTrpi0XBMV2zBQarkRKuBWAnLAdKQXYQl2Il8R5mzbZSSAa9jtB10DxKFOq4ryLW/pBJVGRAg7KiEImBEwsyUVTs1yBelDJtBGzj5H1OSRkcudR6Iz6KzrvazMS2NA2L0NUEZLg9n7HZVCMlg4Ug1X0FgsgTEO025etoRabJnJTA96U7doO4n18E6eai1z/lKfYYNHsA3FhF2VTs2/YgPNQXAvfxkEwjMoQM2Ci6DVpVLE9vtp1F/VljRWyQNljfNY2xjdQsTnPSr8HMAmj0vu4vdzhH2CcTf6nAnZKyX3cIap9WDv7UC3UGdagdGLfTuTwxo9Tk4QwaH/Ydmw4nxq6aseY8dwIle0B/qCn+TSt3e3jqDrWNzdeRZrqf7wINcNyfmqncbOIGRlInDoUeu/vHBjM4GAWjg6prHinM8E1ylZ6PuKUjePUNCEN/g3knARzvsGn+L3QTTjfRhTPdYXWmJp7XBNeYxS/9gaUBOlLw+Ai2D0Wk="}),a[4]||(a[4]=o(`<h1 id="participantes-1" tabindex="-1"><a class="header-anchor" href="#participantes-1"><span>Participantes</span></a></h1><h2 id="singleton-1" tabindex="-1"><a class="header-anchor" href="#singleton-1"><span>Singleton</span></a></h2><ul><li>Define uma operação Instance que permite aos clientes acessarem sua única instância. Instance é uma operação de classe (ou seja, em Smalltalk é um método de classe e em C++ é uma função-membro estática).</li><li>Pode ser responsável pela criação da sua própria instância única.</li></ul><h1 id="colaboracoes-1" tabindex="-1"><a class="header-anchor" href="#colaboracoes-1"><span>Colaborações</span></a></h1><p>Os clientes acessam uma instância Singleton unicamente pela operação Instance do Singleton.</p><h1 id="consequencias-1" tabindex="-1"><a class="header-anchor" href="#consequencias-1"><span>Consequências</span></a></h1><p>O padrão Singleton apresenta vários benefícios:</p><ol><li><p>Acesso controlado à instância única. Como a classe Singleton encapsula a sua única instância, possui controle total sobre como e quando os clientes a acessam.</p></li><li><p>Espaço de nomes reduzido. O padrão Singleton representa uma melhoria em relação ao uso de variáveis globais. Ele evita a poluição do espaço de nomes com variáveis globais que armazenam instâncias únicas.</p></li><li><p>Permite um refinamento de operações e da representação. A classe Singleton pode ter subclasses e é fácil configurar uma aplicação com uma instância dessa classe estendida. Você pode configurar a aplicação com uma instância da classe de que necessita em tempo de execução.</p></li><li><p>Permite um número variável de instâncias. O padrão torna fácil mudar de ideia, permitindo mais de uma instância da classe Singleton. Além disso, você pode usar a mesma abordagem para controlar o número de instâncias que a aplicação utiliza. Somente a operação que permite acesso à instância de Singleton necessita ser mudada.</p></li><li><p>Mais flexível do que operações de classe. Uma outra maneira de empacotar a funcionalidade de um singleton é usando operações de classe (ou seja, funções-membro estáticas em C++ ou métodos de classe em Smalltalk). Porém, as técnicas de ambas as linguagens tornam difícil mudar um projeto para permitir mais que uma instância de uma classe. Além disso, as funções- membro estáticas em C++ nunca são virtuais, o que significa que as subclasses não podem redefini-las polimorficamente.</p></li></ol><h1 id="implementacao-1" tabindex="-1"><a class="header-anchor" href="#implementacao-1"><span>Implementação</span></a></h1><p>Abaixo temos a implementação do padrão Singleton. Nesse exemplo nota-se a presença do synchronized, isso se deve pois se tirássemos o synchronized e tentássemos criar duas instâncias da classe num determinado momento verificaríamos que isso é possível. Utilizando synchronized tem-se a certeza que o método nunca será acessado por duas threads ao mesmo tempo.</p><p>O construtor é privado evitando que essa classe seja instanciada fora dela. Assim, para podermos instanciar ou acessar uma instância da classe criou-se um atributo público e estático (da classe) que retorna através de um método estático uma única instância dessa classe. Como getInstance() é estático ele pode ser chamado de outra classe sem precisar instanciar a classe Singleton. Caso a classe já tenha sido instanciada o atributo não será nulo, assim retorna-se a única instância já criada.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> uniqueInstance<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Também existem outras abordagens para a criação da instância da classe Singleton. Por exemplo, se uma determinada classe Singleton sempre é criada e usada, pode-se usar o código abaixo:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> uniqueInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Prefira a abordagem da implementação acima caso o método getInstance() também seja muito acessado, pois usar synchronized pode diminuir a performance da aplicação. Note que a instância da classe será SEMPRE criada mesmo antes de chamar getInstance().</p><p>Segue abaixo a utilização da instância Singleton criada, na classe Main:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Obtém a instância única da classe Singleton</span>
        <span class="token class-name">Singleton</span> instance1 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// Obtém novamente a instância única (deverá ser a mesma)</span>
        <span class="token class-name">Singleton</span> instance2 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// Verifica se ambas as instâncias são iguais (devem ser)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance1 <span class="token operator">==</span> instance2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Ambas as instâncias são iguais&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Erro: As instâncias não são iguais&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo"><span>Exemplo de código</span></a></h1><h3 id="classe-logger" tabindex="-1"><a class="header-anchor" href="#classe-logger"><span>Classe Logger</span></a></h3><ul><li><p>private static Logger instance: Esta é a variável estática que conterá a única instância da classe Logger. É privada para evitar acesso direto fora da classe.</p></li><li><p>private Logger(): O construtor da classe é privado, impedindo que outras classes instanciem diretamente um objeto Logger. Isso garante que a única instância de Logger seja controlada pela própria classe.</p></li><li><p>public static synchronized Logger getInstance(): Este método estático é responsável por retornar a única instância de Logger disponível. É sincronizado (synchronized) para garantir que a criação da instância seja thread-safe em ambientes multithread.</p></li><li><p>if (instance == null): Verifica se a instância única ainda não foi criada.</p></li><li><p>instance = new Logger(): Se a instância for null, cria uma nova instância de Logger.</p></li><li><p>return instance: Retorna a instância existente ou recém-criada.</p></li><li><p>public void log(String message): Método público para imprimir mensagens de log (Também poderia ser usado para registrar).</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> instance<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Logger</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[LOG] &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="classe-main" tabindex="-1"><a class="header-anchor" href="#classe-main"><span>Classe Main</span></a></h3><ul><li><p>Logger logger = Logger.getInstance(): Obtém a instância única do Logger usando o método estático getInstance().</p></li><li><p>logger.log(&quot;...&quot;): Usa o logger para registrar várias mensagens de log diferentes.</p></li><li><p>Logger anotherLogger = Logger.getInstance(): Obtém novamente a instância do Logger. Como getInstance() retorna sempre a mesma instância (devido ao Singleton), logger e anotherLogger referenciam o mesmo objeto.</p></li><li><p>System.out.println(logger == anotherLogger): Imprime true se logger e anotherLogger se referirem à mesma instância de Logger, o que confirma que o padrão</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Iniciando a aplicação&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Realizando processamento...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Operação concluída com sucesso&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Aviso: o sistema está próximo do limite de capacidade&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Erro: falha ao conectar-se ao banco de dados&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Logger</span> anotherLogger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logger <span class="token operator">==</span> anotherLogger<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos"><span>Usos conhecidos</span></a></h1><p>Um exemplo é o relacionamento entre classes e suas metaclasses. Uma metaclasse é a classe de uma classe, e cada metaclasse tem uma instância. As metaclasses não têm nomes (exceto indireta- mente, através do nome da sua única instância), mas registram e acompanham a sua única instância, e normalmente não criarão outra.</p><ul><li><p>O toolkit para construção de interfaces de usuário InterViews [LCI+92] usa o padrão Singleton para acessar as únicas instâncias de suas classes Session e WidgetKit, entre outras.</p></li><li><p>Session define o ciclo de eventos disparáveis da aplicação principal, armazena o banco de dados das preferências de estilo do usuário e administra conexões para um ou mais dispositivos físicos de display.</p></li><li><p>WidgetKit é uma Abstract Factory (95) para definir os widgets de estilo de interação. A operação WidgetKit::instance determina a subclasse específica de WidgetKit que é instanciada baseada numa variável de ambiente que Session define.</p></li></ul>`,27))])}const f=p(d,[["render",g],["__file","Singleton.html.vue"]]),S=JSON.parse('{"path":"/posts/Seminarios/seminario-1/Singleton.html","title":"Singleton","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2024-07-25T23:10:00.000Z","tag":["Singleton","gof"],"category":["seminario-1"],"order":10,"excerpt":"Apresentação do Padrão de Projeto Singleton","author":"GuiSamp, RiansFonseca","gitInclude":["../../../../src/includes/seminario-1-GuiSamp/README.md","../../../../src/includes/seminario-1-RiansFonseca/README-SINGLETON.md"],"description":"Singleton Guilherme Sampaio Oliveira (20221TADSSAJ0011) @GuiSamp Singleton: Criação de Objetos Intenção Garantir que uma classe tenha somente uma instância e fornecer um ponto g...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/posts/Seminarios/seminario-1/Singleton.html"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Singleton"}],["meta",{"property":"og:description","content":"Singleton Guilherme Sampaio Oliveira (20221TADSSAJ0011) @GuiSamp Singleton: Criação de Objetos Intenção Garantir que uma classe tenha somente uma instância e fornecer um ponto g..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"og:updated_time","content":"2024-09-05T21:52:48.000Z"}],["meta",{"property":"article:author","content":"GuiSamp, RiansFonseca"}],["meta",{"property":"article:tag","content":"Singleton"}],["meta",{"property":"article:tag","content":"gof"}],["meta",{"property":"article:published_time","content":"2024-07-25T23:10:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-05T21:52:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Singleton\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-25T23:10:00.000Z\\",\\"dateModified\\":\\"2024-09-05T21:52:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GuiSamp, RiansFonseca\\"}]}"]]},"headers":[{"level":2,"title":"Guilherme Sampaio Oliveira (20221TADSSAJ0011)","slug":"guilherme-sampaio-oliveira-20221tadssaj0011","link":"#guilherme-sampaio-oliveira-20221tadssaj0011","children":[]},{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Também conhecido como","slug":"tambem-conhecido-como","link":"#tambem-conhecido-como","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":2,"title":"Aplicabilidade","slug":"aplicabilidade","link":"#aplicabilidade","children":[]},{"level":2,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[]},{"level":2,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":2,"title":"Colaborações","slug":"colaboracoes","link":"#colaboracoes","children":[]},{"level":2,"title":"Consequências","slug":"consequencias","link":"#consequencias","children":[]},{"level":2,"title":"Implementação","slug":"implementacao","link":"#implementacao","children":[]},{"level":2,"title":"EXEMPLOS DE CÓDIGO","slug":"exemplos-de-codigo","link":"#exemplos-de-codigo","children":[{"level":3,"title":"Design Patterns com Java - Projeto orientado a objetos guiado por padroes - Casa do Codigo","slug":"design-patterns-com-java-projeto-orientado-a-objetos-guiado-por-padroes-casa-do-codigo","link":"#design-patterns-com-java-projeto-orientado-a-objetos-guiado-por-padroes-casa-do-codigo","children":[]},{"level":3,"title":"Meu exemplo","slug":"meu-exemplo","link":"#meu-exemplo","children":[]}]},{"level":2,"title":"Singleton","slug":"singleton-1","link":"#singleton-1","children":[{"level":3,"title":"Classe Logger","slug":"classe-logger","link":"#classe-logger","children":[]},{"level":3,"title":"Classe Main","slug":"classe-main","link":"#classe-main","children":[]}]}],"git":{"createdTime":1725573168000,"updatedTime":1725573168000,"contributors":[{"name":"leandro-costa","email":"leandro.costa@ifba.edu.br","commits":1}]},"readingTime":{"minutes":0.18,"words":53},"filePathRelative":"posts/Seminarios/seminario-1/Singleton.md","localizedDate":"25 de julho de 2024","autoDesc":true}');export{f as comp,S as data};
