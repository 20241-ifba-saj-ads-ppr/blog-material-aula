import{_ as e}from"./EstruturaFacade-CVnHfTeE.js";import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as s,d as i,e as p,a as c,o as l,r}from"./app-BrOvOMMH.js";const d={},u={href:"https://github.com/GuiSamp",target:"_blank",rel:"noopener noreferrer"};function m(k,a){const n=r("ExternalLinkIcon");return l(),t("div",null,[a[1]||(a[1]=s("h1",{id:"facade",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#facade"},[s("span",null,"Facade")])],-1)),a[2]||(a[2]=s("h2",{id:"guilherme-sampaio-oliveira-20221tadssaj0011",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#guilherme-sampaio-oliveira-20221tadssaj0011"},[s("span",null,"Guilherme Sampaio Oliveira (20221TADSSAJ0011)")])],-1)),s("p",null,[s("a",u,[a[0]||(a[0]=i("@GuiSamp")),p(n)])]),a[3]||(a[3]=c('<h1 id="padrao-de-projeto-facade-fachada" tabindex="-1"><a class="header-anchor" href="#padrao-de-projeto-facade-fachada"><span>Padrão de Projeto: Façade (Fachada)</span></a></h1><p><strong>Façade (Fachada)</strong> é um padrão de projeto estrutural que fornece uma interface simplificada para um subsistema complexo, tornando-o mais fácil de ser utilizado. Abaixo, farei um resumo do padrão, destacando sua intenção, motivação, estrutura, e implementações.</p><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><p>O objetivo principal do Façade é fornecer uma interface unificada para um conjunto de interfaces em um subsistema, facilitando a interação dos clientes com o sistema, que pode ser bastante complexo. A fachada expõe apenas o que é necessário para os clientes, ocultando detalhes internos e simplificando a comunicação.</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><p>Estruturar um sistema em subsistemas é uma estratégia eficaz para reduzir a complexidade. Em qualquer projeto, um dos objetivos principais é minimizar a comunicação e as dependências entre os subsistemas. Uma maneira de alcançar esse objetivo é introduzir um objeto façade (fachada), que fornece uma interface única e simplificada para os recursos e funcionalidades mais comuns de um subsistema.</p><p>Por exemplo, considere um ambiente de desenvolvimento que precisa fornecer acesso a um subsistema de compilação. Esse subsistema pode ser composto por diversas classes, como Scanner, Parser, ProgramNode, BytecodeStream e ProgramNodeBuilder, cada uma responsável por diferentes aspectos do processo de compilação. Enquanto algumas aplicações especializadas podem precisar acessar essas classes diretamente, a maioria dos usuários de um compilador não está interessada nos detalhes de análise ou geração de código; eles simplesmente querem compilar seu código.</p><p>Para esses usuários, as interfaces poderosas, mas de baixo nível, do subsistema de compilação podem ser uma complicação desnecessária. Nesse caso, uma fachada pode ser usada para fornecer uma interface mais simples e direta, escondendo a complexidade do subsistema e facilitando o uso do compilador para a maioria dos clientes.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade"><span>Aplicabilidade</span></a></h2><p>Considere o uso do padrão Façade nas seguintes situações:</p><ul><li><p><strong>Simplificação de Interface em Subsistemas Complexos</strong>:<br> À medida que os subsistemas evoluem, eles tendem a se tornar mais complexos. A aplicação de padrões de projeto geralmente resulta em mais classes menores, aumentando a reutilização e a customização do sistema. No entanto, essa complexidade pode dificultar o uso do subsistema para clientes que não precisam dessa flexibilidade. A fachada oferece uma visão simplificada e padrão do sistema, adequada para a maioria dos clientes, enquanto permite que aqueles que precisam de customização acessem funcionalidades mais avançadas além da fachada.</p></li><li><p><strong>Redução de Dependências entre Clientes e Subsistemas</strong>:<br> Quando há muitas dependências entre clientes e as classes de implementação de uma abstração, a introdução de uma fachada pode ajudar a desacoplar o subsistema dos clientes e de outros subsistemas. Isso promove maior independência e portabilidade dos subsistemas, facilitando a manutenção e evolução do sistema como um todo.</p></li><li><p><strong>Estruturação em Camadas de Subsistemas</strong>:<br> Quando você deseja estruturar seus subsistemas em camadas, o uso de uma fachada pode definir um ponto de entrada para cada nível do subsistema. Se os subsistemas são independentes, a fachada pode simplificar as dependências entre eles, permitindo que se comuniquem exclusivamente por meio de suas fachadas, o que resulta em uma arquitetura mais modular e organizada.</p></li></ul><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h2><figure><img src="'+e+`" alt="Estrutura Facade" tabindex="0" loading="lazy"><figcaption>Estrutura Facade</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h2><h3 id="facade-compiler" tabindex="-1"><a class="header-anchor" href="#facade-compiler"><span>Façade (Compiler)</span></a></h3><ul><li>Conhece quais as classes do subsistema são responsáveis pelo atendimento de uma solicitação.</li><li>Delegar solicitações de clientes a objetos apropriados do subsistema.</li></ul><h3 id="classes-de-subsystem-scanner-parser-programnode-etc" tabindex="-1"><a class="header-anchor" href="#classes-de-subsystem-scanner-parser-programnode-etc"><span>Classes de Subsystem (Scanner, Parser, ProgramNode, etc.)</span></a></h3><ul><li>Implementam a funcionalidade do subsistema.</li><li>Encarregam-se do trabalho atribuído a elas pelo objeto Façade.</li><li>Não têm conhecimento da Façade; isto é, não mantêm referências para a mesma.</li></ul><h2 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes"><span>Colaborações</span></a></h2><p>Os clientes interagem com o subsistema através da fachada. A fachada repassa as solicitações para os objetos do subsistema, que realizam o trabalho necessário. Os clientes não precisam lidar diretamente com as classes complexas do subsistema, mas podem fazê-lo se precisarem de controle mais granular.</p><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Consequências</span></a></h2><p>O uso do padrão Façade oferece vários benefícios:</p><ol><li><p><strong>Isolamento</strong>: Os clientes ficam isolados dos componentes internos do subsistema, o que reduz o número de objetos com os quais os clientes precisam lidar.</p></li><li><p><strong>Acoplamento Fraco</strong>: Promove um acoplamento fraco entre o subsistema e seus clientes, permitindo que o subsistema evolua sem impactar os clientes.</p></li><li><p><strong>Facilidade de Uso</strong>: Simplifica a interface para os casos comuns, mas não impede que as aplicações acessem as classes do subsistema diretamente, se necessário.</p></li></ol><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao"><span>Implementação</span></a></h2><ol><li><p><strong>Providencie uma Interface Simples:</strong> Verifique se é possível fornecer uma interface mais simples do que a que o subsistema já oferece. Você está no caminho certo se essa interface torna o código cliente independente de muitas classes do subsistema.</p></li><li><p><strong>Declare e Implemente a Fachada:</strong> Declare e implemente essa interface em uma nova classe fachada. A fachada deve redirecionar as chamadas do código cliente para os objetos apropriados do subsistema. Além disso, a fachada deve ser responsável por inicializar o subsistema e gerenciar seu ciclo de vida, a menos que o código cliente já faça isso.</p></li><li><p><strong>Use a Fachada no Código Cliente:</strong> Para obter o benefício pleno do padrão, faça todo o código cliente se comunicar com o subsistema apenas através da fachada. Agora, o código cliente ficará protegido de qualquer mudança no código do subsistema. Por exemplo, quando um subsistema recebe um upgrade para uma nova versão, você só precisará modificar o código na fachada.</p></li><li><p><strong>Refine a Fachada se Necessário:</strong> Se a fachada ficar grande demais, considere extrair parte de seu comportamento para uma nova e refinada classe fachada.</p></li></ol><h2 id="exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo"><span>Exemplo de Código</span></a></h2><h3 id="refactoring-guru" tabindex="-1"><a class="header-anchor" href="#refactoring-guru"><span>REFACTORING GURU</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Essas são algumas das classes de um framework complexo de um</span>
<span class="token comment">// conversor de vídeo de terceiros. Nós não controlamos aquele</span>
<span class="token comment">// código, portanto não podemos simplificá-lo.</span>

<span class="token keyword">class</span> <span class="token class-name">VideoFile</span>
<span class="token comment">// ...</span>

<span class="token keyword">class</span> <span class="token class-name">OggCompressionCodec</span>
<span class="token comment">// ...</span>

<span class="token keyword">class</span> <span class="token class-name">MPEG4CompressionCodec</span>
<span class="token comment">// ...</span>

<span class="token keyword">class</span> <span class="token class-name">CodecFactory</span>
<span class="token comment">// ...</span>

<span class="token keyword">class</span> <span class="token class-name">BitrateReader</span>
<span class="token comment">// ...</span>

<span class="token keyword">class</span> <span class="token class-name">AudioMixer</span>
<span class="token comment">// ...</span>


<span class="token comment">// Nós criamos uma classe fachada para esconder a complexidade</span>
<span class="token comment">// do framework atrás de uma interface simples. É uma troca</span>
<span class="token comment">// entre funcionalidade e simplicidade.</span>
<span class="token keyword">class</span> <span class="token class-name">VideoConverter</span> is
   method <span class="token function">convert</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> format<span class="token punctuation">)</span><span class="token operator">:</span><span class="token class-name">File</span> is
       file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VideoFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
       sourceCodec <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CodecFactory</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>format <span class="token operator">==</span> <span class="token string">&quot;mp4&quot;</span><span class="token punctuation">)</span>
           destinationCodec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MPEG4CompressionCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token keyword">else</span>
           destinationCodec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OggCompressionCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       buffer <span class="token operator">=</span> <span class="token class-name">BitrateReader</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> sourceCodec<span class="token punctuation">)</span>
       result <span class="token operator">=</span> <span class="token class-name">BitrateReader</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> destinationCodec<span class="token punctuation">)</span>
       result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AudioMixer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fix</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

<span class="token comment">// As classes da aplicação não dependem de um bilhão de classes</span>
<span class="token comment">// fornecidas por um framework complexo. Também, se você decidir</span>
<span class="token comment">// trocar de frameworks, você só precisa reescrever a classe</span>
<span class="token comment">// fachada.</span>
<span class="token keyword">class</span> <span class="token class-name">Application</span> is
   method <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> is
       convertor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VideoConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       mp4 <span class="token operator">=</span> convertor<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">&quot;funny-cats-video.ogg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mp4&quot;</span><span class="token punctuation">)</span>
       mp4<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="meu-exemplo" tabindex="-1"><a class="header-anchor" href="#meu-exemplo"><span>Meu Exemplo</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ServicoDeEstoque</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">verificarEstoque</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Verificando estoque do item: &quot;</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ServicoDePagamento</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processarPagamento</span><span class="token punctuation">(</span><span class="token class-name">String</span> metodoDePagamento<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Processando pagamento com o método: &quot;</span> <span class="token operator">+</span> metodoDePagamento<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ServicoDeEnvio</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enviarItem</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enviando o item: &quot;</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ServicoDePedido</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">criarPedido</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Criando pedido para o item: &quot;</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">FachadaDePedido</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ServicoDeEstoque</span> servicoDeEstoque<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ServicoDePagamento</span> servicoDePagamento<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ServicoDeEnvio</span> servicoDeEnvio<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ServicoDePedido</span> servicoDePedido<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">FachadaDePedido</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>servicoDeEstoque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServicoDeEstoque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>servicoDePagamento <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServicoDePagamento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>servicoDeEnvio <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServicoDeEnvio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>servicoDePedido <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServicoDePedido</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">realizarPedido</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token class-name">String</span> metodoDePagamento<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        servicoDePedido<span class="token punctuation">.</span><span class="token function">criarPedido</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        servicoDeEnvio<span class="token punctuation">.</span><span class="token function">enviarItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">verificarEstoque</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> servicoDeEstoque<span class="token punctuation">.</span><span class="token function">verificarEstoque</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processarPagamento</span><span class="token punctuation">(</span><span class="token class-name">String</span> metodoDePagamento<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> servicoDePagamento<span class="token punctuation">.</span><span class="token function">processarPagamento</span><span class="token punctuation">(</span>metodoDePagamento<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">GerenciadorDePedidos</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">FachadaDePedido</span> fachadaDePedido<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">GerenciadorDePedidos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>fachadaDePedido <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FachadaDePedido</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">criarPedido</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">,</span> <span class="token class-name">String</span> metodoDePagamento<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> estoqueDisponivel <span class="token operator">=</span> fachadaDePedido<span class="token punctuation">.</span><span class="token function">verificarEstoque</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> pagamentoAprovado <span class="token operator">=</span> fachadaDePedido<span class="token punctuation">.</span><span class="token function">processarPagamento</span><span class="token punctuation">(</span>metodoDePagamento<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>estoqueDisponivel <span class="token operator">&amp;&amp;</span> pagamentoAprovado<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fachadaDePedido<span class="token punctuation">.</span><span class="token function">realizarPedido</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> metodoDePagamento<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Pedido realizado com sucesso para o item: &quot;</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Não foi possível realizar o pedido para o item: &quot;</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AplicacaoECommerce</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">GerenciadorDePedidos</span> gerenciadorDePedidos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GerenciadorDePedidos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gerenciadorDePedidos<span class="token punctuation">.</span><span class="token function">criarPedido</span><span class="token punctuation">(</span><span class="token string">&quot;Smartphone&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cartão de Crédito&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="padroes-relacionados" tabindex="-1"><a class="header-anchor" href="#padroes-relacionados"><span>Padrões Relacionados</span></a></h2><ul><li><p><strong>Abstract Factory</strong>: Pode ser usado em conjunto com Façade para criar objetos do subsistema de forma independente.</p></li><li><p><strong>Mediator</strong>: Embora semelhante, o Mediator abstrai a comunicação entre objetos, centralizando funcionalidades, enquanto o Façade abstrai a interface do subsistema.</p></li><li><p><strong>Singleton</strong>: Muitas vezes, a fachada é implementada como um Singleton, garantindo que apenas uma instância da fachada exista.</p></li></ul>`,32))])}const g=o(d,[["render",m],["__file","Facade.html.vue"]]),h=JSON.parse('{"path":"/posts/Seminarios/seminario-2/Facade.html","title":"Facade","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2024-08-22T23:10:00.000Z","tag":["Facade","gof"],"category":["seminario-2"],"order":10,"excerpt":"Apresentação do Padrão de Projeto Facade","author":"LuisMiguelADS","gitInclude":["../../../../src/includes/seminario-2-GuiSamp/README.md"],"description":"Facade Guilherme Sampaio Oliveira (20221TADSSAJ0011) @GuiSamp Padrão de Projeto: Façade (Fachada) Façade (Fachada) é um padrão de projeto estrutural que fornece uma interface si...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/posts/Seminarios/seminario-2/Facade.html"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Facade"}],["meta",{"property":"og:description","content":"Facade Guilherme Sampaio Oliveira (20221TADSSAJ0011) @GuiSamp Padrão de Projeto: Façade (Fachada) Façade (Fachada) é um padrão de projeto estrutural que fornece uma interface si..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"og:updated_time","content":"2024-09-30T13:40:45.000Z"}],["meta",{"property":"article:author","content":"LuisMiguelADS"}],["meta",{"property":"article:tag","content":"Facade"}],["meta",{"property":"article:tag","content":"gof"}],["meta",{"property":"article:published_time","content":"2024-08-22T23:10:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-30T13:40:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Facade\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-22T23:10:00.000Z\\",\\"dateModified\\":\\"2024-09-30T13:40:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LuisMiguelADS\\"}]}"]]},"headers":[{"level":2,"title":"Guilherme Sampaio Oliveira (20221TADSSAJ0011)","slug":"guilherme-sampaio-oliveira-20221tadssaj0011","link":"#guilherme-sampaio-oliveira-20221tadssaj0011","children":[]},{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":2,"title":"Aplicabilidade","slug":"aplicabilidade","link":"#aplicabilidade","children":[]},{"level":2,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[]},{"level":2,"title":"Participantes","slug":"participantes","link":"#participantes","children":[{"level":3,"title":"Façade (Compiler)","slug":"facade-compiler","link":"#facade-compiler","children":[]},{"level":3,"title":"Classes de Subsystem (Scanner, Parser, ProgramNode, etc.)","slug":"classes-de-subsystem-scanner-parser-programnode-etc","link":"#classes-de-subsystem-scanner-parser-programnode-etc","children":[]}]},{"level":2,"title":"Colaborações","slug":"colaboracoes","link":"#colaboracoes","children":[]},{"level":2,"title":"Consequências","slug":"consequencias","link":"#consequencias","children":[]},{"level":2,"title":"Implementação","slug":"implementacao","link":"#implementacao","children":[]},{"level":2,"title":"Exemplo de Código","slug":"exemplo-de-codigo","link":"#exemplo-de-codigo","children":[{"level":3,"title":"REFACTORING GURU","slug":"refactoring-guru","link":"#refactoring-guru","children":[]},{"level":3,"title":"Meu Exemplo","slug":"meu-exemplo","link":"#meu-exemplo","children":[]}]},{"level":2,"title":"Padrões Relacionados","slug":"padroes-relacionados","link":"#padroes-relacionados","children":[]}],"git":{"createdTime":1727703645000,"updatedTime":1727703645000,"contributors":[{"name":"Leandro Costa","email":"leandro.costa@ifba.edu.br","commits":1}]},"readingTime":{"minutes":0.13,"words":39},"filePathRelative":"posts/Seminarios/seminario-2/Facade.md","localizedDate":"22 de agosto de 2024","autoDesc":true}');export{g as comp,h as data};
