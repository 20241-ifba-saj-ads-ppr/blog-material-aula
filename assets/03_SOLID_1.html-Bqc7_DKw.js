import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as t,c as i,b as a,d as s,e,a as c}from"./app-C63fCGsC.js";const l={},d=c(`<h1 id="principios-solid-principio-da-responsabilidade-unica-srp" tabindex="-1"><a class="header-anchor" href="#principios-solid-principio-da-responsabilidade-unica-srp"><span>Princípios SOLID - Princípio da Responsabilidade Única (SRP)</span></a></h1><p>Adaptado de <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>.</p><h2 id="principios-solid-principio-da-responsabilidade-unica-srp-1" tabindex="-1"><a class="header-anchor" href="#principios-solid-principio-da-responsabilidade-unica-srp-1"><span>Princípios SOLID - Princípio da Responsabilidade Única (SRP)</span></a></h2><p>Adaptado de <sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup>.</p><p>SOLID são cinco princípios da programação orientada a objetos que facilitam no desenvolvimento de softwares, tornando-os fáceis de manter e estender. Esses princípios podem ser aplicados a qualquer linguagem de Programação Orientada a Objetos.</p><p>Michael Feathers criou esse acrônimo após observar cinco princípios da orientação a objetos e design de código criados por Robert C. Martin (a.k.a. Uncle Bob) e abordados no artigo The Principles of OOD</p><p>S.O.L.I.D: Os 5 princípios da POO</p><ol><li>S — Single Responsiblity Principle (Princípio da responsabilidade única)</li><li>O — Open-Closed Principle (Princípio Aberto-Fechado)</li><li>L — Liskov Substitution Principle (Princípio da substituição de Liskov)</li><li>I — Interface Segregation Principle (Princípio da Segregação da Interface)</li><li>D — Dependency Inversion Principle (Princípio da inversão da dependência)</li></ol><p>Esses princípios ajudam o programador a escrever códigos mais limpos, separando responsabilidades, diminuindo acoplamentos, facilitando na refatoração e estimulando o reaproveitamento do código.</p><h2 id="principio-da-responsabilidade-unica-srp" tabindex="-1"><a class="header-anchor" href="#principio-da-responsabilidade-unica-srp"><span>Princípio da Responsabilidade Única (SRP)</span></a></h2><p>Adaptado de <sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup> e <sup class="footnote-ref"><a href="#footnote1">[1:2]</a><a class="footnote-anchor" id="footnote-ref1:2"></a></sup>.</p><p>Este princípio nada mais é do que uma perspectiva diferente para um dos mais fundamentais princípios da orientação a objetos: a coesão.</p><p>Esse princípio declara que uma classe deve ser especializada em um único assunto e possuir apenas uma responsabilidade dentro do software, ou seja, a classe deve ter uma única tarefa ou ação para executar.</p><div class="hint-container tip"><p class="hint-container-title">Princípio da Responsabilidade Única</p><p>Uma classe deve ter um, e somente um, motivo para mudar.</p></div><p>Vamos tentar entender o que isso significa e eventuais problemas causados pela violação deste princípio.</p><h3 id="alguns-problemas" tabindex="-1"><a class="header-anchor" href="#alguns-problemas"><span>Alguns Problemas</span></a></h3><p>Quando estamos aprendendo programação orientada a objetos, sem sabermos, damos a uma classe mais de uma responsabilidade e acabamos criando classes que fazem de tudo (<em>God Class</em>). Num primeiro momento isso pode parecer eficiente, mas como as responsabilidades acabam se misturando, quando há necessidade de realizar alterações nessa classe, será difícil modificar uma dessas responsabilidades sem comprometer as outras. Toda alteração acaba sendo introduzida com um certo nível de incerteza em nosso sistema — principalmente se não existirem testes automatizados!</p><p>Alguns problemas decorrentes da utilização de <em>God Class</em>:</p><ul><li>Dificuldade de compreensão e, portanto, dificuldade de manutenção.</li><li>Dificuldade de reuso.</li><li>Com responsabilidades entrelaçadas em uma mesma classe, pode ficar difícil alterar uma dessas responsabilidades sem comprometer as outras (rigidez) e pode acabar quebrando outras partes do software (fragilidade).</li><li>Acoplamento alto, ou seja, a classe tem um número excessivo de dependências, e portanto fica mais sujeita a mudanças em decorrência de alterações em outras classes (novamente a fragilidade).</li></ul><h3 id="exemplos-comuns-de-violacao" tabindex="-1"><a class="header-anchor" href="#exemplos-comuns-de-violacao"><span>Exemplos Comuns de Violação</span></a></h3><p>Imaginem uma classe de negócio Pedido:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pedido</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">adicionarProduto</span><span class="token punctuation">(</span><span class="token class-name">Produto</span> produto<span class="token punctuation">,</span> <span class="token keyword">int</span> quantidade<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcularTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gerarXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>No exemplo acima, temos uma quebra do SRP de uma forma bem explícita, uma vez que temos responsabilidades que deveriam ser de componentes distintos do software. Enquanto os dois primeiros métodos fazem sentido para o domínio do qual Pedido faz parte, o último está relacionado à exibição de dados em um formato específico, o que faz mais sentido em camadas superiores, como de Aplicação ou de UI.</p><p>Em um projeto com várias classes seguindo esse “padrão”, fica difícil – ou impossível – manter a coesão em um nível mais alto: em nível de componentes. Em outras palavras, o software acaba sendo um emaranhado de classes sem um divisão clara de camadas.</p><p>De forma mais prática: chega um momento onde fica impossível separar determinadas classes em uma class library devido à referência circular. Também fica complicado fazer o deploy de componentes isolados por haver dependências demais entre eles.</p><p>Outros exemplos comuns são:</p><ol><li>Classes que misturam negócio e persistência (Pedido, por exemplo, contém métodos que sabem incluir, alterar e excluir pedidos, fazendo com o que mesmo seja acoplado com classes como SqlConnection ou ainda algum ORM);</li><li><em>View models</em> que apresentam regras de negócio;</li></ol><h3 id="um-exemplo-menos-obvio" tabindex="-1"><a class="header-anchor" href="#um-exemplo-menos-obvio"><span>Um Exemplo Menos Óbvio</span></a></h3><p>Nem sempre é fácil identificar várias responsabilidades em uma mesma classe. Eu diria que na maioria das vezes não é. Aliás, atribuir responsabilidades é uma das principais tarefas de um programador OO.</p><p>Mesmo que uma classe de negócio esteja fazendo apenas tarefas relacionadas ao seu domínio, ela pode estar fazendo coisas demais.</p><p>Vejamos o seguinte exemplo:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cliente</span><span class="token punctuation">{</span>
    <span class="token comment">// dados do cliente, como Nome, CPF, etc.</span>
    <span class="token comment">// outros métodos</span>
 
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcularDescontoPara</span><span class="token punctuation">(</span><span class="token class-name">Venda</span> venda<span class="token punctuation">)</span>    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FormaDePagamento<span class="token punctuation">.</span>AVista</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>venda<span class="token punctuation">.</span><span class="token function">getFormaDePagamento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>venda<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2000</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> venda<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.2</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> venda<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Observem acima que o método <code>calcularDescontoPara</code> não manipula nenhum dado da classe <code>Cliente</code>, ou seja, nenhuma informação do cliente é necessária para se determinar o valor do desconto.</p><p>Sendo assim, esta classe possui pelo menos duas razões para mudar: uma quando houver alteração na lógica de negócio referente a um <code>Cliente</code> e outra quando houver alguma alteração na lógica de uma <code>Venda</code>.</p><p>Certamente, faz mais sentido que este método seja da classe <code>Venda</code>!</p><h3 id="outro-exemplo" tabindex="-1"><a class="header-anchor" href="#outro-exemplo"><span>Outro exemplo</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculateTotalSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteItem</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A classe <code>Order</code> viola o SRP porque realiza 3 tipos distintos de tarefas. Além de lidar com as informações do pedido, ela também é responsável pela exibição e manipulação dos dados. Lembre-se, o princípio da responsabilidade única preza que uma classe deve ter um, e somente um, motivo para mudar.</p><p>A violação do <em>Single Responsibility Principle</em> pode gerar alguns problemas, sendo eles:</p><ul><li>Falta de coesão — uma classe não deve assumir responsabilidades que não são suas;</li><li>Alto acoplamento — Mais responsabilidades geram um maior nível de dependências, deixando o sistema engessado e frágil para alterações;</li><li>Dificuldades na implementação de testes automatizados — É difícil de &quot;mockar&quot; esse tipo de classe;</li><li>Dificuldades para reaproveitar o código; Aplicando o SRP na classe Order, podemos refatorar o código da seguinte forma:</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculateTotalSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteItem</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderRepository</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">double</span> orderId<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Order</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderViewer</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*...*/</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Perceba no exemplo acima que agora temos 3 classes, cada uma cuidando da sua responsabilidade.</p><p>O princípio da responsabilidade única não se limita somente a classes, ele também pode ser aplicado em métodos e funções, ou seja, tudo que é responsável por executar uma ação, deve ser responsável por apenas aquilo que se propõe a fazer.</p><h3 id="conclusao" tabindex="-1"><a class="header-anchor" href="#conclusao"><span>Conclusão</span></a></h3><p>O SRP é um dos princípios mais importantes que existe na orientação a objetos. Quando falamos de responsabilidades e coesão estamos tocando em dois pontos-chave da OO, que nos ajudam a criar classes menores, de mais fácil entendimento, manutenção e reuso.</p><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias"><span>Referências</span></a></h2><hr class="footnotes-sep">`,47),r={class:"footnotes"},u={class:"footnotes-list"},m={id:"footnote1",class:"footnote-item"},k={href:"https://medium.com/desenvolvendo-com-paixao/o-que-%C3%A9-solid-o-guia-completo-para-voc%C3%AA-entender-os-5-princ%C3%ADpios-da-poo-2b937b3fc530",target:"_blank",rel:"noopener noreferrer"},v=a("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),b=a("a",{href:"#footnote-ref1:1",class:"footnote-backref"},"↩︎",-1),f=a("a",{href:"#footnote-ref1:2",class:"footnote-backref"},"↩︎",-1),h={id:"footnote2",class:"footnote-item"},g={href:"https://robsoncastilho.com.br/2013/02/06/principios-solid-principio-da-responsabilidade-unica-srp/",target:"_blank",rel:"noopener noreferrer"},y=a("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1);function w(P,O){const n=p("ExternalLinkIcon");return t(),i("div",null,[d,a("section",r,[a("ol",u,[a("li",m,[a("p",null,[s("João Roberto da Paixão.O que é SOLID: O guia completo para você entender os 5 princípios da POO."),a("a",k,[s("https://medium.com/desenvolvendo-com-paixao/o-que-%C3%A9-solid-o-guia-completo-para-voc%C3%AA-entender-os-5-princ%C3%ADpios-da-poo-2b937b3fc530"),e(n)]),s(" (Acessado em 18/03/2022) "),v,s(),b,s(),f])]),a("li",h,[a("p",null,[s("Robson Castilho. Princípio da Responsabilidade Única (SRP) "),a("a",g,[s("https://robsoncastilho.com.br/2013/02/06/principios-solid-principio-da-responsabilidade-unica-srp/"),e(n)]),s(". (Acessado em 15/03/2022) "),y])])])])])}const _=o(l,[["render",w],["__file","03_SOLID_1.html.vue"]]),I=JSON.parse('{"path":"/posts/SOLID/03_SOLID_1.html","title":"Princípios SOLID - Princípio da Responsabilidade Única (SRP)","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2024-03-21T21:40:00.000Z","tag":["solid"],"category":["aula"],"order":3,"gitInclude":["../../../src/includes/SOLID.md","../../../src/includes/bib.md"],"description":"Princípios SOLID - Princípio da Responsabilidade Única (SRP) Adaptado de [1]. Princípios SOLID - Princípio da Responsabilidade Única (SRP) Adaptado de [1:1]. SOLID são cinco pri...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/posts/SOLID/03_SOLID_1.html"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Princípios SOLID - Princípio da Responsabilidade Única (SRP)"}],["meta",{"property":"og:description","content":"Princípios SOLID - Princípio da Responsabilidade Única (SRP) Adaptado de [1]. Princípios SOLID - Princípio da Responsabilidade Única (SRP) Adaptado de [1:1]. SOLID são cinco pri..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"og:updated_time","content":"2024-07-18T22:20:30.000Z"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["meta",{"property":"article:tag","content":"solid"}],["meta",{"property":"article:published_time","content":"2024-03-21T21:40:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-18T22:20:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Princípios SOLID - Princípio da Responsabilidade Única (SRP)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-21T21:40:00.000Z\\",\\"dateModified\\":\\"2024-07-18T22:20:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Princípios SOLID - Princípio da Responsabilidade Única (SRP)","slug":"principios-solid-principio-da-responsabilidade-unica-srp-1","link":"#principios-solid-principio-da-responsabilidade-unica-srp-1","children":[]},{"level":2,"title":"Princípio da Responsabilidade Única (SRP)","slug":"principio-da-responsabilidade-unica-srp","link":"#principio-da-responsabilidade-unica-srp","children":[{"level":3,"title":"Alguns Problemas","slug":"alguns-problemas","link":"#alguns-problemas","children":[]},{"level":3,"title":"Exemplos Comuns de Violação","slug":"exemplos-comuns-de-violacao","link":"#exemplos-comuns-de-violacao","children":[]},{"level":3,"title":"Um Exemplo Menos Óbvio","slug":"um-exemplo-menos-obvio","link":"#um-exemplo-menos-obvio","children":[]},{"level":3,"title":"Outro exemplo","slug":"outro-exemplo","link":"#outro-exemplo","children":[]},{"level":3,"title":"Conclusão","slug":"conclusao","link":"#conclusao","children":[]}]},{"level":2,"title":"Referências","slug":"referencias","link":"#referencias","children":[]}],"git":{"createdTime":1721341230000,"updatedTime":1721341230000,"contributors":[{"name":"Leandro Costa","email":"leandro.costa@ifba.edu.br","commits":1}]},"readingTime":{"minutes":3.57,"words":1071},"filePathRelative":"posts/SOLID/03_SOLID_1.md","localizedDate":"21 de março de 2024","autoDesc":true}');export{_ as comp,I as data};
