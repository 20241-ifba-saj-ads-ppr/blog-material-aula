import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as n,o}from"./app-BrOvOMMH.js";const t="/blog-material-aula/assets/diagramaExemploGOF-BlZzEM1U.png",i="/blog-material-aula/assets/estrutura-CM0keMPF.png",p={};function c(l,a){return o(),e("div",null,a[0]||(a[0]=[n('<h1 id="template-method" tabindex="-1"><a class="header-anchor" href="#template-method"><span>Template Method</span></a></h1><hr><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><ul><li>Definir o esqueleto de um algoritmo em uma operação, postergando alguns passos para as subclasses. Template Method permite que subclasses redefinam certos passos de um algoritmo sem mudar a estrutura do mesmo.</li></ul><hr><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como"><span>Também conhecido como</span></a></h2><p>~~</p><hr><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><p>Considere um framework para aplicações que fornece as classes Application e Document. A classe Application é responsável por abrir documentos existentes armazenados num formato externo, tal como um arquivo. Um objeto Document representa a informação num documento, depois que ela foi lida do arquivo. As aplicações construídas com o framework podem criar subclasses de Application e Document para atender necessidades específicas. Por exemplo, uma aplicação de desenho define as subclasses DrawApplication e DrawDocument; uma aplicação de planilha define as subclasses SpreadsheetApplication e SpreadsheetDocument.</p><figure><img src="'+t+'" alt="Estrutura do Exemplo GOF" tabindex="0" loading="lazy"><figcaption>Estrutura do Exemplo GOF</figcaption></figure><p>OpenDocument define cada passo para a abertura de um documento. Ela verifica se o documento pode ser aberto, cria o objeto Document específico para a aplicação, acrescenta-o ao seu conjunto de documentos e lê Document de um arquivo. Chamamos OpenDocument um template method. Um método-template (gabarito, C++ suporta templates) define um algoritmo em termos da operação abstrata que as subclasses redefinem para fornecer um comportamento concreto. As subclasses da aplicação definem os passos do algoritmo que verifica se o documento pode ser aberto (CanOpenDocument) e cria o Document (DoCreateDocument). As classes Document definem a etapa que lê o documento (DoRead). O método template também define uma operação que permite às subclasses de Application saberem quando o documento está para ser aberto (AboutToOpenDocument), no caso de elas terem essa preocupação. Pela definição de alguns dos passos de um algoritmo usando operações abstratas, o método template fixa a sua ordem, mas deixa as subclasses de Application e Document variarem aqueles passos necessários para atender suas necessidades.</p><hr><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade"><span>Aplicabilidade</span></a></h2><p>O padrão Template Method pode ser usado:</p><ul><li>Para implementar as partes invariantes de um algoritmo uma só vez e deixar para as subclasses a implementação do comportamento que pode variar.;</li><li>Quando o comportamento comum entre subclasses deve ser fatorado e concentrado numa classe comum para evitar a duplicação de código. Este é um bom exemplo de “refatorar para generalizar”, conforme descrito por Opdyke e Johnson [OJ93]. Primeiramente, você identifica as diferenças no código existente e então separa as diferenças em novas operações. Por fim, você substitui o código que apresentava as diferenças por um método-template que chama uma dessas novas operações;</li><li>Para controlar extensões de subclasses. Você pode definir um método-template que chama operações “gancho” (ver Conseqüências) em pontos específicos, desta forma permitindo extensões somente nesses pontos</li></ul><hr><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h2><figure><img src="'+i+`" alt="Estrutura" tabindex="0" loading="lazy"><figcaption>Estrutura</figcaption></figure><hr><h4 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h4><ul><li><strong>AbstractClass (<code>Application</code>)</strong><ul><li>define operações primitivas abstratas que as subclasses concretas definem para implementar passos de um algoritmo.</li><li>implementa um método-template que define o esqueleto de um algoritmo. O método-template invoca operações primitivas, bem como operações definidas em AbstractClass ou ainda outros objetos.</li></ul></li><li><strong>ConcreteClass (<code>MyApplication</code>)</strong><ul><li>Implementa as operações primitivas para executarem os passos específicos do algoritmo da subclasse.</li></ul></li></ul><hr><h2 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes"><span>Colaborações</span></a></h2><ul><li>ConcreteClass depende de AbstractClass para implementar os passos invariantes do algoritmo.</li></ul><hr><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Consequências</span></a></h2><ul><li><strong>Vantagens</strong></li></ul><ol><li>Você pode deixar clientes sobrescrever apenas certas partes de um algoritmo grande, tornando-os menos afetados por mudanças que acontece por outras partes do algoritmo.</li><li>Você pode elevar o código duplicado para uma superclasse.</li></ol><ul><li><strong>Desvantagens</strong></li></ul><ol><li>Alguns clientes podem ser limitados ao fornecer o esqueleto de um algoritmo.</li><li>Você pode violar o princípio de substituição de Liskov ao suprimir uma etapa padrão de implementação através da subclasse.</li><li>Implementações do padrão Template Method tendem a ser mais difíceis de se manter quanto mais etapas eles tiverem.</li></ol><hr><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao"><span>Implementação</span></a></h2><p>Três aspectos da implementação são dignos de nota:</p><ol><li><p><strong>Usando o controle de acesso de C++</strong>. Em C++, as operações primitivas que um método template chama podem ser declaradas membros protegidos. Isso assegura que elas são chamadas somente pelo método-template. As operações primitivas que devem ser substituídas são declaradas como virtuais puras. O método-template em si não deveria ser substituído; portanto, você pode tornar o método-template uma função-membro não-virtual.</p></li><li><p><strong>Minimizando operações primitivas</strong>. Um objetivo importante ao projetar métodos templates é minimizar o número de operações primitivas que uma subclasse deve substituir para materializar o algoritmo. Quanto mais operações necessitam ser substituídas, mais tediosas se tornam as coisas para os clientes.</p></li><li><p><strong>Convenções de nomenclatura</strong>. Você pode identificar as operações que deveriam ser substituídas pela adição de um prefixo aos seus nomes. Por exemplo, o framework MacApp para aplicações Macintosh [App89] prefixa os nomes de métodos template com “Do –”: “DoCreateDocument”, “DoRead”, e assim por diante.</p></li></ol><hr><h2 id="meu-exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#meu-exemplo-de-codigo"><span>Meu exemplo de código</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExportarDados</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">conectarBanco</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Lógica para conectar no BD</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buscarDados</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">escreverDados</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">desconectarBanco</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Lógica para desconectar do BD</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token function">exportar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">conectarBanco</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">buscarDados</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">escreverDados</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">desconectarBanco</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExportarTXT</span> <span class="token keyword">extends</span> <span class="token class-name">ExportarDados</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buscarDados</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Lógica para buscar os dados do BD</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">escreverDados</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Lógica para escrever os dados do BD</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExportarJSON</span> <span class="token keyword">extends</span> <span class="token class-name">ExportarDados</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buscarDados</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Lógica para buscar os dados do BD</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">escreverDados</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Lógica para escrever os dados do BD</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">ExportarDados</span> exportarViaTXT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExportarTXT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        exportarViaTXT<span class="token punctuation">.</span><span class="token function">exportar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ExportarDados</span> exportarViaJSON <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExportarJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        exportarViaJSON<span class="token punctuation">.</span><span class="token function">exportar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos"><span>Usos conhecidos</span></a></h2><p>Os métodos-template são tão fundamentais que eles podem ser encontrados em quase todas as classes abstratas.</p><ul><li>Wirfs-Brock e outros [WBWW90,WBJ90] fornecem uma boa visão geral e uma boa discussão de métodos-template.</li></ul><hr><h2 id="padroes-relacionados" tabindex="-1"><a class="header-anchor" href="#padroes-relacionados"><span>Padrões relacionados</span></a></h2><p>[Factory Method]: São freqüentemente chamados por métodos-template. No exemplo da seção Motivação, o método-fábrica DoCreateDocument é chamado pelo método-template OpenDocument.. [Strategy]: Métodos-template usam a herança para variar parte de um algoritmo. Estratégias usam a delegação para variar o algoritmo inteiro.</p><hr><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias"><span>Referências</span></a></h2><p>Gamma Erich - Padrões de Projetos - Soluções Reutilizáveis</p><ul><li>Otávio Miranda - Template Method Teoria - Padrões de Projeto - Parte 39/45 - https://www.youtube.com/watch?v=-nSOKE4f2gA</li><li>Otávio Miranda - Template Method Prática - Padrões de Projeto - Parte 40/45 - https://www.youtube.com/watch?v=Adosr_aCTMI</li><li>Refactoring Guru - https://refactoring.guru/pt-br/design-patterns/template-method</li></ul>`,52)]))}const u=s(p,[["render",c],["__file","README_TEMPLATE-METHOD.html.vue"]]),m=JSON.parse('{"path":"/includes/seminario-2-LuisMiguelADS/README_TEMPLATE-METHOD.html","title":"Template Method","lang":"pt-BR","frontmatter":{"description":"Template Method Intenção Definir o esqueleto de um algoritmo em uma operação, postergando alguns passos para as subclasses. Template Method permite que subclasses redefinam cert...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/includes/seminario-2-LuisMiguelADS/README_TEMPLATE-METHOD.html"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Template Method"}],["meta",{"property":"og:description","content":"Template Method Intenção Definir o esqueleto de um algoritmo em uma operação, postergando alguns passos para as subclasses. Template Method permite que subclasses redefinam cert..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Template Method\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Também conhecido como","slug":"tambem-conhecido-como","link":"#tambem-conhecido-como","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":2,"title":"Aplicabilidade","slug":"aplicabilidade","link":"#aplicabilidade","children":[]},{"level":2,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[]},{"level":2,"title":"Colaborações","slug":"colaboracoes","link":"#colaboracoes","children":[]},{"level":2,"title":"Consequências","slug":"consequencias","link":"#consequencias","children":[]},{"level":2,"title":"Implementação","slug":"implementacao","link":"#implementacao","children":[]},{"level":2,"title":"Meu exemplo de código","slug":"meu-exemplo-de-codigo","link":"#meu-exemplo-de-codigo","children":[]},{"level":2,"title":"Usos conhecidos","slug":"usos-conhecidos","link":"#usos-conhecidos","children":[]},{"level":2,"title":"Padrões relacionados","slug":"padroes-relacionados","link":"#padroes-relacionados","children":[]},{"level":2,"title":"Referências","slug":"referencias","link":"#referencias","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.35,"words":1005},"filePathRelative":"includes/seminario-2-LuisMiguelADS/README_TEMPLATE-METHOD.md","autoDesc":true}');export{u as comp,m as data};
