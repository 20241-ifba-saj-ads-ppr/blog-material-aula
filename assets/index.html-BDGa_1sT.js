import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as e,a as o}from"./app-hyE9Ydhb.js";const i={};function t(c,a){return s(),e("div",null,a[0]||(a[0]=[o(`<h1 id="factory-method-em-java" tabindex="-1"><a class="header-anchor" href="#factory-method-em-java"><span>Factory Method em Java</span></a></h1><p>O padrão de projeto Factory Method é um dos padrões criacionais mais conhecidos. Ele fornece uma interface para criar objetos em uma superclasse, mas permite que as subclasses alterem o tipo de objetos que serão criados. É uma maneira de delegar a responsabilidade de instanciar objetos para as subclasses.</p><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><p>O objetivo do Factory Method é definir uma interface para a criação de objetos, mas permitir que as subclasses decidam qual classe instanciar. Isso promove a flexibilidade e a extensibilidade do código.</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><p>Imagine um sistema de mensagens que precisa enviar diferentes tipos de notificações, como Email, SMS e Push Notification. Cada tipo de notificação tem suas características específicas. O Factory Method permite encapsular o processo de criação de objetos de forma que, ao adicionar novos tipos de notificações, o sistema não precise ser modificado de forma significativa.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade"><span>Aplicabilidade</span></a></h2><p>O Factory Method é aplicável quando:</p><ul><li>Um sistema precisa ser independente das classes dos objetos que cria.</li><li>Um sistema precisa ser configurado para trabalhar com diferentes classes.</li><li>Uma classe deseja delegar a responsabilidade de criação para suas subclasses.</li></ul><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h2><div class="language-plaintext line-numbers-mode" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code>        +--------------------------+
        |         Produto          |
        +--------------------------+
        | + operacaoProduto()      |
        +--------------------------+
                    ^
                    |
                    |
+-------------------+------------------+
|                                      |
|                                      |
|                                      |
|                                      |
|                                      |
v                                      v
+-----------------------+    +------------------------+
|   ProdutoConcretoA    |    |   ProdutoConcretoB     |
+-----------------------+    +------------------------+
| + operacaoProduto()   |    | + operacaoProduto()    |
+-----------------------+    +------------------------+
                    ^
                    |
                    |
                    |
          +---------+-----------------+
          |                           |
+---------+------------------+ +------+--------------------+
|      Criador               | |     CriadorConcreto       |
+----------------------------+ +---------------------------+
| + metodoFabrica(): Produto | | + metodoFabrica(): Produto|
| + outraOperacao()          | +---------------------------+
+----------------------------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="descricao-do-diagrama" tabindex="-1"><a class="header-anchor" href="#descricao-do-diagrama"><span>Descrição do Diagrama</span></a></h3><ol><li><p><strong>Produto (Interface)</strong>: Define a interface para os produtos criados pelo método fábrica. Contém o método <code>operacaoProduto</code>.</p></li><li><p><strong>ProdutoConcretoA e ProdutoConcretoB (Classes Concretas)</strong>: Implementam a interface <code>Produto</code> e fornecem implementações específicas do método <code>operacaoProduto</code>.</p></li><li><p><strong>Criador (Classe Abstrata)</strong>: Declara o método fábrica <code>metodoFabrica</code>, que retorna um objeto do tipo <code>Produto</code>. Pode conter outros métodos que operam sobre produtos, como <code>outraOperacao</code>.</p></li><li><p><strong>CriadorConcreto (Classe Concreta)</strong>: Implementa o método fábrica para retornar uma instância de <code>ProdutoConcretoA</code> ou <code>ProdutoConcretoB</code>.</p></li></ol><h3 id="explicacao" tabindex="-1"><a class="header-anchor" href="#explicacao"><span>Explicação</span></a></h3><ul><li>O diagrama mostra a relação entre a interface <code>Produto</code>, suas implementações concretas e a classe <code>Criador</code>, que é responsável por definir o método fábrica.</li><li>O <code>CriadorConcreto</code> é a classe que efetivamente cria instâncias dos produtos concretos.</li></ul><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h2><ul><li><p><strong>Criador</strong>: Declara o método fábrica, que retorna um objeto do tipo <code>Produto</code>. Pode chamar o método fábrica para criar um <code>Produto</code>.</p></li><li><p><strong>CriadorConcreto</strong>: Implementa o método fábrica para retornar uma instância de <code>ProdutoConcreto</code>.</p></li><li><p><strong>Produto</strong>: Declara a interface dos objetos que o método fábrica cria.</p></li><li><p><strong>ProdutoConcreto</strong>: Implementa a interface do <code>Produto</code>.</p></li></ul><h2 id="exemplo-pratico-sistema-de-notificacoes" tabindex="-1"><a class="header-anchor" href="#exemplo-pratico-sistema-de-notificacoes"><span>Exemplo Prático: Sistema de Notificações</span></a></h2><p>Vamos criar um sistema de notificações que pode enviar mensagens via diferentes canais, como Email, SMS e Push Notification. Usaremos o padrão Factory Method para permitir a criação dinâmica de notificadores específicos.</p><h3 id="estrutura-do-exemplo" tabindex="-1"><a class="header-anchor" href="#estrutura-do-exemplo"><span>Estrutura do Exemplo</span></a></h3><ol><li><strong>Produto</strong>: Interface <code>Notificador</code>.</li><li><strong>ProdutoConcreto</strong>: Implementações <code>EmailNotificador</code>, <code>SMSNotificador</code> e <code>PushNotificador</code>.</li><li><strong>Criador</strong>: Classe abstrata <code>FabricaNotificacao</code>.</li><li><strong>CriadorConcreto</strong>: Implementações <code>FabricaNotificacaoEmail</code>, <code>FabricaNotificacaoSMS</code> e <code>FabricaNotificacaoPush</code>.</li></ol><h3 id="codigo" tabindex="-1"><a class="header-anchor" href="#codigo"><span>Código</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Produto</span>
<span class="token keyword">interface</span> <span class="token class-name">Notificador</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">notificarUsuario</span><span class="token punctuation">(</span><span class="token class-name">String</span> mensagem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ProdutoConcreto</span>
<span class="token keyword">class</span> <span class="token class-name">EmailNotificador</span> <span class="token keyword">implements</span> <span class="token class-name">Notificador</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notificarUsuario</span><span class="token punctuation">(</span><span class="token class-name">String</span> mensagem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enviando Email: &quot;</span> <span class="token operator">+</span> mensagem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">SMSNotificador</span> <span class="token keyword">implements</span> <span class="token class-name">Notificador</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notificarUsuario</span><span class="token punctuation">(</span><span class="token class-name">String</span> mensagem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enviando SMS: &quot;</span> <span class="token operator">+</span> mensagem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PushNotificador</span> <span class="token keyword">implements</span> <span class="token class-name">Notificador</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notificarUsuario</span><span class="token punctuation">(</span><span class="token class-name">String</span> mensagem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enviando Notificação Push: &quot;</span> <span class="token operator">+</span> mensagem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Criador</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FabricaNotificacao</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enviarNotificacao</span><span class="token punctuation">(</span><span class="token class-name">String</span> mensagem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Cria um notificador específico</span>
        <span class="token class-name">Notificador</span> notificador <span class="token operator">=</span> <span class="token function">criarNotificador</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        notificador<span class="token punctuation">.</span><span class="token function">notificarUsuario</span><span class="token punctuation">(</span>mensagem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Método fábrica</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">Notificador</span> <span class="token function">criarNotificador</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// CriadorConcreto</span>
<span class="token keyword">class</span> <span class="token class-name">FabricaNotificacaoEmail</span> <span class="token keyword">extends</span> <span class="token class-name">FabricaNotificacao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Notificador</span> <span class="token function">criarNotificador</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EmailNotificador</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">FabricaNotificacaoSMS</span> <span class="token keyword">extends</span> <span class="token class-name">FabricaNotificacao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Notificador</span> <span class="token function">criarNotificador</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SMSNotificador</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">FabricaNotificacaoPush</span> <span class="token keyword">extends</span> <span class="token class-name">FabricaNotificacao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Notificador</span> <span class="token function">criarNotificador</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PushNotificador</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Uso do padrão</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExemploMetodoFabrica</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FabricaNotificacao</span> fabricaEmail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FabricaNotificacaoEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fabricaEmail<span class="token punctuation">.</span><span class="token function">enviarNotificacao</span><span class="token punctuation">(</span><span class="token string">&quot;Este é um alerta por email.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">FabricaNotificacao</span> fabricaSMS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FabricaNotificacaoSMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fabricaSMS<span class="token punctuation">.</span><span class="token function">enviarNotificacao</span><span class="token punctuation">(</span><span class="token string">&quot;Este é um alerta por SMS.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">FabricaNotificacao</span> fabricaPush <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FabricaNotificacaoPush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fabricaPush<span class="token punctuation">.</span><span class="token function">enviarNotificacao</span><span class="token punctuation">(</span><span class="token string">&quot;Este é um alerta por Push Notification.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="explicacao-1" tabindex="-1"><a class="header-anchor" href="#explicacao-1"><span>Explicação</span></a></h3><ol><li><p><strong>Interface Notificador</strong>: Define o método <code>notificarUsuario</code>, que é implementado por todos os tipos de notificadores.</p></li><li><p><strong>EmailNotificador, SMSNotificador e PushNotificador</strong>: Implementações específicas que enviam notificações através de canais diferentes.</p></li><li><p><strong>FabricaNotificacao</strong>: Classe abstrata que contém o método <code>enviarNotificacao</code>, que utiliza o método fábrica <code>criarNotificador</code> para obter uma instância do <code>Notificador</code>.</p></li><li><p><strong>FabricaNotificacaoEmail, FabricaNotificacaoSMS e FabricaNotificacaoPush</strong>: Fornecem implementações específicas do método fábrica para criar os tipos corretos de notificadores.</p></li></ol><h2 id="exemplo-pratico-sistema-de-transporte" tabindex="-1"><a class="header-anchor" href="#exemplo-pratico-sistema-de-transporte"><span>Exemplo Prático: Sistema de Transporte</span></a></h2><p>Vamos criar um sistema de transporte que gera diferentes tipos de veículos, como Carro, Bicicleta e Motocicleta. Utilizaremos o Factory Method para criar veículos específicos.</p><h3 id="estrutura-do-exemplo-1" tabindex="-1"><a class="header-anchor" href="#estrutura-do-exemplo-1"><span>Estrutura do Exemplo</span></a></h3><ol><li><strong>Produto</strong>: Interface <code>Veiculo</code>.</li><li><strong>ProdutoConcreto</strong>: Implementações <code>Carro</code>, <code>Bicicleta</code> e <code>Motocicleta</code>.</li><li><strong>Criador</strong>: Classe abstrata <code>FabricaVeiculo</code>.</li><li><strong>CriadorConcreto</strong>: Implementações <code>FabricaCarro</code>, <code>FabricaBicicleta</code> e <code>FabricaMotocicleta</code>.</li></ol><h3 id="codigo-1" tabindex="-1"><a class="header-anchor" href="#codigo-1"><span>Código</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Produto</span>
<span class="token keyword">interface</span> <span class="token class-name">Veiculo</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">ligar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ProdutoConcreto</span>
<span class="token keyword">class</span> <span class="token class-name">Carro</span> <span class="token keyword">implements</span> <span class="token class-name">Veiculo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ligar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Carro ligado.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Bicicleta</span> <span class="token keyword">implements</span> <span class="token class-name">Veiculo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ligar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Bicicleta pronta para pedalar.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Motocicleta</span> <span class="token keyword">implements</span> <span class="token class-name">Veiculo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ligar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Motocicleta ligada.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Criador</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FabricaVeiculo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">usarVeiculo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Cria um veículo específico</span>
        <span class="token class-name">Veiculo</span> veiculo <span class="token operator">=</span> <span class="token function">criarVeiculo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        veiculo<span class="token punctuation">.</span><span class="token function">ligar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Método fábrica</span>
    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">Veiculo</span> <span class="token function">criarVeiculo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// CriadorConcreto</span>
<span class="token keyword">class</span> <span class="token class-name">FabricaCarro</span> <span class="token keyword">extends</span> <span class="token class-name">FabricaVeiculo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Veiculo</span> <span class="token function">criarVeiculo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Carro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">FabricaBicicleta</span> <span class="token keyword">extends</span> <span class="token class-name">FabricaVeiculo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Veiculo</span> <span class="token function">criarVeiculo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bicicleta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">FabricaMotocicleta</span> <span class="token keyword">extends</span> <span class="token class-name">FabricaVeiculo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Veiculo</span> <span class="token function">criarVeiculo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Motocicleta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Uso do padrão</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExemploMetodoFabrica2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FabricaVeiculo</span> fabricaCarro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FabricaCarro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fabricaCarro<span class="token punctuation">.</span><span class="token function">usarVeiculo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">FabricaVeiculo</span> fabricaBicicleta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FabricaBicicleta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fabricaBicicleta<span class="token punctuation">.</span><span class="token function">usarVeiculo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">FabricaVeiculo</span> fabricaMotocicleta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FabricaMotocicleta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fabricaMotocicleta<span class="token punctuation">.</span><span class="token function">usarVeiculo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="explicacao-2" tabindex="-1"><a class="header-anchor" href="#explicacao-2"><span>Explicação</span></a></h3><ol><li><p><strong>Interface Veiculo</strong>: Define o método <code>ligar</code>, que é implementado por todos os tipos de veículos.</p></li><li><p><strong>Carro, Bicicleta e Motocicleta</strong>: Implementações específicas que representam diferentes tipos de veículos.</p></li><li><p><strong>FabricaVeiculo</strong>: Classe abstrata que contém o método <code>usarVeiculo</code>, que utiliza o método fábrica <code>criarVeiculo</code> para obter uma instância do <code>Veiculo</code>.</p></li><li><p><strong>FabricaCarro, FabricaBicicleta e FabricaMotocicleta</strong>: Fornecem implementações específicas do método fábrica para criar os tipos corretos de veículos.</p></li></ol><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Consequências</span></a></h2><ul><li><p><strong>Vantagens</strong>:</p><ul><li>Facilita a adição de novos produtos.</li><li>Promove o encapsulamento do código de criação.</li><li>Ajuda a seguir o princípio da responsabilidade única e o princípio aberto/fechado.</li></ul></li><li><p><strong>Desvantagens</strong>:</p><ul><li>Pode levar a um aumento na complexidade do código devido à introdução de várias subclasses.</li></ul></li></ul><h2 id="exemplos-de-uso-conhecidos" tabindex="-1"><a class="header-anchor" href="#exemplos-de-uso-conhecidos"><span>Exemplos de Uso Conhecidos</span></a></h2><p>O padrão Factory Method é amplamente utilizado em frameworks como o Spring, para injeção de dependências, e em bibliotecas de persistência de dados, onde diferentes tipos de conexões de banco de dados podem ser</p><p>configurados dinamicamente.</p><p>Esse padrão oferece uma maneira poderosa de encapsular a lógica de criação de objetos, promovendo a flexibilidade e extensibilidade do sistema.</p>`,39)]))}const r=n(i,[["render",t],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/includes/seminario-1-zevictoros/","title":"Factory Method em Java","lang":"pt-BR","frontmatter":{"description":"Factory Method em Java O padrão de projeto Factory Method é um dos padrões criacionais mais conhecidos. Ele fornece uma interface para criar objetos em uma superclasse, mas perm...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/includes/seminario-1-zevictoros/"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Factory Method em Java"}],["meta",{"property":"og:description","content":"Factory Method em Java O padrão de projeto Factory Method é um dos padrões criacionais mais conhecidos. Ele fornece uma interface para criar objetos em uma superclasse, mas perm..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Factory Method em Java\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":2,"title":"Aplicabilidade","slug":"aplicabilidade","link":"#aplicabilidade","children":[]},{"level":2,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[{"level":3,"title":"Descrição do Diagrama","slug":"descricao-do-diagrama","link":"#descricao-do-diagrama","children":[]},{"level":3,"title":"Explicação","slug":"explicacao","link":"#explicacao","children":[]}]},{"level":2,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":2,"title":"Exemplo Prático: Sistema de Notificações","slug":"exemplo-pratico-sistema-de-notificacoes","link":"#exemplo-pratico-sistema-de-notificacoes","children":[{"level":3,"title":"Estrutura do Exemplo","slug":"estrutura-do-exemplo","link":"#estrutura-do-exemplo","children":[]},{"level":3,"title":"Código","slug":"codigo","link":"#codigo","children":[]},{"level":3,"title":"Explicação","slug":"explicacao-1","link":"#explicacao-1","children":[]}]},{"level":2,"title":"Exemplo Prático: Sistema de Transporte","slug":"exemplo-pratico-sistema-de-transporte","link":"#exemplo-pratico-sistema-de-transporte","children":[{"level":3,"title":"Estrutura do Exemplo","slug":"estrutura-do-exemplo-1","link":"#estrutura-do-exemplo-1","children":[]},{"level":3,"title":"Código","slug":"codigo-1","link":"#codigo-1","children":[]},{"level":3,"title":"Explicação","slug":"explicacao-2","link":"#explicacao-2","children":[]}]},{"level":2,"title":"Consequências","slug":"consequencias","link":"#consequencias","children":[]},{"level":2,"title":"Exemplos de Uso Conhecidos","slug":"exemplos-de-uso-conhecidos","link":"#exemplos-de-uso-conhecidos","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.47,"words":1041},"filePathRelative":"includes/seminario-1-zevictoros/README.md","autoDesc":true}');export{r as comp,d as data};
