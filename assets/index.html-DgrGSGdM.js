import{_ as o}from"./EstruturaSingleton-PB5fxm8k.js";import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as i,c as t,a as r,e as c}from"./app-hyE9Ydhb.js";const l={};function d(p,a){const e=s("Mermaid");return i(),t("div",null,[a[0]||(a[0]=r('<h1 id="singleton-criacao-de-objetos" tabindex="-1"><a class="header-anchor" href="#singleton-criacao-de-objetos"><span>Singleton: Criação de Objetos</span></a></h1><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><p>Garantir que uma classe tenha somente uma instância e fornecer um ponto global de acesso para a mesma.</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como"><span>Também conhecido como</span></a></h2><p>Unique instance</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><p>É importante para algumas classes ter uma, e apenas uma, instância. Por exemplo, embora possam existir muitas impressoras em um sistema, deveria haver somente um spooler de impressoras. Da mesma forma, deveria haver somente um sistema de arquivos e um gerenciador de janelas. Um filtro digital terá somente um conversor A/D. Um sistema de contabilidade será dedicado a servir somente a uma companhia.</p><p>Como garantimos que uma classe tenha somente uma instância e que essa instância seja facilmente acessível? Uma variável global torna um objeto acessível, mas não impede você de instanciar múltiplos objetos.</p><p>Uma solução melhor seria tornar a própria classe responsável por manter o controle da sua única instância. A classe pode garantir que nenhuma outra instância seja criada (pela interceptação das solicitações para criação de novos objetos), bem como pode fornecer um meio para acessar sua única instância. Este é o padrão Singleton.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade"><span>Aplicabilidade</span></a></h2><p>Use o padrão Singleton quando:</p><ul><li>For preciso haver apenas uma instância de uma classe, e essa instância tiver que dar acesso aos clientes através de um ponto bem conhecido.</li><li>A única instância tiver de ser extensível através de subclasses, possibilitando aos clientes usar uma instância estendida sem alterar o seu código.</li></ul><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h2><figure><img src="'+o+`" alt="Estrutura Singleton" tabindex="0" loading="lazy"><figcaption>Estrutura Singleton</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h2><ul><li><strong>Singleton</strong><ul><li>Define uma operação <code>Instance</code> que permite aos clientes acessarem sua única instância. <code>Instance</code> é uma operação de classe (ou seja, em Smalltalk é um método de classe e em C++ é uma função-membro estática).</li><li>Pode ser responsável pela criação da sua própria instância única.</li></ul></li></ul><h2 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes"><span>Colaborações</span></a></h2><ul><li>Os clientes acessam uma instância <code>Singleton</code> unicamente pela operação <code>Instance</code> do Singleton.</li></ul><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Consequências</span></a></h2><p>O padrão Singleton apresenta vários benefícios:</p><ol><li><strong>Acesso controlado à instância única:</strong> Como a classe Singleton encapsula a sua única instância, possui controle total sobre como e quando os clientes a acessam.</li><li><strong>Espaço de nomes reduzido:</strong> O padrão Singleton representa uma melhoria em relação ao uso de variáveis globais. Ele evita a poluição do espaço de nomes com variáveis globais que armazenam instâncias únicas.</li><li><strong>Permite um refinamento de operações e da representação:</strong> A classe Singleton pode ter subclasses e é fácil configurar uma aplicação com uma instância dessa classe estendida. Você pode configurar a aplicação com uma instância da classe de que necessita em tempo de execução.</li><li><strong>Permite um número variável de instâncias:</strong> O padrão torna fácil mudar de ideia, permitindo mais de uma instância da classe Singleton. Além disso, você pode usar a mesma abordagem para controlar o número de instâncias que a aplicação utiliza. Somente a operação que permite acesso à instância de Singleton necessita ser mudada.</li><li><strong>Mais flexível do que operações de classe:</strong> Uma outra maneira de empacotar a funcionalidade de um singleton é usando operações de classe (ou seja, funções-membro estáticas em C++ ou métodos de classe em Smalltalk). Porém, as técnicas de ambas as linguagens tornam difícil mudar um projeto para permitir mais de uma instância de uma classe. Além disso, as funções-membro estáticas em C++ nunca são virtuais, o que significa que as subclasses não podem redefini-las polimorficamente.</li></ol><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao"><span>Implementação</span></a></h2><p>A seguir apresentamos tópicos de implementação a serem considerados ao usar o padrão Singleton:</p><ol><li><p><strong>Garantindo uma única instância:</strong> O padrão Singleton torna a instância única uma instância normal de uma classe, mas essa classe é escrita de maneira que somente uma instância possa ser criada.</p><p>Uma forma comum de fazer isso é ocultando a operação que cria a instância usando uma operação de classe (isto é, ou uma função-membro estática ou um método de classe) que garanta que apenas uma única instância seja criada. Esta operação tem acesso à variável que mantém a única instância e garante que a variável seja iniciada com a instância única antes de retornar ao seu valor. Esta abordagem assegura que um singleton seja criado e iniciado antes da sua primeira utilização.</p><p>Em C++, você pode definir a operação de classe com uma função-membro estática <code>Instance</code> da classe <code>Singleton</code>. <code>Singleton</code> também define uma variável-membro estática <code>_instance</code> que contém um apontador para sua única instância.</p><p>A classe <code>Singleton</code> é declarada como:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> <span class="token function">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> _instance<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>A implementação correspondente é a seguinte \`\`\`cpp Singleton* Singleton::_instance = 0;</p><pre><code>  Singleton* Singleton::Instance () {
      if(_instance == 0) {
          _instance = new Singleton;
      }
      return _instance;
  }
</code></pre><p>Os clientes acessam o singleton através da função membro <code>Instance</code>. A variável <code>_instance</code> é iniciada com <code>0</code>, e a função-membro estática <code>Instance</code> retorna o seu valor, iniciando-a com a única instância se ele for <code>0</code>. <code>Instance</code> usa lazy initialization; o valor que ela retorna não é criado e armazenado até ser acessado pela primeira vez.</p><p>Note que o construtor é protegido. Um cliente que tenta instanciar <code>Singleton</code> diretamente obterá como resposta um erro em tempo de compilação. Isto assegura que somente uma instância possa ser criada.</p><p>Além do mais, uma vez que <code>_instance</code> é um apontador para um objeto <code>Singleton</code>, a função-membro <code>Instance</code> pode atribuir um apontador para uma subclasse de <code>Singleton</code> para esta variável. Daremos um exemplo do que dissemos aqui na seção &quot;Exemplo de código&quot;.</p><p>Há uma outra coisa a ser observada sobre a implementação em C++. Não é suficiente definir o singleton como um objeto global ou estático, confiando numa inicialização automática. Existem três razões para isto:</p><p><strong>(a)</strong> Não podemos garantir que somente uma instância de um objeto estático será declarada.</p><p><strong>(b)</strong> Talvez não tenhamos informação suficiente para instanciar cada singleton em tempo de inicialização estática. Um singleton pode necessitar de valores que são computados mais tarde, durante a execução do programa.</p><p><strong>(c)</strong> C++ não define a ordem pela qual os construtores para objetos globais são chamados entre unidades de compilação [ES90]. Isso significa que não podem existir dependências entre singletons; se alguma existir, então é inevitável a ocorrência de erro.</p><h2 id="exemplos-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplos-de-codigo"><span>EXEMPLOS DE CÓDIGO</span></a></h2><h3 id="design-patterns-com-java-projeto-orientado-a-objetos-guiado-por-padroes-casa-do-codigo" tabindex="-1"><a class="header-anchor" href="#design-patterns-com-java-projeto-orientado-a-objetos-guiado-por-padroes-casa-do-codigo"><span>Design Patterns com Java - Projeto orientado a objetos guiado por padroes - Casa do Codigo</span></a></h3><p>public class Configuracao { private static Configuracao instancia;</p><pre><code>    public static Configuracao getInstancia() {
        if (instancia == null) {
            instancia = new Configuracao();
        }
        return instancia;
    }

    // Construtor privado!
    private Configuracao() {
        // lê as configurações
    }

    // Outros métodos e atributos
}
</code></pre><h3 id="meu-exemplo" tabindex="-1"><a class="header-anchor" href="#meu-exemplo"><span>Meu exemplo</span></a></h3><pre><code>public class Configuracao {
  private static Configuracao instancia;
  private String urlBancoDeDados;
  private String usuario;
  private String senha;

  private Configuracao() {
      this.urlBancoDeDados = &quot;jdbc:mysql://localhost:3306/meuBanco&quot;;
      this.usuario = &quot;admin&quot;;
      this.senha = &quot;senha123&quot;;
  }

  public static Configuracao getInstancia() {
      if (instancia == null) {
          instancia = new Configuracao();
      }
      return instancia;
  }

  public String getUrlBancoDeDados() {
      return urlBancoDeDados;
  }

  public String getUsuario() {
      return usuario;
  }

  public String getSenha() {
      return senha;
  }

  public void exibirConfiguracoes() {
      System.out.println(&quot;URL do Banco de Dados: &quot; + urlBancoDeDados);
      System.out.println(&quot;Usuário: &quot; + usuario);
      System.out.println(&quot;Senha: &quot; + senha);
  }
}

public static void main(String[] args) {
      Configuracao config = Configuracao.getInstancia();
      config.exibirConfiguracoes();
      Configuracao outraConfig = Configuracao.getInstancia();
      System.out.println(&quot;São as mesmas instâncias? &quot; + (config == outraConfig));
}
</code></pre>`,39)),c(e,{id:"mermaid-178",code:"eJx1kEEOgjAQRfecoksN4QIulY1r4gHGUusk2CZtMSbGu1tQoFOG2TSZ9zP9ebID72sE7eBRiDjjQpysuaHuHUiw4j2CYSrhAwSUlKOJWyMRklwTHBotetcdI7K1qqG1ngn4HhzaNfDK3NOD6Y+7/QxKtpFW4TyVIuH/8cgvtNlW6ldvgzZDR8KeFluhXnhFtxSyajr/KcaHdD2IigrMKedwlUk05mwxmZGS0cREeFNckMhiAqmvHG9LK77AzM3d"})])}const h=n(l,[["render",d],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/includes/seminario-1-GuiSamp/","title":"Singleton: Criação de Objetos","lang":"pt-BR","frontmatter":{"description":"Singleton: Criação de Objetos Intenção Garantir que uma classe tenha somente uma instância e fornecer um ponto global de acesso para a mesma. Também conhecido como Unique instan...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/includes/seminario-1-GuiSamp/"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Singleton: Criação de Objetos"}],["meta",{"property":"og:description","content":"Singleton: Criação de Objetos Intenção Garantir que uma classe tenha somente uma instância e fornecer um ponto global de acesso para a mesma. Também conhecido como Unique instan..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Singleton: Criação de Objetos\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Também conhecido como","slug":"tambem-conhecido-como","link":"#tambem-conhecido-como","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":2,"title":"Aplicabilidade","slug":"aplicabilidade","link":"#aplicabilidade","children":[]},{"level":2,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[]},{"level":2,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":2,"title":"Colaborações","slug":"colaboracoes","link":"#colaboracoes","children":[]},{"level":2,"title":"Consequências","slug":"consequencias","link":"#consequencias","children":[]},{"level":2,"title":"Implementação","slug":"implementacao","link":"#implementacao","children":[]},{"level":2,"title":"EXEMPLOS DE CÓDIGO","slug":"exemplos-de-codigo","link":"#exemplos-de-codigo","children":[{"level":3,"title":"Design Patterns com Java - Projeto orientado a objetos guiado por padroes - Casa do Codigo","slug":"design-patterns-com-java-projeto-orientado-a-objetos-guiado-por-padroes-casa-do-codigo","link":"#design-patterns-com-java-projeto-orientado-a-objetos-guiado-por-padroes-casa-do-codigo","children":[]},{"level":3,"title":"Meu exemplo","slug":"meu-exemplo","link":"#meu-exemplo","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.93,"words":1178},"filePathRelative":"includes/seminario-1-GuiSamp/README.md","autoDesc":true}');export{h as comp,b as data};
