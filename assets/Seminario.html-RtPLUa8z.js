import{_ as i,a as s}from"./EstruturaLivro-2Z9ANaQi.js";import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as t,c as d,a,e as l}from"./app-Cgf46vm0.js";const c={};function m(p,e){const o=n("Mermaid");return t(),d("div",null,[e[0]||(e[0]=a('<h1 id="seminario-prototype-method-pedro-carlos" tabindex="-1"><a class="header-anchor" href="#seminario-prototype-method-pedro-carlos"><span>Seminário Prototype Method - Pedro Carlos</span></a></h1><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><p>Especificar os tipos de objetos a serem criados usando uma instância-protótipo e criar novos objetos pela cópia desse protótipo.</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><p>Você poderia construir um editor para partituras musicais customizando um framework geral para editores gráficos, acrescentando novos objetos que representam notas, pausas e pentagramas. O editor do framework pode ter uma paleta de ferramentas para acrescentar esses objetos de música à partitura. A paleta também incluiria ferramentas para selecionar, mover e manipular objetos de música de outra forma. O usuário clicaria na ferramenta de uma semínima para adicionar semínimas à partitura. Ou poderia usar a ferramenta de movimentação para mover uma nota para cima ou para baixo nas linhas de pauta, desta forma alterando seu registro sonoro.</p><p>Vamos considerar que o framework forneça uma classe abstrata Graphic para componentes gráficos, como notas e pentagramas. Além disso, fornece uma classe abstrata Tool para definir ferramentas como aquelas da paleta. O framework também predefine uma subclasse GraphicTool para ferramentas que criam instâncias de objetos gráficos e os adicionam ao documento.</p><p>Mas GraphicTool apresenta um problema para o projetista do framework. As classes para notas e pentagramas são específicas da nossa aplicação, mas a classe GraphicTool pertence ao framework. GraphicTool não sabe como criar instâncias das nossas classes musicais para acrescentá-las à partitura. Poderíamos introduzir subclasses de GraphicTool para cada tipo de objeto musical, mas isso produziria muitas subclasses diferentes somente no tipo de objeto musical que elas instanciam. Sabemos que composição de objetos é uma alternativa flexível para o uso de subclasses. A questão, porém, é, como pode um framework usá-la para parametrizar instâncias de GraphicTool pela Classe de Graphic que se espera que elas criem?</p><p>A solução é fazer GraphicTool criar um novo Graphic copiando ou “clonando” uma instância de uma subclasse de Graphic. Chamamos esta instância de protótipo (prototype). A GraphicTool é parametrizada pelo protótipo que ela deveria clonar e acrescentar ao documento. Se todas as subclasses de Graphic suportam uma operação Clone, então GraphicTool pode clonar qualquer tipo de Graphic.</p><p>Assim, em nosso editor musical, cada ferramenta para criar um objeto musical é uma instância de GraphicTool que é iniciada com um protótipo diferente. Cada instância de GraphicTool produzirá um objeto musical clonando o seu protótipo e acrescentando o clone à partitura.</p><figure><img src="'+i+'" alt="Diagrama do Livro" tabindex="0" loading="lazy"><figcaption>Diagrama do Livro</figcaption></figure><p>Podemos usar o padrão Prototype para reduzir o número de classes ainda mais. Temos classes separadas para breves e semibreves, mas isto é provavelmente desnecessário. Ao invés disso, poderiam ser instâncias da mesma classe iniciada com diferentes bitmaps e durações. Uma ferramenta para criação de notas do tipo breve torna-se somente uma GraphicTool cujo protótipo é uma MusicalNote iniciada como uma breve. Isso pode reduzir o número de classes no sistema dramaticamente. Isso também torna mais fácil acrescentar um novo tipo de nota ao editor musical.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade"><span>Aplicabilidade</span></a></h2><p>Use o padrão Prototype quando um sistema tiver que ser independente de como os seus produtos são criados, compostos e representados; e</p><ul><li>quando as classes a instanciar forem especificadas em tempo de execução, por exemplo, por carga dinâmica; ou</li><li>para evitar a construção de uma hierarquia de classes de fábricas paralela à hierarquia de classes de produto; ou</li><li>quando as instâncias de uma classe puderem ter uma dentre poucas combinações diferentes de estados. Pode ser mais conveniente instalar um número correspondente de protótipos e cloná-los, ao invés de instanciar a classe manualmente, cada vez com um estado apropriado.</li></ul><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h2><figure><img src="'+s+'" alt="Diagrama de Estrutura do Livro" tabindex="0" loading="lazy"><figcaption>Diagrama de Estrutura do Livro</figcaption></figure>',16)),l(o,{id:"mermaid-62",code:"eJyFjkEKwjAQRfc5RZaKzAVEBKldK3iCIEMZSDJxMhFFvbs2UNriorN8//HnA4BRUo9b2z4wJM+2zSpFizjTh1fvcj6S68QFY39XgT0LK+szoX1V2t+m8Rxxta7gM5EPcit054kKFxWKnY0c8A8qJV4ubTxh1Nn/U0JxMnPHnbs3wLCkRkMBwH7UzBeGlUxn"}),e[1]||(e[1]=a(`<h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h2><ul><li>Prototype (Graphic) <ul><li>declara uma interface para clonar a si próprio.</li></ul></li><li>ConcretePrototype (Staff, Whole Nota, Half Note) <ul><li>implementa uma operação para clonar a si próprio.</li></ul></li><li>Client (GraphicTool) <ul><li>cria um novo objeto solicitando a um protótipo que clone a si próprio</li></ul></li></ul><h2 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes"><span>Colaborações</span></a></h2><ul><li>Um cliente solicita a um protótipo que este clone a si próprio.</li></ul><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Conseqüências</span></a></h2><p>Prototype tem muitas das mesmas conseqüências que Abstract Factory e Builder têm: ele oculta as classes de produtos concretas do cliente, desta forma reduzindo o número de nomes que os clientes necessitam saber. Além disso, esses padrões permitem a um cliente trabalhar com classes específicas de uma aplicação sem necessidade de modificação.</p><p>Os benefícios adicionais do padrão Prototype estão relacionados abaixo.</p><ol><li><p>Acrescenta e remove produtos em tempo de execução. Prototype permite incorporar uma nova classe concreta de produto a um sistema, simplesmente registrando uma instância protótipo com o cliente. Isso é um pouco mais flexível do que outros padrões de criação, porque o cliente pode instalar e remover protótipos em tempo de execução.</p></li><li><p>Especifica novos objetos pela variação de valores. Sistemas altamente dinâmicos permitem definir novos comportamentos através da composição de objetos</p></li></ol><p>– por exemplo, pela especificação de valores para as variáveis de um objeto</p><p>– e não pela definição de novas classes.</p><p>Você efetivamente define novos tipos de objetos pela instanciação das classes existentes e registrando as instâncias como protótipos dos objetos-clientes. Um cliente pode exibir um novo comportamento através da delegação de responsabilidades para o protótipo.</p><p>Esse tipo de projeto permite aos usuários definir novas “classes” sem ter que programar. De fato, clonar um protótipo é semelhante a instanciar uma classe. O padrão Prototype pode reduzir grandemente o número de classes que um sistema necessita. No nosso editor musical, uma classe GraphicTool pode criar uma variedade ilimitada de objetos musicais.</p><ol start="3"><li>Especifica novos objetos pela variação da estrutura. Muitas aplicações constróem objetos com partes e subpartes. Por exemplo, editores para o projeto de circuitos que constroem circuitos a partir de subcircuitos.1 Por questões de conveniência, tais aplicações freqüentemente permitem instanciar estruturas complexas, definidas pelo usuário, para, por exemplo, usar um subcircuito específico repetidas vezes.</li></ol><p>O padrão Prototype também suporta isso. Simplesmente adicionamos esse subcircuito como um protótipo à paleta dos elementos de circuitos disponíveis. Contanto que o objeto-circuito composto implemente um clone por replicação (deep copy), circuitos com diferentes estruturas podem ser protótipos.</p><ol start="4"><li><p>Reduz o número de subclasses. O Factory Method freqüentemente produz uma hierarquia de classes Creator paralela à hierarquia de classes do produto. O padrão Prototype permite clonar um protótipo em vez de pedir a um método fábrica para construir um novo objeto. Daí não necessitar-se de nenhuma hierarquia de classes Creator. Esse benefício se aplica primariamente a linguagens como C++, que não tratam as classes como objetos de primeira classe. As linguagens que assim o fazem, como Smalltalk e Objective C, obtêm menos benefícios, uma vez que sempre se usa um objeto-classe como um criador. Objetos-classe já funcionam como protótipos nessas linguagens.</p></li><li><p>Configura dinamicamente uma aplicação com classes. Alguns ambientes de tempo de execução permitem carregar classes dinamicamente numa aplicação. O padrão Prototype é a chave para a exploração de tais possibilidades numa linguagem como C++.</p></li></ol><p>Uma aplicação que quer criar instâncias de uma classe dinamicamente carregada não será capaz de referenciar o seu constructor estaticamente. Em vez disso, o ambiente de tempo de execução cria uma instância de cada classe automaticamente, quando carregada, e registra a instância junto a um gerenciador de protótipo (ver a seção Implementação). Então, a aplicação pode solicitar ao gerenciador de protótipos instâncias de classes recémcarregadas, classes essas que originalmente não estavam “linkadas” ao programa. O framework de aplicações da ET++ [WGM88] tem um sistema de tempo de execução que usa este esquema.</p><p>O principal ponto fraco do padrão Prototype é que cada subclasse de Prototype deve implementar a operação Clone, o que pode ser difícil. Por exemplo, acrescentar Clone é difícil quando as classes consideradas já existem. A implementação de Clone pode ser complicada quando uma estrutura interna dessas classes inclui objetos que não suportam operação de cópia ou têm referências circulares.</p><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao"><span>Implementação</span></a></h2><p>Prototype é particularmente útil com linguagens estáticas como C++, na qual as classes não são objetos, e pouca ou nenhuma informação sobre tipos está disponível em tempo de execução. Ele é menos importante em linguagens como Smalltalk ou Objective C, que fornecem o equivalente a um protótipo (ou seja, um objeto-classe) para criação de instâncias de cada classe. Este padrão está incorporado em linguagens baseadas em protótipos como a Self [US87], na qual toda a criação de objetos se dá pela clonagem de um protótipo.</p><p>Ao implementar protótipos levam-se em consideração os seguintes aspectos:</p><ol><li>Usar um gerenciador de protótipos. Quando o número de protótipos num sistema não é fixo (ou seja, eles podem ser criados e destruídos dinamicamente), é importante manter um sistema de registro dos protótipos disponíveis. Os clientes não vão gerenciar os protótipos, mas farão sua armazenagem e recuperação pelo sistema de registro. Um cliente solicitará um protótipo ao sistema de registro antes de cloná-lo. Nós chamamos esse sistema de registro de gerenciador de protótipos.</li></ol><p>Um gerenciador de protótipos é uma memória associativa que retorna o protótipo correspondente a uma chave fornecida. Ele tem operações para registrar um protótipo com uma chave e para removê-lo do registro. Os clientes podem mudar ou mesmo pesquisar o registro em tempo de execução. Isso permite aos clientes estenderem e fazerem um inventário do sistema sem necessidade de escrever linhas de código.</p><ol start="2"><li>Implementar a operação Clone. A parte mais difícil do padrão Prototype é a implementação correta da operação Clone. Ela é particularmente difícil quando as estruturas de objetos contêm referências circulares. A maioria das linguagens fornece algum suporte para clonagem de objetos. Por exemplo, Smalltalk fornece uma implementação de copy que é herdada por todas as subclasses de Object. C++ fornece um constructor copy. Mas estes recursos não resolvem o problema shallow copy versus deep copy (cópia por referência versus cópia por replicação) [GR83]. Ou seja, clonar objetos significa clonar suas variáveis de instância, ou o clone e o original simplesmente compartilham as variáveis?</li></ol><p>Uma shallow copy é simples e, na maior parte das vezes, suficiente, e é o que o Smalltalk fornece por omissão. O constructor de cópias por omissão em C++ faz uma cópia membro a membro, o que significa que os apontadores serão compartilhados entre a cópia e o original. Porém, clonar protótipos com estruturas complexas normalmente exige uma cópia por replicação (deep copy), porque o clone e o original devem ser independentes. Portanto, você deve garantir que os componentes do clone são clones dos componentes do protótipo. A clonagem força a decidir o que, se for o caso, será compartilhado. Se os objetos no sistema fornecem operações de Salvar e Carregar, então você pode usá-las para fornecer uma implementação por omissão de Clone simplesmente salvando o objeto e carregando-o de volta imediatamente. A operação Salvar salva o objeto num buffer de memória, e a operação Carregar cria uma cópia por reconstrução do objeto a partir do buffer.</p><ol start="3"><li>Iniciar clones. Enquanto alguns clientes ficam perfeitamente contentes com o clone tal como ele é, outros desejarão iniciar alguns ou todos os seus estados internos com valores de sua escolha.</li></ol><p>Você geralmente não pode passar esses valores para operação Clone porque o seu número variará entre as classes de protótipo. Alguns protótipos podem necessitar de múltiplos parâmetros de inicialização; outros não necessitarão de nenhum. Passar parâmetros para a operação Clone impede uma interface uniforme de clonagem.</p><p>Pode ser que suas classes-protótipo já definam operações para (re)estabelecer estados-chave. Caso isso aconteça, os clientes podem usar essas operações imediatamente após a clonagem. Se isso não acontecer, então você pode ter que introduzir uma operação Initialize(ver a seção de Exemplo de Código) que recebe parâmetros de inicialização como argumentos e estabelece o estado interno do clone de acordo. Cuidado com as operações clone que usam replicação (deep copying) – as cópias podem ter que ser deletadas (ou explicitamente, ou dentro de Initialize) antes de você reinicializá-las.</p><h2 id="exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo"><span>Exemplo de código</span></a></h2><p>Definiremos uma subclasse MazePrototypeFactory da classe MazeFactory (página 100). MazePrototypeFactory será iniciada com protótipos dos objetos que criará, de maneira que não tenhamos que criar subclasses somente para mudar as classes de paredes ou salas que ela cria.</p><p>A MazePrototypeFactory aumenta a interface de Maze Factory com um constructor que aceita os protótipos como argumentos:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>class MazePrototypeactory Apublic MazeFactory {
public:
    MazePrototypeFactory (Maze*, Wall*, Room*, Door*);

    virtual Maze* MakeMaze () const;
    virtual Room* MakeRoom(int) const;
    virtual Wall* MakeWall () const;
    virtual Door* MakeDoor (Room*, Room*) const;

private:
    Maze* _prototypeMaze;
    Room* _prototypeRoom;
    Wall* _prototypeWall:
    Door* _prototypeDoor;
} ;

O novo constructor simplesmente inicia seus protótipos:

MazePrototypeFactory::MazePrototypeFactory(
    Maze* m, Wall* w, Room* r, Door* d
) {
    _prototypeMaze = m;
    _prototypeRoom = w;
    _prototypeWall = r;
    _prototypeDoor = d;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As funções-membro para a criação de paredes, salas e portas são semelhantes: cada uma clona um protótipo e então o inicia. Aqui estão as definições de MakeWall e MakeDoor:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Wall* MazePrototypeFactory::Makewall () const {
    return _prototypeWall-&gt;Clone();
}

Door* MazePrototypeFactory::MakeDoor (Room* rl, Room* r2) const {
    Door* door = prototypeDoor-&gt;Clone();
    door-&gt;Initialize(r1, r2);
    return door;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Podemos usar MazePrototypeFactory para criar um labirinto-protótipo (ou um labirinto por omissão) simplesmente iniciando-o com protótipos dos componentes básicos de labirinto:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>MazeGame game;
MazePrototypeFatctory simpleMazeFactory(
    new Maze, new Wall, new Room, new Door
);

Maze* maze = game.CreateMaze(simpleMazeFactory);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Para mudar o tipo de labirinto, iniciamos MazePrototypeFactory com um conjunto diferente de protótipos. A seguinte chamada cria um labirinto com uma BombedDoor e um RoomWithABomb:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>MazePrototypeFactory bombedMazeFactory(
    new Maze, new BombedWall,
    new RoomWithABomb, new Door
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Um objeto que pode ser usado como um protótipo, tal como uma instância de Wall, deve suportar a operação Clone. Ele também deve ter um constructor de cópias para fazer a clonagem. Também pode necessitar de uma operação separada para a reinicialização do estado interno. Acrescentaremos a operação Initialize à Door para permitir aos clientes inicializarem as salas do clone.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>MazePrototypeFactory bombedMazeFactory(
    new Maze, new BombedWall,
    new RoomWithABomb, new Door
);

    virtual void Enter();
    Room* OtherSideFrom(Room*);
private:
    Room* _room1;
    Room* _room2;

Door::Door (const Door&amp; other) {
    _room1 = other._room1;
    _room2 = other._room2;
}

Door* Door::Clone () const {
    return new Door(*this);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A subclasse BombedWalldeve redefinir Clone e implementar um constructor de cópias correspondente.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>class BombedWall : public Wall {
public:
    BombedWall();
    BombedWall(const BombedWall&amp;);

    virtual Wall* Clone() const;
    bool HasBomb();
private:
    boll _bomb;
};

BombedWall::BombedWall (const BombedWall&amp; other) : Wall(other){
    _bomb - other._bomb;
}

Wall* BombedWall::Clone () const {
    return new BombedWall(*this);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Embora BombedWall::Clone retorne um Wall*, sua implementação retorna um ponteiro para uma nova instância de uma subclasse, qual seja, um BombedWall*. Definimos Clone desta maneira na classe-base para nos assegurarmos de que os clientes que clonam o protótipo não tenham que conhecer suas subclasses concretas. Clientes nunca deveriam precisar fazer um downcast do valor de retorno de Clone para o tipo desejado.</p><p>Em Smalltalk, você pode reutilizar o método-padrão copy herdado de Object para clonar qualquer MapSite. Você pode usar MazeFactory para produzir os protótipos de que necessita; por exemplo, pode criar uma sala fornecendo o nome #room.</p><p>A MazeFactory (fábrica de labirintos) tem um dicionário que mapeia nomes aos protótipos. Seu método make: se parece com o seguinte:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>make: partName
    ^ (partCatalog at: partName) copy

Tendo métodos apropriados para inicia a MazeFactory com protótipos, você
poderia criar um labirinto simples com o seguinte código:

Create Maze
    on: (MazeFactory new
        with: Door new named: #door;
        with: Wall new named: #walll;
        with: Room new named: #room;
        yourself)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>onde a definição do método de classe on: para CreateMaze seria</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>on: aFactory
    | room1 room2 |
    room1 := (aFactory make: #room) location 1@1.
    room2 := (aFactory make: #room) location 2@1.
    door := (aFactory make: #door) from: room1 to: room2.

room1
    atSide: #north put: (aFactory make: #wall);
    atSide: #east put: door;
    atSide: #south put: (aFactory make: #wall);
    atSide: #west put: (aFactory make: #wall);
room2
    atSide: #north put: (aFactory make: #wall);
    atSide: #east put: (aFactory make: #wall);
    atSide: #south put: (aFactory make: #wall);
    atSide: #west put: door;
^ Maze new
    addRoom: room1;
    addRoom: room2;
    yourself
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exemplo-de-codigo-simples-em-java" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo-simples-em-java"><span>Exemplo de código simples em java</span></a></h2><p>Interface do padrao:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public interface Prototype extends Cloneable {
    Prototype clone();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Classe concreta que será implementada:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class Arquivo implements Prototype {
    private String nome;
    private String tipo;

    public Arquivo(String nome, String tipo) {
        this.nome = nome;
        this.tipo = tipo;
    }

    @Override
    public Prototype clone() {
        try {
            return (Prototype) super.clone();
        } catch (CloneNotSupportedException e) {
            return null;
        }
    }

    @Override
    public String toString() {
        return &quot;Arquivo [nome - &quot; + nome + &quot; / tipo - &quot; + tipo + &quot;]&quot;;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cliente que faz requisição:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>public class Cliente {
    public static void main(String[] args) {
        Arquivo arquivo1 = new Arquivo(&quot;Foto&quot;, &quot;pnj&quot;);
        Arquivo arquivo2 = (Arquivo) arquivo1.clone();
        
        System.out.println(arquivo1);
        System.out.println(arquivo2);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos"><span>Usos conhecidos</span></a></h2><p>Talvez o primeiro exemplo do padrão Prototype se encontre no sistema Sketchpad de Ivan Sutherland [Sut63]. A primeira aplicação amplamente conhecida do padrão numa linguagem orientada a objeto foi em ThingLab, na qual os usuários poderiam formar um objeto composto e então promovê-lo a um protótipo pela sua instalação numa biblioteca de objetos reutilizáveis [Bor81]. Goldberg e Robson mencionam protótipos como um padrão [GR83], mas Coplien [Cop92] fornece uma descrição muito mais completa. Ele descreve idiomas relacionados ao padrão prototype para C++ e dá muitos exemplos e variações.</p><p>O Etgdb é um depurador (debugger) de front-end, baseado em ET++, que fornece uma interface de apontar e clicar para diferentes depuradores orientados a linhas. Cada depurador tem uma subclasse DebuggerAdaptor correspondente. Por exemplo, GdbAdaptor adapta o etgdb à sintaxe dos comandos do gdb de GNU, enquanto que SunDbxAdaptor adapta o etgdb ao depurador da Sun. O Etgdb não tem um conjunto de classes DebuggerAdaptor codificadas rigidamente nele próprio. Em vez disso, lê o nome do adaptor a ser usado de uma variável fornecida pelo ambiente, procura um protótipo com o nome especificado em uma tabela global e, então, clona o protótipo. Novos depuradores podem ser acrescentados ao etgdb ligando-o ao DebuggerAdaptor que funciona para um depurador novo.</p><p>A “biblioteca de técnicas de interações”, no ModeComposer, armazena protótipos de objetos que suportam várias técnicas de interação [Sha90]. Qualquer técnica de interação criada pelo Mode Composer pode ser usada como um protótipo colocando-a nesta biblioteca. O padrão Prototype permite ao Mode Composer suportar um conjunto ilimitado de técnicas de interação.</p><p>O exemplo do editor musical discutido anteriormente se baseia no framework para desenhos do Unidraw [VL90].</p><h2 id="padroes-relacionados" tabindex="-1"><a class="header-anchor" href="#padroes-relacionados"><span>Padrões relacionados</span></a></h2><p>Prototype e Abstract Factory são padrões que competem entre si em várias situações. Porém, eles também podem ser usados em conjunto.</p><p>Um Abstract Factory pode armazenar um conjunto de protótipos a partir dos quais podem ser clonados e retornados objetos-produto.</p><p>Projetos que utilizam intensamente os padrões Composite e Decorator também podem se beneficiar do uso do Prototype.</p><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias"><span>Referências</span></a></h2><ol><li>GAMMA, Erich. et al. Padrões de projetos: Soluções reutilizáveis de software orientados a objetos Bookman editora, 2009.</li></ol>`,65))])}const g=r(c,[["render",m],["__file","Seminario.html.vue"]]),h=JSON.parse('{"path":"/includes/seminario-1-Redror/Seminario.html","title":"Seminário Prototype Method - Pedro Carlos","lang":"pt-BR","frontmatter":{"description":"Seminário Prototype Method - Pedro Carlos Intenção Especificar os tipos de objetos a serem criados usando uma instância-protótipo e criar novos objetos pela cópia desse protótip...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/includes/seminario-1-Redror/Seminario.html"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Seminário Prototype Method - Pedro Carlos"}],["meta",{"property":"og:description","content":"Seminário Prototype Method - Pedro Carlos Intenção Especificar os tipos de objetos a serem criados usando uma instância-protótipo e criar novos objetos pela cópia desse protótip..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Seminário Prototype Method - Pedro Carlos\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":2,"title":"Aplicabilidade","slug":"aplicabilidade","link":"#aplicabilidade","children":[]},{"level":2,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[]},{"level":2,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":2,"title":"Colaborações","slug":"colaboracoes","link":"#colaboracoes","children":[]},{"level":2,"title":"Conseqüências","slug":"consequencias","link":"#consequencias","children":[]},{"level":2,"title":"Implementação","slug":"implementacao","link":"#implementacao","children":[]},{"level":2,"title":"Exemplo de código","slug":"exemplo-de-codigo","link":"#exemplo-de-codigo","children":[]},{"level":2,"title":"Exemplo de código simples em java","slug":"exemplo-de-codigo-simples-em-java","link":"#exemplo-de-codigo-simples-em-java","children":[]},{"level":2,"title":"Usos conhecidos","slug":"usos-conhecidos","link":"#usos-conhecidos","children":[]},{"level":2,"title":"Padrões relacionados","slug":"padroes-relacionados","link":"#padroes-relacionados","children":[]},{"level":2,"title":"Referências","slug":"referencias","link":"#referencias","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":10.22,"words":3066},"filePathRelative":"includes/seminario-1-Redror/Seminario.md","autoDesc":true}');export{g as comp,h as data};
