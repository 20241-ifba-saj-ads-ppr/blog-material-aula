import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as r,e as a,b as s,d as c,a as n}from"./app-DoHoykSH.js";const l={},d=n('<h1 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>INTENÇÃO</span></a></h1><h3 id="definir-uma-interface-para-criar-objetos-mas-deixar-as-subclasses-decidirem-qual-classe-concreta-instanciar" tabindex="-1"><a class="header-anchor" href="#definir-uma-interface-para-criar-objetos-mas-deixar-as-subclasses-decidirem-qual-classe-concreta-instanciar"><span>Definir uma interface para criar objetos, mas deixar as subclasses decidirem qual classe concreta instanciar.</span></a></h3><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>MOTIVAÇÃO</span></a></h2><p><strong>O padrão de projeto Factory Method se destaca como uma solução poderosa para centralizar a criação de objetos, concedendo às subclasses a flexibilidade de determinar qual tipo de objeto concreto deve ser instanciado. Essa abordagem oferece diversas vantagens, tornando o código mais adaptável, reutilizável e fácil de manter.</strong></p><p>Imagine que você está criando uma aplicação de gerenciamento de logística. A primeira versão da sua aplicação pode lidar apenas com o transporte de caminhões, portanto a maior parte do seu código fica dentro da classe Caminhão.</p><p>Depois de um tempo, sua aplicação se torna bastante popular. Todos os dias você recebe dezenas de solicitações de empresas de transporte marítimo para incorporar a logística marítima na aplicação.</p><figure><img src="https://github.com/user-attachments/assets/10037dfe-548a-4276-96b4-313656fc534e" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>Boa notícia, certo? Mas e o código? Atualmente, a maior parte do seu código é acoplada à classe Caminhão. Adicionar Navio à aplicação exigiria alterações em toda a base de código. Além disso, se mais tarde você decidir adicionar outro tipo de transporte à aplicação, provavelmente precisará fazer todas essas alterações novamente.</p><p>Como resultado, você terá um código bastante sujo, repleto de condicionais que alteram o comportamento da aplicação, dependendo da classe de objetos de transporte.</p><h3 id="solucao" tabindex="-1"><a class="header-anchor" href="#solucao"><span>SOLUÇÃO</span></a></h3><p>O padrão Factory Method resolve esse problema substituindo chamadas diretas de construção de objetos (usando o operador new) por chamadas para um método fábrica especial. Não se preocupe: os objetos ainda são criados através do operador new, mas esse está sendo chamado de dentro do método fábrica. Objetos retornados por um método fábrica geralmente são chamados de produtos.</p><figure><img src="https://github.com/user-attachments/assets/ff698827-7c21-4498-8773-c637cf99043a" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>À primeira vista, essa mudança pode parecer sem sentido: apenas mudamos a chamada do construtor de uma parte do programa para outra. No entanto, considere o seguinte: agora você pode sobrescrever o método fábrica em uma subclasse e alterar a classe de produtos que estão sendo criados pelo método.</p><p>Porém, há uma pequena limitação: as subclasses só podem retornar tipos diferentes de produtos se esses produtos tiverem uma classe ou interface base em comum. Além disso, o método fábrica na classe base deve ter seu tipo de retorno declarado como essa interface.</p><figure><img src="https://github.com/user-attachments/assets/a29bf2c9-7a2a-4d0b-91dc-65910c9e324a" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><blockquote><p>O código que usa o método fábrica (geralmente chamado de código cliente) não vê diferença entre os produtos reais retornados por várias subclasses. O cliente trata todos os produtos como um Transporte abstrato. O cliente sabe que todos os objetos de transporte devem ter o método entregar, mas como exatamente ele funciona não é importante para o cliente.</p></blockquote><hr><h3 id="aplicacao" tabindex="-1"><a class="header-anchor" href="#aplicacao"><span>APLICAÇÃO:</span></a></h3><p>Use o padrão Factory Method quando:</p><ul><li><p>Quiser encapsular a criação de objetos: O Factory Method permite centralizar a lógica de criação de objetos em um único local, facilitando a manutenção e o teste do código. Isso é útil quando você tem várias classes de produtos relacionadas, mas não deseja que o código do cliente precise saber qual classe específica instanciar.</p></li><li><p>Precisar de flexibilidade na criação de objetos: O Factory Method permite que você defina a lógica de criação de objetos em subclasses, permitindo que você personalize a criação de objetos de acordo com o contexto. Isso é útil quando você precisa criar objetos diferentes com base em diferentes condições ou configurações.</p></li><li><p>Quiser promover a interoperabilidade entre produtos: O Factory Method garante que todos os produtos criados implementem uma interface comum, permitindo que o código do cliente interaja com eles de maneira uniforme, independentemente da classe concreta do produto. Isso é útil quando você precisa ter diferentes tipos de produtos trabalhando juntos em um sistema.</p></li><li><p>Quiser adiar a decisão de qual classe instanciar: O Factory Method permite que você adiue a decisão de qual classe instanciar até o tempo de execução, permitindo que você baseie a decisão em informações dinâmicas. Isso é útil quando você precisa criar objetos diferentes com base em dados de entrada ou configurações do usuário.</p></li></ul><hr><h3 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>ESTRUTURA:</span></a></h3>',22),u=n(`<hr><h3 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>PARTICIPANTES:</span></a></h3><ul><li><strong>Product</strong>: <ul><li>Interface em comum para produtos finais.Classes que implementam o factory method devem retornar produtos que implementam essa interface</li></ul></li><li><strong>ConcreteProduct</strong>: <ul><li>Produtos concretos que serão retornados pelas classes que implementarem o factory method</li></ul></li><li><strong>Creator</strong>: <ul><li>Responsável pela criação de um factory method abstrato ( tambem pode implementar um factory method ). Essa classe pode e deve conter outros membros(Metodos e Atributos) para sua logica interna</li></ul></li><li><strong>ConcreteCreator</strong>: <ul><li>A única responsabilidade dessas classes é implementar o factory method informando qual produto será retornado. Também pode implementar lógica para a criação de produtos</li></ul></li></ul><blockquote><p><strong>CODIGO REFERENTE:</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Creator</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Product</span> <span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createAndShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
   <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteProduct</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteCreator</span> <span class="token keyword">extends</span> <span class="token class-name">Creator</span> <span class="token punctuation">{</span>
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token class-name">Creator</span> creator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Product</span> product <span class="token operator">=</span> creator<span class="token punctuation">.</span><span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       product<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Hi&quot;</span>
       creator<span class="token punctuation">.</span><span class="token function">createAndShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>CONSEQUÊNCIAS</span></a></h3><table><thead><tr><th>Benefícios</th><th>Descrição</th></tr></thead><tbody><tr><td>- Flexibilidade na criação de objetos</td><td>Permite criar objetos de diferentes tipos sem modificar o código cliente.</td></tr><tr><td>- Encapsulamento da lógica de criação</td><td>Esconde a lógica de criação de objetos dentro do método fábrica, facilitando a manutenção e o reuso do código.</td></tr><tr><td>- Promove a extensibilidade</td><td>Facilita a adição de novos tipos de objetos sem modificar o código existente.</td></tr><tr><td>- Melhora a testabilidade</td><td>O código de teste pode ser direcionado para o método fábrica, isolando-o da lógica de criação dos objetos concretos.</td></tr><tr><td>- Possibilita a injeção de dependência</td><td>O método fábrica pode ser utilizado para injetar dependências nos objetos criados, tornando o código mais flexível e desacoplado.</td></tr></tbody></table><hr><table><thead><tr><th>Desvantagens</th><th>Descrição</th></tr></thead><tbody><tr><td>- Aumento da complexidade</td><td>O uso do padrão pode aumentar a complexidade do código, principalmente em casos simples.</td></tr><tr><td>- Potencial rigidez</td><td>Se as subclasses não forem bem projetadas, o código pode se tornar rígido e difícil de modificar.</td></tr><tr><td>- Perda de transparência</td><td>O cliente não sabe exatamente como os objetos são criados, o que pode dificultar a depuração de erros em alguns casos.</td></tr></tbody></table><hr><h3 id="elementos-do-metodo-fabrica" tabindex="-1"><a class="header-anchor" href="#elementos-do-metodo-fabrica"><span>ELEMENTOS DO MÉTODO FÁBRICA:</span></a></h3><p><em><strong>Classe Criadora:</strong></em> Define o método fábrica, que retorna um objeto do tipo Produto. Essa classe pode ser abstrata para forçar as subclasses a implementar seus próprios métodos fábrica, ou pode fornecer uma implementação padrão.<br><em><strong>Classe Produto:</strong></em> Define a interface comum para todos os produtos criados pelo método fábrica.<br><em><strong>Subclasses Concretas:</strong></em> Implementam a classe Produto e fornecem funcionalidades específicas.</p><blockquote><p>Etapas da Implementação:</p></blockquote><p>1- Defina a interface do produto: Crie uma interface ou classe abstrata que defina as operações comuns a todos os produtos. Essa interface deve ser implementada por todas as subclasses de produtos.</p><p>2- Crie a classe Criadora: Defina uma classe abstrata ou concreta que contenha o método fábrica. O tipo de retorno do método fábrica deve corresponder à interface do produto.</p><p>3- Implemente o método fábrica nas subclasses: Nas subclasses da classe Criadora, implemente o método fábrica para retornar uma instância da respectiva subclasse de produto.</p><p>4- Utilize o método fábrica no código cliente: No código cliente, utilize o método fábrica da classe Criadora para obter um objeto do tipo Produto. Não é necessário saber qual subclasse de produto será retornada, pois a interface do produto garante compatibilidade.</p><hr><h3 id="exemplo-pratico" tabindex="-1"><a class="header-anchor" href="#exemplo-pratico"><span>EXEMPLO PRÁTICO:</span></a></h3><p><strong>Cenário:</strong></p><p>Imagine um sistema web para gerenciar eventos em uma faculdade. O sistema precisa lidar com diferentes tipos de eventos, como palestras, workshops, e congressos. Cada tipo de evento possui características e requisitos específicos.</p><p><strong>Objetivo:</strong></p><p>Implementar o padrão Factory Method para criar objetos de evento de forma flexível e extensiva, encapsulando a lógica de criação e promovendo a reutilização de código.</p><blockquote></blockquote><p>1- Criar uma interface Evento que defina as características comuns a todos os tipos de eventos, como nome, data, hora, local, etc.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Evento</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">getNome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">setNome</span><span class="token punctuation">(</span><span class="token class-name">String</span> nome<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Data</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">Data</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Hora</span> <span class="token function">getHora</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">setHora</span><span class="token punctuation">(</span><span class="token class-name">Hora</span> hora<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Local</span> <span class="token function">getLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">setLocal</span><span class="token punctuation">(</span><span class="token class-name">Local</span> local<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2- Criar classes concretas para cada tipo de evento, implementando a interface Evento e definindo as características específicas de cada um.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Palestra</span> <span class="token keyword">implements</span> <span class="token class-name">Evento</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Palestrante</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Tema</span><span class="token punctuation">;</span>

    <span class="token operator">+</span> <span class="token class-name">Construtor</span> 
    <span class="token operator">+</span> <span class="token class-name">Metodos</span> da <span class="token keyword">interface</span> <span class="token class-name">Evento</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Workshop</span> <span class="token keyword">implements</span> <span class="token class-name">Evento</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Instrutor</span>
    <span class="token keyword">private</span> <span class="token class-name">Topicos</span>

    <span class="token operator">+</span> <span class="token class-name">Construtor</span> 
    <span class="token operator">+</span> <span class="token class-name">Metodos</span> da <span class="token keyword">interface</span> <span class="token class-name">Evento</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Congresso</span> <span class="token keyword">implements</span> <span class="token class-name">Evento</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ComissaoOrganizadora</span>
    <span class="token keyword">private</span> <span class="token class-name">ComiteCientifico</span>

    <span class="token operator">+</span> <span class="token class-name">Construtor</span> 
    <span class="token operator">+</span> <span class="token class-name">Metodos</span> da <span class="token keyword">interface</span> <span class="token class-name">Evento</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3- Criar uma classe abstrata EventoFactory que defina um método criarEvento() responsável por instanciar o objeto de evento correto de acordo com o tipo de evento desejado.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">EventoFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Evento</span> <span class="token function">criarEvento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4-Criar subclasses concretas de EventoFactory para cada tipo de evento, sobrescrevendo o método criarEvento() para instanciar o objeto de evento correspondente.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PalestraFactory</span> <span class="token keyword">extends</span> <span class="token class-name">EventoFactory</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Evento</span> <span class="token function">criarEvento</span><span class="token punctuation">(</span><span class="token class-name">Parametros</span> da classe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Palestra</span><span class="token punctuation">(</span><span class="token class-name">Parametros</span> da classe<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkshopFactory</span> <span class="token keyword">extends</span> <span class="token class-name">EventoFactory</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Evento</span> <span class="token function">criarEvento</span><span class="token punctuation">(</span><span class="token class-name">Parametros</span> da classe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Workshop</span><span class="token punctuation">(</span><span class="token class-name">Parametros</span> da classe<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CongressoFactory</span> <span class="token keyword">extends</span> <span class="token class-name">EventoFactory</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Evento</span> <span class="token function">criarEvento</span><span class="token punctuation">(</span><span class="token class-name">Parametros</span> da classe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Congresso</span><span class="token punctuation">(</span><span class="token class-name">Parametros</span> da classe<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5- O código do cliente pode utilizar o método criarEvento() da classe EventoFactory para obter o objeto de evento desejado, sem precisar conhecer as classes concretas de evento.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token class-name">EventoFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PalestraFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Evento</span> eventoPalestra <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">criarEvento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkshopFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Evento</span> eventoWorkshop <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">criarEvento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Ao invés de utilizar um tipo de evento predefinido, o sistema poderia permitir que o usuário definisse um tipo de evento personalizado, fornecendo os atributos e métodos específicos. A factory poderia então criar um objeto de evento dinâmico com base nas informações fornecidas pelo usuário.</p></blockquote><p><em><strong>DIAGRAMA DE REPRESENTAÇÃO</strong></em></p>`,37),m=n('<hr><h3 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos"><span>USOS CONHECIDOS:</span></a></h3><ul><li>Bibliotecas GUI: Bibliotecas GUI como o Qt e o GTK+ usam o Factory Method para criar widgets de diferentes tipos (botões, caixas de texto, etc.).</li><li>Processamento de documentos: Ferramentas de processamento de documentos como o LibreOffice e o Microsoft Word usam o Factory Method para criar diferentes tipos de documentos (documentos de texto, planilhas, apresentações, etc.).</li><li>Serialização de dados: Bibliotecas de serialização como o JSON e o XML usam o Factory Method para criar serializadores de diferentes tipos de dados (números, strings, objetos, etc.).</li></ul><h3 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias"><span><em><strong>REFERÊNCIAS</strong></em></span></a></h3><ul><li>https://mermaid.js.org/syntax/classDiagram.html</li><li>https://github.com/20241-ifba-saj-ads-ppr/seminario-1-Arlei10/blob/main/README.md</li><li>https://www.devmedia.com.br/patterns-factory-method/18954</li><li>https://www.geeksforgeeks.org/factory-method-for-designing-pattern/</li><li>https://refactoring.guru/pt-br/design-patterns/factory-method</li><li>https://pt.wikipedia.org/wiki/Factory_Method</li><li>https://www.thiengo.com.br/padrao-de-projeto-factory-method</li><li>GAMMA, Erich. et al. Padrões de projetos: Soluções reutilizáveis de software orientados a objetos Bookman editora, 2009.</li><li>GUERRA, Eduardo. Design Patterns com Java - Projeto orientado a objetos guiado por padroes</li></ul>',5),k={href:"https://mermaid.js.org/syntax/classDiagram.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.github.com/pt/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax",target:"_blank",rel:"noopener noreferrer"};function b(f,h){const e=t("Mermaid"),o=t("ExternalLinkIcon");return p(),r("div",null,[d,a(e,{id:"mermaid-83",code:"eJzT1dXlKsksyUm1UnBLTC7JL6rkAglxJeckFhe7ZCamFyXmcikogLkKzkWpiUAlCtVAEQUF7TSIBt/Ukoz8FA1NiGAySE2qY15KcEZ+OViwlgtuQEBRfkppcgnMgOLESo9MdDXO+XlAM0pSSVFL0GFgPeiqbWp0dWF+AkrDLIQIo7oCp240ZVwACe9oiQ=="}),u,a(e,{id:"mermaid-311",code:"eJytk99LwzAQx9/7V9yjMvYPiIhjUxSUDSb4KGcbu2CbG5c40OH/7iVt2tqFoehLcskdn+/9SPIKrV1oLBnrLAsnmD1bx5i7q50yjmCfAUxh7VibEgzVKpwX6BAKWcLphhhhI0s43VGOFVR+zeRiAqVyTrGdmWLdWCenZ7AjXWSfAFF2hZXywq1gPBqnYNvbwfegagQnS4N3VJC9V2F7WjFtNfUKQ4lH4le7oS20GrdGqG+OGHS0Gr4gcrICDvsvVeZkSlbWUpSZU62tRVpyiUZ/YOG7lScuu2in5lqar19EPkQOL36QjiQzSOj7QK/FIn6HvQR4ELZeaOeds0ZubM9rrNSgIihUebncKWZd+AFNUqgVyhNTjqWthVTvSUrwEZYaU5fpH/iRlRzQfwh0sEZh9HlU2LqnDWl//y7HgJjhdHpx2PcjseMWHosdtyM7qOJ82v/Hwxq8t6sg5Rx8iCzrOOmSOlC6ih6VytzzvwAv2aFn"}),m,s("p",null,[s("a",k,[c("Mermaid Class Diagram.html"),a(o)])]),s("p",null,[s("a",v,[c("Markdown"),a(o)])])])}const w=i(l,[["render",b],["__file","index.html.vue"]]),E=JSON.parse('{"path":"/includes/factory_method/seminario-1-Arlei10/","title":"INTENÇÃO","lang":"pt-BR","frontmatter":{"description":"INTENÇÃO Definir uma interface para criar objetos, mas deixar as subclasses decidirem qual classe concreta instanciar. MOTIVAÇÃO O padrão de projeto Factory Method se destaca co...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/includes/factory_method/seminario-1-Arlei10/"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"INTENÇÃO"}],["meta",{"property":"og:description","content":"INTENÇÃO Definir uma interface para criar objetos, mas deixar as subclasses decidirem qual classe concreta instanciar. MOTIVAÇÃO O padrão de projeto Factory Method se destaca co..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/user-attachments/assets/10037dfe-548a-4276-96b4-313656fc534e"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"INTENÇÃO\\",\\"image\\":[\\"https://github.com/user-attachments/assets/10037dfe-548a-4276-96b4-313656fc534e\\",\\"https://github.com/user-attachments/assets/ff698827-7c21-4498-8773-c637cf99043a\\",\\"https://github.com/user-attachments/assets/a29bf2c9-7a2a-4d0b-91dc-65910c9e324a\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":3,"title":"Definir uma interface para criar objetos, mas deixar as subclasses decidirem qual classe concreta instanciar.","slug":"definir-uma-interface-para-criar-objetos-mas-deixar-as-subclasses-decidirem-qual-classe-concreta-instanciar","link":"#definir-uma-interface-para-criar-objetos-mas-deixar-as-subclasses-decidirem-qual-classe-concreta-instanciar","children":[]},{"level":2,"title":"MOTIVAÇÃO","slug":"motivacao","link":"#motivacao","children":[{"level":3,"title":"SOLUÇÃO","slug":"solucao","link":"#solucao","children":[]},{"level":3,"title":"APLICAÇÃO:","slug":"aplicacao","link":"#aplicacao","children":[]},{"level":3,"title":"ESTRUTURA:","slug":"estrutura","link":"#estrutura","children":[]},{"level":3,"title":"PARTICIPANTES:","slug":"participantes","link":"#participantes","children":[]},{"level":3,"title":"CONSEQUÊNCIAS","slug":"consequencias","link":"#consequencias","children":[]},{"level":3,"title":"ELEMENTOS DO MÉTODO FÁBRICA:","slug":"elementos-do-metodo-fabrica","link":"#elementos-do-metodo-fabrica","children":[]},{"level":3,"title":"EXEMPLO PRÁTICO:","slug":"exemplo-pratico","link":"#exemplo-pratico","children":[]},{"level":3,"title":"USOS CONHECIDOS:","slug":"usos-conhecidos","link":"#usos-conhecidos","children":[]},{"level":3,"title":"REFERÊNCIAS","slug":"referencias","link":"#referencias","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.17,"words":1852},"filePathRelative":"includes/factory_method/seminario-1-Arlei10/README.md","autoDesc":true}');export{w as comp,E as data};
