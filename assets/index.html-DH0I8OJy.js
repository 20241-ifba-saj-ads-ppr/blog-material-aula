import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o}from"./app-BrOvOMMH.js";const t={};function p(i,n){return o(),a("div",null,n[0]||(n[0]=[e(`<h1 id="padrao-de-projeto-front-controller-por-joao-augusto" tabindex="-1"><a class="header-anchor" href="#padrao-de-projeto-front-controller-por-joao-augusto"><span>Padrão de Projeto: Front Controller por João Augusto</span></a></h1><h3 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h3><p>O padrão Front Controller visa centralizar o gerenciamento de requisições em uma única entidade, que controla e direciona o fluxo de uma aplicação. Em vez de ter múltiplos pontos de entrada em uma aplicação, o Front Controller unifica as requisições, permitindo um controle mais eficiente e coeso.</p><h3 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h3><p>Em aplicações complexas, como sistemas web ou jogos, pode haver uma grande variedade de requisições que precisam ser processadas. Se cada parte do sistema gerencia suas próprias requisições, isso pode levar a uma duplicação de código, dificuldade de manutenção e problemas de segurança. O padrão Front Controller centraliza esse processo, garantindo que todas as requisições sejam tratadas de maneira uniforme e coordenada.</p><h3 id="outros-nomes" tabindex="-1"><a class="header-anchor" href="#outros-nomes"><span>Outros Nomes</span></a></h3><ul><li><em>Application Controller</em></li><li><em>Request Controller</em></li></ul><h3 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h3><p>A estrutura básica do padrão <em>Front Controller</em> inclui os seguintes componentes:</p><ul><li><em>FrontController</em>: Recebe todas as requisições e decide qual ação tomar. Pode incluir funcionalidades adicionais como autenticação e registro de logs.</li><li><em>Dispatcher</em>: Encaminha a requisição para o controlador apropriado com base na natureza da solicitação.</li><li><em>Controller</em>: Classes que processam a lógica específica para cada tipo de requisição.</li><li><em>View</em>: Classes que representam a interface que será apresentada ao usuário.</li></ul><p><em>Estrutura básica do UML</em>:</p><figure><img src="https://www.plantuml.com/plantuml/svg/ZPFFJiCm3CRlVGeVYqPVe8Uf4uWJ1mJIxg6nsaXPiYKf4qAyEutxPwcxJHmgfVu-sx_4IUM3SA4xwAoQLxKMtiEBioOyzP-pMgE3dmoW0AdyKOIwHLV2yxpkfGsqmaYDxtZgq8VSuQc4Z-2KQHwXyz4__3sKy6MLf1JbTrreqGHLYu0oPxvFQpKAGrPjcokbfsA_sKXzOHg1XJmeSzb62RjbO32vda3ZmiP3PEmfbjLUbm52dSxeBYZ38DeD-DQUINaJ3URh90wLfWtQzKI6cQIHSgDR1DahF8_sk2yjlczY_STAxUuR-SKhYcrwrP89HuMFaykhCJ837o2VozmZGcVh0IHDoC5FUkv1QeL6nYSsBVu0" alt="uml diagram" loading="lazy"><figcaption>Estrutura Front Controler.</figcaption></figure><h3 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes"><span>Colaborações</span></a></h3><ul><li>O <em>FrontController</em> recebe todas as requisições do sistema e delega o processamento ao <strong>Dispatcher</strong>.</li><li>O <em>Dispatcher</em> analisa a requisição e encaminha para o <em>Controller</em> específico que lida com aquela ação.</li><li>O <em>Controller</em> processa a lógica da ação e seleciona a <em>View</em> apropriada para exibição.</li><li>A <em>View</em> exibe a interface ao usuário com base nas informações fornecidas pelo <em>Controller</em>.</li></ul><h3 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Consequências</span></a></h3><p><em>Benefícios</em>:</p><ul><li><em>Centralização do Controle</em>: Todas as requisições passam por um único ponto, facilitando a gestão e aplicação de políticas comuns, como autenticação e logging.</li><li><em>Facilidade de Manutenção</em>: Reduz a duplicação de código, já que a lógica de controle é centralizada.</li><li><em>Reutilização de Código</em>: Promove a reutilização de lógica de controle e despacho.</li></ul><p><em>Desvantagens</em>:</p><ul><li><em>Ponto Único de Falha</em>: Se o Front Controller falhar, toda a aplicação pode ficar indisponível.</li><li><em>Complexidade Inicial</em>: A configuração inicial pode ser mais complexa, especialmente em aplicações pequenas.</li></ul><h3 id="implementacao-conhecida" tabindex="-1"><a class="header-anchor" href="#implementacao-conhecida"><span>Implementação Conhecida</span></a></h3><p><em>Servlets em Java</em>: Em muitas aplicações Java, os Servlets atuam como Front Controllers, recebendo todas as requisições HTTP e despachando-as para os controladores e views apropriados. Frameworks como Struts e Spring MVC utilizam o conceito de Front Controller em suas arquiteturas.</p><h3 id="padroes-relacionados" tabindex="-1"><a class="header-anchor" href="#padroes-relacionados"><span>Padrões Relacionados</span></a></h3><ul><li><em>View Helper</em>: Ajuda na separação da lógica de apresentação da lógica de controle. O Front Controller delega a exibição à View, que pode usar View Helpers para formatar dados.</li><li><em>Intercepting Filter</em>: Pode ser utilizado junto com Front Controller para realizar pré-processamento de requisições (como autenticação, logging) antes de chegar ao controlador.</li></ul><h4 id="exemplo-de-codigo-em-java" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo-em-java"><span>Exemplo de Código em Java</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Front Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FrontController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Dispatcher</span> dispatcher<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">FrontController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dispatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isAuthenticUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;User is authenticated successfully.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">trackRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Page requested: &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Track each request</span>
        <span class="token function">trackRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// Authenticate the user</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAuthenticUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dispatcher<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Dispatcher</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dispatcher</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">HomeView</span> homeView<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">StudentView</span> studentView<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        homeView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HomeView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        studentView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;STUDENT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            studentView<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            homeView<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Command/View</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeView</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Displaying Home Page&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentView</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Displaying Student Page&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Testando o Front Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FrontControllerPatternDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FrontController</span> frontController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FrontController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frontController<span class="token punctuation">.</span><span class="token function">dispatchRequest</span><span class="token punctuation">(</span><span class="token string">&quot;HOME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frontController<span class="token punctuation">.</span><span class="token function">dispatchRequest</span><span class="token punctuation">(</span><span class="token string">&quot;STUDENT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h3><ol><li><p><em>FrontController</em></p><ul><li><em>Responsabilidade</em>: Centralizar a gestão de todas as requisições e decidir para onde elas devem ser encaminhadas.</li><li><em>Métodos</em>: <ul><li><code>handleAction(String action)</code>: Processa a ação solicitada e despacha para o controlador apropriado.</li><li><code>logAction(String action)</code>: Registra a ação recebida para fins de auditoria ou depuração.</li></ul></li></ul></li><li><p><em>Dispatcher</em></p><ul><li><em>Responsabilidade</em>: Encaminhar a requisição ao controlador apropriado com base na ação solicitada.</li><li><em>Métodos</em>: <ul><li><code>dispatch(String action)</code>: Encaminha a requisição ao controlador correto.</li></ul></li></ul></li><li><p><em>Controller</em></p><ul><li><em>Responsabilidade</em>: Processar a lógica específica da requisição e preparar os dados para a exibição.</li><li><em>Métodos</em>: <ul><li>Métodos específicos para cada tipo de controle, como <code>showInventory()</code>, <code>startCombat()</code>, <code>showStatus()</code>.</li></ul></li></ul></li><li><p><em>View</em></p><ul><li><em>Responsabilidade</em>: Exibir a interface do usuário com base nos dados fornecidos pelo controlador.</li><li><em>Métodos</em>: <ul><li><code>display()</code>: Método para exibir a interface correspondente.</li></ul></li></ul></li></ol><h3 id="meu-exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#meu-exemplo-de-codigo"><span>Meu exemplo de Código</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Front Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FrontController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Dispatcher</span> dispatcher<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">FrontController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dispatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">logAction</span><span class="token punctuation">(</span><span class="token class-name">String</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Ação recebida: &quot;</span> <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleAction</span><span class="token punctuation">(</span><span class="token class-name">String</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Log da ação</span>
        <span class="token function">logAction</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// Despacha a ação para o Dispatcher</span>
        dispatcher<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Dispatcher</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dispatcher</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">InventoryController</span> inventoryController<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">CombatController</span> combatController<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">StatusController</span> statusController<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        inventoryController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InventoryController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        combatController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CombatController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        statusController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatusController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&quot;inventario&quot;</span><span class="token operator">:</span>
                inventoryController<span class="token punctuation">.</span><span class="token function">showInventory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;combate&quot;</span><span class="token operator">:</span>
                combatController<span class="token punctuation">.</span><span class="token function">startCombat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;status&quot;</span><span class="token operator">:</span>
                statusController<span class="token punctuation">.</span><span class="token function">showStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Ação desconhecida.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Controllers e Views</span>
<span class="token keyword">class</span> <span class="token class-name">InventoryController</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showInventory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InventoryView</span> inventoryView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InventoryView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inventoryView<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">CombatController</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startCombat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CombatView</span> combatView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CombatView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        combatView<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">StatusController</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StatusView</span> statusView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatusView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        statusView<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Views</span>
<span class="token keyword">class</span> <span class="token class-name">InventoryView</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Exibindo o Inventário&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">CombatView</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Iniciando Combate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">StatusView</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Exibindo Status do Personagem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Testando o Front Controller no RPG</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RPGFrontControllerDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FrontController</span> frontController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FrontController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frontController<span class="token punctuation">.</span><span class="token function">handleAction</span><span class="token punctuation">(</span><span class="token string">&quot;inventario&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frontController<span class="token punctuation">.</span><span class="token function">handleAction</span><span class="token punctuation">(</span><span class="token string">&quot;combate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frontController<span class="token punctuation">.</span><span class="token function">handleAction</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="diagrama" tabindex="-1"><a class="header-anchor" href="#diagrama"><span>Diagrama</span></a></h3><img src="https://www.plantuml.com/plantuml/svg/ZLFB3i8W4Bpp5NkiCVv03wP6O-BPn3ksf2MXO62hCSP_jwMrKAYF0u7ip7PcEv0Pf1gRMf1iFEM26WDxhIHkswML44p3Wm0ieU3cGZ6lc4vXDvujL55P2BR9aIkPKBkbS4JDPRb8uQfuOMb2bLyvJp8OS9yVjBcyCebAtvsh50vnqP9pLPyf-injKB6qTcXiZ4yx1fN9sByypxWPp9jAtKOqYHf3S--kBfCUYtj2fvvI3oMV_PquktcH2lhHqp_CNkuxCxnFgzNQlq5UsXqo5sj0YV8Cy2Z8kN0cMjq094h2QLay-kjEo-8PauLzJ_t-0W00" alt="uml diagram" loading="lazy"><h4 id="explicacao" tabindex="-1"><a class="header-anchor" href="#explicacao"><span>Explicação</span></a></h4><p>Neste exemplo, o Front Controller gerencia as ações do jogador em um jogo de RPG, como acessar o inventário, iniciar um combate ou verificar o status do personagem. O Dispatcher distribui essas ações para os controladores corretos, que então chamam as Views apropriadas para exibir as telas correspondentes. Esse exemplo é adaptado para um contexto de jogo, o que ajuda a ilustrar como o padrão Front Controller pode ser aplicado em diferentes tipos de aplicações.</p>`,33)]))}const u=s(t,[["render",p],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/includes/seminario-2-JoaoAugustoMPdJ/","title":"Padrão de Projeto: Front Controller por João Augusto","lang":"pt-BR","frontmatter":{"description":"Padrão de Projeto: Front Controller por João Augusto Intenção O padrão Front Controller visa centralizar o gerenciamento de requisições em uma única entidade, que controla e dir...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/includes/seminario-2-JoaoAugustoMPdJ/"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Padrão de Projeto: Front Controller por João Augusto"}],["meta",{"property":"og:description","content":"Padrão de Projeto: Front Controller por João Augusto Intenção O padrão Front Controller visa centralizar o gerenciamento de requisições em uma única entidade, que controla e dir..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Padrão de Projeto: Front Controller por João Augusto\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":3,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":3,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":3,"title":"Outros Nomes","slug":"outros-nomes","link":"#outros-nomes","children":[]},{"level":3,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[]},{"level":3,"title":"Colaborações","slug":"colaboracoes","link":"#colaboracoes","children":[]},{"level":3,"title":"Consequências","slug":"consequencias","link":"#consequencias","children":[]},{"level":3,"title":"Implementação Conhecida","slug":"implementacao-conhecida","link":"#implementacao-conhecida","children":[]},{"level":3,"title":"Padrões Relacionados","slug":"padroes-relacionados","link":"#padroes-relacionados","children":[]},{"level":3,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":3,"title":"Meu exemplo de Código","slug":"meu-exemplo-de-codigo","link":"#meu-exemplo-de-codigo","children":[]},{"level":3,"title":"Diagrama","slug":"diagrama","link":"#diagrama","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.66,"words":1099},"filePathRelative":"includes/seminario-2-JoaoAugustoMPdJ/README.md","autoDesc":true}');export{u as comp,r as data};
