import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as n,e as t,o as p,r as i}from"./app-BrOvOMMH.js";const c={};function l(r,a){const s=i("Mermaid");return p(),o("div",null,[a[0]||(a[0]=n(`<h1 id="adapter" tabindex="-1"><a class="header-anchor" href="#adapter"><span>Adapter</span></a></h1><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><p>Converter a interface de uma classe em outra interface esparada pelos clientes. O Adapter permite que certas classes trabalhem em conjunto, pois de outra forma seria impossível por causa de suas interfaces imcompatíveis.</p><h2 id="sobre-o-adapter" tabindex="-1"><a class="header-anchor" href="#sobre-o-adapter"><span>Sobre o adapter</span></a></h2><ul><li>É um padrão da categoria estrutural</li><li>Faz exatamente o que um adaptador da vida real faz ( pense em um adaptador de tomadas de um formato para o outro ).</li><li>É muito usado para definir limites dentro de camadas da aplicação.</li><li>Tambem pode ser usado para adaptar interfaces de código legado para um novo código</li></ul><h2 id="problema" tabindex="-1"><a class="header-anchor" href="#problema"><span>Problema</span></a></h2><p>Imagine que você está criando uma aplicação de monitoramento do mercado de ações da bolsa. A aplicação baixa os dados as ações de múltiplas fontes em formato XML e então mostra gráficos e diagramas maneiros para o usuário.</p><p>Em algum ponto, você decide melhorar a aplicação ao integrar uma biblioteca de análise de terceiros. Mas aqui está a pegadinha: a biblioteca só trabalha com dados em formato JSON.<br><img src="https://github.com/user-attachments/assets/5198047c-b23c-45e6-9785-92bff3c0df11" alt="exemplo" loading="lazy"></p><p>A estrutura da aplicação antes da integração com a biblioteca de análises Você não pode usar a biblioteca “como ela está” porque ela espera os dados em um formato que é incompatível com sua aplicação.</p><p>Você poderia mudar a biblioteca para que ela funcione com XML. Contudo, isso pode quebrar algum código existente que depende da biblioteca. E pior, você pode não ter acesso ao código fonte da biblioteca para começo de conversa, fazendo dessa abordagem uma tarefa impossível.</p><h2 id="solucao" tabindex="-1"><a class="header-anchor" href="#solucao"><span>Solução</span></a></h2><p>Você pode criar um adaptador. Ele é um objeto especial que converte a interface de um objeto para que outro objeto possa entendê-lo.</p><p>Um adaptador encobre um dos objetos para esconder a complexidade da conversão acontecendo nos bastidores. O objeto encobrido nem fica ciente do adaptador. Por exemplo, você pode encobrir um objeto que opera em metros e quilômetros com um adaptador que converte todos os dados para unidades imperiais tais como pés e milhas.</p><p>Adaptadores podem não só converter dados em vários formatos, mas também podem ajudar objetos com diferentes interfaces a colaborar. Veja aqui como funciona:</p><ol><li>O adaptador obtém uma interface, compatível com um dos objetos existentes.</li><li>Usando essa interface, o objeto existente pode chamar os métodos do adaptador com segurança.</li><li>Ao receber a chamada, o adaptador passa o pedido para o segundo objeto, mas em um formato e ordem que o segundo objeto espera.<br> Algumas vezes é possível criar um adaptador de duas vias que pode converter as chamadas em ambas as direções. <img src="https://github.com/user-attachments/assets/d7e08d6b-0a92-4a4b-a40c-92cfd6352d56" alt="Capturar2" loading="lazy"><br> Vamos voltar à nossa aplicação da bolsa de valores. Para resolver o dilema dos formatos incompatíveis, você pode criar adaptadores XML-para-JSON para cada classe da biblioteca de análise que seu código trabalha diretamente. Então você ajusta seu código para comunicar-se com a biblioteca através desses adaptadores. Quando um adaptador recebe uma chamada, ele traduz os dados entrantes XML em uma estrutura JSON e passa a chamada para os métodos apropriados de um objeto de análise encoberto.</li></ol><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h2><h3 id="composicao" tabindex="-1"><a class="header-anchor" href="#composicao"><span>Composição</span></a></h3><figure><img src="https://github.com/user-attachments/assets/eff20590-ca2a-41d8-9494-32b779b17026" alt="Estrutura" tabindex="0" loading="lazy"><figcaption>Estrutura</figcaption></figure><h3 id="heranca-multipla" tabindex="-1"><a class="header-anchor" href="#heranca-multipla"><span>Herança Multipla</span></a></h3><figure><img src="https://github.com/user-attachments/assets/53c663da-e7b7-4d18-985c-e4e9f3361b9a" alt="estr" tabindex="0" loading="lazy"><figcaption>estr</figcaption></figure><ul><li>Essa implementação utiliza herança: o adaptador herda interfaces de ambos os objetos ao mesmo tempo. Observe que essa abordagem só pode ser implementada em linguagens de programação que suportam herança múltipla, tais como C++.</li></ul><hr><p>Client = é uma classe que contém a lógica de negócio do programa existente.<br> Target = Interface que descreve um protocolo que outras classes devem seguir para ser capaz de colaborar com o código cliente.<br> Adapter = É uma classe que é capaz de trabalhar tanto com o client quanto o adaptee: ela implementa a interface do cliente enquanto encobre o objeto do adaptee. O adaptador recebe chamadas do cliente através da interface do cliente e as traduz em chamadas para o objeto encobrido do adaptee em um formato que ele possa entender.<br> Adaptee = É alguma classe útil (geralmente de terceiros ou código legado). O cliente não pode usar essa classe diretamente porque ela tem uma interface incompatível.</p><h2 id="exemplo-de-implementacao" tabindex="-1"><a class="header-anchor" href="#exemplo-de-implementacao"><span>Exemplo de Implementação</span></a></h2><p>Segue abaixo um exemplo de implementação em Java utilizando o Padrão Adapter.<br> Este exemplo mostra como adaptar uma interface de reprodutor de áudio para tocar arquivos WAV</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReprodutorDeAudio</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">tocar</span><span class="token punctuation">(</span><span class="token class-name">String</span> arquivo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReprodutorWAV</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tocarWAV</span><span class="token punctuation">(</span><span class="token class-name">String</span> arquivo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Tocando arquivo WAV: &quot;</span> <span class="token operator">+</span> arquivo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReprodutorWAVAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">ReprodutorDeAudio</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ReprodutorWAV</span> reprodutorWAV<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ReprodutorWAVAdapter</span><span class="token punctuation">(</span><span class="token class-name">ReprodutorWAV</span> reprodutorWAV<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>reprodutorWAV <span class="token operator">=</span> reprodutorWAV<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tocar</span><span class="token punctuation">(</span><span class="token class-name">String</span> arquivo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        reprodutorWAV<span class="token punctuation">.</span><span class="token function">tocarWAV</span><span class="token punctuation">(</span>arquivo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cliente</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ReprodutorDeAudio</span> reprodutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReprodutorWAVAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReprodutorWAV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        reprodutor<span class="token punctuation">.</span><span class="token function">tocar</span><span class="token punctuation">(</span><span class="token string">&quot;musica.wav&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Neste exemplo, a interface <em>ReprodutorDeAudio</em> é a interface esperada pela aplicação. A classe <em>ReprodutorWAV</em> é a classe que precisa ser adaptada. O <em>ReprodutorWAVAdapter</em> é o adaptador que faz a adaptação entre as duas interfaces.</li></ul><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade"><span>Aplicabilidade</span></a></h2><p>Use o padrão quando:</p><ul><li>Você não quiser que seu código dependa diretamente de código de terceiros ou legado.</li><li>Você quiser usar uma classe existente , mas sua interface for incopampatível com sua interface que seu código ou domínio precisam.</li><li>Você quiser reutilizar várias subclasses que não possuam determinada funcionalidade mas for impraticável estender o código de cada uma apenas para adicionar a funcionalidade desejada ( o Decorator também faz isso)</li></ul><h2 id="observacoes" tabindex="-1"><a class="header-anchor" href="#observacoes"><span>Observações</span></a></h2><p>O padrão Adapter é bastante comum no código Java. É frequentemente usado em sistemas baseados em algum código legado. Nesses casos, os adaptadores criam código legado com classes modernas.</p><p>Existem alguns adapters padrão nas bibliotecas principais do Java:</p><p>java.util.Arrays#asList()<br> java.util.Collections#list()<br> java.util.Collections#enumeration()<br> java.io.InputStreamReader(InputStream) (retorna um objeto Reader)<br> java.io.OutputStreamWriter(OutputStream) (retorna um objeto Writer)<br> javax.xml.bind.annotation.adapters.XmlAdapter#marshal() e #unmarshal ()</p><h2 id="exemplo-de-implementacao-2" tabindex="-1"><a class="header-anchor" href="#exemplo-de-implementacao-2"><span>Exemplo de Implementação 2</span></a></h2><p>Segue exemplo onde se tem um controle de Xbox e quer usá-lo para jogar em um PS4, utilizando um adaptador para mapear os controles.</p><ul><li>Interface do Controle do Xbox<br><strong>Esta interface define os métodos que um controle do Xbox deve implementar. Cada método corresponde a um botão no controle do Xbox.</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">XboxController</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">pressA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">pressB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">pressX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">pressY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Implementação do Controle do Xbox<br><strong>Esta classe implementa a interface XboxController e define o comportamento de cada botão do controle do Xbox.</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XboxControllerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">XboxController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pressA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Botão A pressionado no controle do Xbox.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pressB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Botão B pressionado no controle do Xbox.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pressX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Botão X pressionado no controle do Xbox.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pressY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Botão Y pressionado no controle do Xbox.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Interface do Controle do PS4<br><strong>Esta interface define os métodos que um controle do PS4 deve implementar. Cada método corresponde a um botão no controle do PS4.</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PS4Controller</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">pressSquare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">pressCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">pressTriangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">pressCross</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Implementação do Controle do PS4<br><strong>Esta classe implementa a interface PS4Controller e define o comportamento de cada botão do controle do PS4.</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PS4ControllerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">PS4Controller</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pressSquare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Botão Quadrado pressionado no controle do PS4.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pressCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Botão Círculo pressionado no controle do PS4.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pressTriangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Botão Triângulo pressionado no controle do PS4.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pressCross</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Botão Cruz pressionado no controle do PS4.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Adaptador<br><strong>O adaptador XboxToPS4Adapter implementa a interface PS4Controller, mas internamente usa um objeto XboxController. Cada método da interface PS4Controller é mapeado para o método correspondente do XboxController. Por exemplo, quando pressSquare() é chamado, ele chama pressX() no controle do Xbox.</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XboxToPS4Adapter</span> <span class="token keyword">implements</span> <span class="token class-name">PS4Controller</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">XboxController</span> xboxController<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">XboxToPS4Adapter</span><span class="token punctuation">(</span><span class="token class-name">XboxController</span> xboxController<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>xboxController <span class="token operator">=</span> xboxController<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pressSquare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        xboxController<span class="token punctuation">.</span><span class="token function">pressX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pressCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        xboxController<span class="token punctuation">.</span><span class="token function">pressB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pressTriangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        xboxController<span class="token punctuation">.</span><span class="token function">pressY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pressCross</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        xboxController<span class="token punctuation">.</span><span class="token function">pressA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Uso do adaptador no jogo<br><strong>Neste exemplo, criamos uma instância de XboxControllerImpl e a passamos para o adaptador XboxToPS4Adapter. Depois, usamos o adaptador como se fosse um controle do PS4. Quando chamamos os métodos do adaptador, ele redireciona as chamadas para os métodos correspondentes do controle do Xbox.</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">XboxController</span> xboxController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XboxControllerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PS4Controller</span> ps4Adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XboxToPS4Adapter</span><span class="token punctuation">(</span>xboxController<span class="token punctuation">)</span><span class="token punctuation">;</span>

        ps4Adapter<span class="token punctuation">.</span><span class="token function">pressSquare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ps4Adapter<span class="token punctuation">.</span><span class="token function">pressCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ps4Adapter<span class="token punctuation">.</span><span class="token function">pressTriangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ps4Adapter<span class="token punctuation">.</span><span class="token function">pressCross</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li></li><li>O padrão Adapter permite que você use um controle do Xbox em um sistema que espera um controle do PS4, sem precisar modificar o código existente que usa o controle do PS4. O adaptador faz a tradução entre as interfaces, permitindo que os dois sistemas trabalhem juntos.</li></ul><h2 id="uml-da-implementacao" tabindex="-1"><a class="header-anchor" href="#uml-da-implementacao"><span>Uml da implementação</span></a></h2>`,50)),t(s,{id:"mermaid-219",code:"eJxLzkksLnbJTEwvSszlUgACsIBCRFJ+hXN+XklRfk5OapFCNVgKBLQLilKLix01NNFEnDBEIjBEIqEitVw4bfLMLcihpW0BwSZ4vBVcWJpYlIphknNmUXIOpnBIUWZiXjoWCeei/OJigrZj9SqtXQAK7ZB8oDscUxILSlCCQBctzitQuHRzJ5orbGp0dbGkEbBS1MgEq8QIYVwK0QMCbjdK6Ojq2qFZzgUAmkDnUg=="}),a[1]||(a[1]=n('<h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Consequências</span></a></h2><h3 id="bom" tabindex="-1"><a class="header-anchor" href="#bom"><span>Bom</span></a></h3><ul><li>Desacopla o código da aplicação de codigos terceiros</li><li>Aplica o SRP ao separar a conversão de interfaces da lógica da aplicação</li><li>Aplica o OCP ao permitir introduzir novos Adapters para código existente</li></ul><h3 id="ruim" tabindex="-1"><a class="header-anchor" href="#ruim"><span>Ruim</span></a></h3><ul><li>A complexidade geral do código aumenta porque você precisa introduzir um conjunto de novas interfaces e classes. Algumas vezes é mais simples mudar a classe serviço para que ela se adeque com o resto do seu código.</li></ul><h2 id="relacoes-com-os-demais-padroes" tabindex="-1"><a class="header-anchor" href="#relacoes-com-os-demais-padroes"><span>Relações com os demais padrões</span></a></h2><ul><li><p>O Bridge é geralmente definido com antecedência, permitindo que você desenvolva partes de uma aplicação independentemente umas das outras. Por outro lado, o Adapter é comumente usado em aplicações existentes para fazer com que classes incompatíveis trabalhem bem juntas.</p></li><li><p>O Adapter fornece uma interface completamente diferente para acessar um objeto existente. Por outro lado, com o padrão Decorator, a interface permanece a mesma ou é estendida. Além disso, o Decorator oferece suporte à composição recursiva, o que não é possível quando você usa o Adapter.</p></li><li><p>Com Adapter, você acessa um objeto existente por meio de uma interface diferente. Com Proxy, a interface permanece a mesma. Com Decorator, você acessa o objeto por meio de uma interface aprimorada.</p></li><li><p>O Facade define uma nova interface para objetos existentes, enquanto que o Adapter tenta fazer uma interface existente ser utilizável. O Adapter geralmente envolve apenas um objeto, enquanto que o Facade trabalha com um inteiro subsistema de objetos.</p></li><li><p>O Bridge, State, Strategy (e de certa forma o Adapter) têm estruturas muito parecidas. De fato, todos esses padrões estão baseados em composição, o que é delegar o trabalho para outros objetos. Contudo, eles todos resolvem problemas diferentes. Um padrão não é apenas uma receita para estruturar seu código de uma maneira específica. Ele também pode comunicar a outros desenvolvedores o problema que o padrão resolve.</p></li></ul>',7))])}const m=e(c,[["render",l],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/includes/seminario-2-Arlei10/","title":"Adapter","lang":"pt-BR","frontmatter":{"description":"Adapter Intenção Converter a interface de uma classe em outra interface esparada pelos clientes. O Adapter permite que certas classes trabalhem em conjunto, pois de outra forma ...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/includes/seminario-2-Arlei10/"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Adapter"}],["meta",{"property":"og:description","content":"Adapter Intenção Converter a interface de uma classe em outra interface esparada pelos clientes. O Adapter permite que certas classes trabalhem em conjunto, pois de outra forma ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/user-attachments/assets/5198047c-b23c-45e6-9785-92bff3c0df11"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Adapter\\",\\"image\\":[\\"https://github.com/user-attachments/assets/5198047c-b23c-45e6-9785-92bff3c0df11\\",\\"https://github.com/user-attachments/assets/d7e08d6b-0a92-4a4b-a40c-92cfd6352d56\\",\\"https://github.com/user-attachments/assets/eff20590-ca2a-41d8-9494-32b779b17026\\",\\"https://github.com/user-attachments/assets/53c663da-e7b7-4d18-985c-e4e9f3361b9a\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Sobre o adapter","slug":"sobre-o-adapter","link":"#sobre-o-adapter","children":[]},{"level":2,"title":"Problema","slug":"problema","link":"#problema","children":[]},{"level":2,"title":"Solução","slug":"solucao","link":"#solucao","children":[]},{"level":2,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[{"level":3,"title":"Composição","slug":"composicao","link":"#composicao","children":[]},{"level":3,"title":"Herança Multipla","slug":"heranca-multipla","link":"#heranca-multipla","children":[]}]},{"level":2,"title":"Exemplo de Implementação","slug":"exemplo-de-implementacao","link":"#exemplo-de-implementacao","children":[]},{"level":2,"title":"Aplicabilidade","slug":"aplicabilidade","link":"#aplicabilidade","children":[]},{"level":2,"title":"Observações","slug":"observacoes","link":"#observacoes","children":[]},{"level":2,"title":"Exemplo de Implementação 2","slug":"exemplo-de-implementacao-2","link":"#exemplo-de-implementacao-2","children":[]},{"level":2,"title":"Uml da implementação","slug":"uml-da-implementacao","link":"#uml-da-implementacao","children":[]},{"level":2,"title":"Consequências","slug":"consequencias","link":"#consequencias","children":[{"level":3,"title":"Bom","slug":"bom","link":"#bom","children":[]},{"level":3,"title":"Ruim","slug":"ruim","link":"#ruim","children":[]}]},{"level":2,"title":"Relações com os demais padrões","slug":"relacoes-com-os-demais-padroes","link":"#relacoes-com-os-demais-padroes","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.75,"words":1726},"filePathRelative":"includes/seminario-2-Arlei10/README.md","autoDesc":true}');export{m as comp,k as data};
