import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as t}from"./app-BrOvOMMH.js";const o={};function i(p,s){return t(),n("div",null,s[0]||(s[0]=[e(`<h1 id="ppr-visitor-por-joao-augusto" tabindex="-1"><a class="header-anchor" href="#ppr-visitor-por-joao-augusto"><span>PPR--Visitor por João Augusto</span></a></h1><h3 id="intencao-o-padrao-visitor-e-util-quando-voce-precisa-executar" tabindex="-1"><a class="header-anchor" href="#intencao-o-padrao-visitor-e-util-quando-voce-precisa-executar"><span>Intenção O padrão Visitor é útil quando você precisa executar</span></a></h3><p>várias operações em uma estrutura de objetos que possui uma hierarquia comum, mas deseja evitar sobrecarregar essas classes com novos métodos. Em vez disso, você cria um Visitor que contém as operações e permite que os objetos da hierarquia &quot;aceitem&quot; o visitante. Assim, cada vez que uma nova operação é necessária, você adiciona um novo Visitor, sem modificar a estrutura dos objetos.</p><h4 id="como-funciona" tabindex="-1"><a class="header-anchor" href="#como-funciona"><span><em>Como Funciona</em></span></a></h4><ul><li>Elemento (Element): É a interface ou classe abstrata que define um método accept(Visitor) para &quot;aceitar&quot; um visitante.</li><li>Visitor: É uma interface que define uma série de métodos de visitação, um para cada tipo de elemento (ex: visit(ElementA), visit(ElementB)).</li><li>Elemento Concreto (ConcreteElement): As classes concretas que implementamaccept(Visitor), delegando a operação específica ao método do visitante.</li><li>Visitante Concreto (ConcreteVisitor): Implementa os métodos de Visitor, realizando as operações específicas sobre cada tipo de elemento.</li></ul><p>Cada Elemento Concreto (como ElementA e ElementB) &quot;aceita&quot; o Visitor e, dentro do método accept, chama o método visit correspondente, delegando a operação ao visitante.</p><h3 id="tambem-conhecido-como-double-dispatch" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como-double-dispatch"><span>Também conhecido como - Double Dispatch</span></a></h3><h3 id="motivacao-ao-inves-de-embutir-a-logica-em-multiplas-classes-o-visitor-oferece-uma-maneira-de-centralizar-essas-operacoes-isolando-as-da-estrutura-das-classes-que-elas-manipulam-isso-facilita-a-adicao-de-novos-comportamentos-sem-alterar-a-estrutura-existente" tabindex="-1"><a class="header-anchor" href="#motivacao-ao-inves-de-embutir-a-logica-em-multiplas-classes-o-visitor-oferece-uma-maneira-de-centralizar-essas-operacoes-isolando-as-da-estrutura-das-classes-que-elas-manipulam-isso-facilita-a-adicao-de-novos-comportamentos-sem-alterar-a-estrutura-existente"><span>Motivação Ao invés de embutir a lógica em múltiplas classes, o Visitor oferece uma maneira de centralizar essas operações, isolando-as da estrutura das classes que elas manipulam. Isso facilita a adição de novos comportamentos sem alterar a estrutura existente.</span></a></h3><h3 id="aplicabilidade-use-quando-precisa-adicionar-frequentemente-novas-operacoes-em-uma-hierarquia-de-classes-deseja-evitar-a-poluicao-das-classes-com-multiplos-metodos-diferentes" tabindex="-1"><a class="header-anchor" href="#aplicabilidade-use-quando-precisa-adicionar-frequentemente-novas-operacoes-em-uma-hierarquia-de-classes-deseja-evitar-a-poluicao-das-classes-com-multiplos-metodos-diferentes"><span>Aplicabilidade Use quando: - Precisa adicionar frequentemente novas operações em uma hierarquia de classes. - Deseja evitar a poluição das classes com múltiplos métodos diferentes.</span></a></h3><h3 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h3><h4 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h4><ul><li><strong>Visitor</strong>: Define as operações a serem realizadas nos elementos.</li><li><strong>ConcreteVisitor</strong>: Implementa as operações para os elementos concretos.</li><li><strong>Element</strong>: Declara um método para aceitar um Visitor.</li><li><strong>ConcreteElement</strong>: Implementa a interface <code>Element</code> e aceita um Visitor.</li></ul><h4 id="diagrama-do-padrao-de-projeto-visitor" tabindex="-1"><a class="header-anchor" href="#diagrama-do-padrao-de-projeto-visitor"><span>Diagrama do padrão de projeto Visitor:</span></a></h4><img src="https://www.plantuml.com/plantuml/svg/ZL5B2i8m4DtFAMRP8hc0YCIALt0VfYC4qbIIqKtrxj9FOlrKN6LuytvCT1GJvD8uq6b2wuN3oH3ZqKOhRS0ELzT-B0wE6_QoA-4Lg4gy0v0pCUA-zHHOU5cCtyJFr0dkXOQ8pr9CLhEGvFKFgLeWfOARcr8VhLE9OPdJvYXa-xnMQfjkjiRtn4p_nGBDlXw-OtmV" alt="uml diagram" loading="lazy"><p>Esse diagrama representa a interação entre o <code>Visitor</code>, os elementos que ele visita (<code>ElementA</code> e <code>ElementB</code>), e o visitante concreto (<code>ConcreteVisitor</code>) que implementa a lógica de visitação.</p><h3 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes"><span>Colaborações</span></a></h3><ul><li>O <code>Visitor</code> é passado a cada <code>Element</code>, permitindo a execução de uma operação sem que o <code>Element</code> precise conhecer os detalhes da operação.</li></ul><h3 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Consequências</span></a></h3><ul><li><strong>Vantagens</strong>:</li><li>Facilita a adição de novas operações, permitindo maior flexibilidade.</li><li>Agrupa operações relacionadas e separa operações não relacionadas: reduz espalhamento de funcionalidades e embaralhamento.</li><li><strong>Desvantagens</strong>: <ul><li>Dificulta a adição de novos tipos de elementos, pois todos os visitantes existentes precisam ser atualizados.</li><li>Quebra de encapsulamento: métodos e dados usados pelo visitor têm de estar acessíveis.</li></ul></li></ul><h3 id="exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo"><span>Exemplo de Código</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ElementA</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ElementB</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteVisitor</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ElementA</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// Lógica específica para ElementA }</span>

<span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ElementB</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// Lógica específica para ElementB } }</span>

<span class="token keyword">interface</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ElementA</span> <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ElementB</span> <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Aqui, os elementos (ElementA e ElementB) aceitam um visitante (Visitor), que executa operações distintas dependendo do tipo de elemento.</p><h3 id="meu-exemplo" tabindex="-1"><a class="header-anchor" href="#meu-exemplo"><span>Meu exemplo</span></a></h3><p>Cenário: Temos uma estrutura de classes que representa diferentes tipos de elementos de uma loja, como Livro e Música. Vamos usar o padrão Visitor para calcular o preço total dos itens e para exibir detalhes.</p><h4 id="diagrama" tabindex="-1"><a class="header-anchor" href="#diagrama"><span>Diagrama</span></a></h4><img src="https://www.plantuml.com/plantuml/svg/lLAx2i8m5Dtp5NTiAUq758SkRWe5nJssiGJIH9BRBkg_crTVe8vEDpdSy-0abK6gSUW58LmYqpVQCDWBrZE92XwGsJktAyd83KUbIxY4GmglDIMYZk4tBKFmKQiI3cwa2zmFXZUqXAEVNgOHr9YmQ0Lov3W8opoXvhA3_AvPOw-j6gw2GTOnh1sIf1D677RsB0T6tk_emJE4-BEf5reAor4X5VNMxsE9v6k9FiiiiuHqflDhxfv54LlUOh65APB7rY59nMJh_aYSRm00" alt="startuml" loading="lazy"><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token comment">// Elemento</span>
<span class="token keyword">interface</span> <span class="token class-name">Elemento</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> aceitar <span class="token punctuation">(</span> <span class="token class-name">Visitor</span> visitante <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

<span class="token comment">// Visitante</span>
<span class="token keyword">interface</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token function">visitar</span><span class="token punctuation">(</span><span class="token class-name">Livro</span> livro<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span>
<span class="token function">visitar</span><span class="token punctuation">(</span><span class="token class-name">Musica</span> musica<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Livro</span> <span class="token keyword">implements</span> <span class="token class-name">Elemento</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> <span class="token class-name">String</span> titulo<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">double</span> preco<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">Livro</span><span class="token punctuation">(</span><span class="token class-name">String</span> titulo<span class="token punctuation">,</span> <span class="token keyword">double</span> preco<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>titulo <span class="token operator">=</span> titulo<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>preco <span class="token operator">=</span> preco<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPreco</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> preco<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTitulo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> titulo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

\\<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aceitar</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitante<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  visitante<span class="token punctuation">.</span><span class="token function">visitar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Musica</span> <span class="token keyword">implements</span> <span class="token class-name">Elemento</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> titulo<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">double</span> preco<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">Musica</span><span class="token punctuation">(</span><span class="token class-name">String</span> titulo<span class="token punctuation">,</span> <span class="token keyword">double</span> preco<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>titulo <span class="token operator">=</span> titulo<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>preco <span class="token operator">=</span> preco<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPreco</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> preco<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTitulo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> titulo<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>

\\<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">aceitar</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitante<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  visitante<span class="token punctuation">.</span><span class="token function">visitar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PrecoVisitor</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">double</span> totalPreco<span class="token punctuation">;</span>

\\<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitar</span><span class="token punctuation">(</span><span class="token class-name">Livro</span> livro<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  totalPreco <span class="token operator">+=</span> livro<span class="token punctuation">.</span><span class="token function">getPreco</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Visitando livro: &quot;</span> <span class="token operator">+</span> livro<span class="token punctuation">.</span><span class="token function">getTitulo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, Preço: &quot;</span> <span class="token operator">+</span> livro<span class="token punctuation">.</span><span class="token function">getPreco</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

\\<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitar</span><span class="token punctuation">(</span><span class="token class-name">Musica</span> musica<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  totalPreco <span class="token operator">+=</span> musica<span class="token punctuation">.</span><span class="token function">getPreco</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Visitando música: &quot;</span> <span class="token operator">+</span> musica<span class="token punctuation">.</span><span class="token function">getTitulo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, Preço: &quot;</span> <span class="token operator">+</span> musica<span class="token punctuation">.</span><span class="token function">getPreco</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTotalPreco</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> totalPreco<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Loja</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Elemento</span><span class="token punctuation">&gt;</span></span> elementos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    elementos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Livro</span><span class="token punctuation">(</span><span class="token string">&quot;Java Completo&quot;</span><span class="token punctuation">,</span> <span class="token number">49.90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    elementos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Musica</span><span class="token punctuation">(</span><span class="token string">&quot;Graduation&quot;</span><span class="token punctuation">,</span> <span class="token number">35.00</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">PrecoVisitor</span> precoVisitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrecoVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Elemento</span> elemento <span class="token operator">:</span> elementos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  elemento<span class="token punctuation">.</span><span class="token function">aceitar</span><span class="token punctuation">(</span>precoVisitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>\\&quot;<span class="token class-name">Pre</span>ço total<span class="token operator">:</span> \\&quot; <span class="token operator">+</span> precoVisitor<span class="token punctuation">.</span><span class="token function">getTotalPreco</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="explicacao" tabindex="-1"><a class="header-anchor" href="#explicacao"><span>Explicação</span></a></h4><ul><li>Elemento: Define a interface Elemento que tem um método aceitar para receber um visitante.</li><li>Visitante: Define a interface Visitor com métodos para visitar diferentes tipos de elementos.</li><li>Classes Concretas: Livro e Musica implementam Elemento e aceitam um visitante.</li><li>Visitante Concreto: PrecoVisitor implementa Visitor e calcula o preço total, além de imprimir detalhes dos itens.</li><li>Uso: Na classe Loja, instanciamos os elementos e usamos o visitante para calcular o preço total.</li></ul>`,29)]))}const u=a(o,[["render",i],["__file","Visitor.html.vue"]]),r=JSON.parse('{"path":"/includes/seminario-2-JoaoAugustoMPdJ/Seminario-3/Visitor.html","title":"PPR--Visitor por João Augusto","lang":"pt-BR","frontmatter":{"description":"PPR--Visitor por João Augusto Intenção O padrão Visitor é útil quando você precisa executar várias operações em uma estrutura de objetos que possui uma hierarquia comum, mas des...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/includes/seminario-2-JoaoAugustoMPdJ/Seminario-3/Visitor.html"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"PPR--Visitor por João Augusto"}],["meta",{"property":"og:description","content":"PPR--Visitor por João Augusto Intenção O padrão Visitor é útil quando você precisa executar várias operações em uma estrutura de objetos que possui uma hierarquia comum, mas des..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PPR--Visitor por João Augusto\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":3,"title":"Intenção O padrão Visitor é útil quando você precisa executar","slug":"intencao-o-padrao-visitor-e-util-quando-voce-precisa-executar","link":"#intencao-o-padrao-visitor-e-util-quando-voce-precisa-executar","children":[]},{"level":3,"title":"Também conhecido como - Double Dispatch","slug":"tambem-conhecido-como-double-dispatch","link":"#tambem-conhecido-como-double-dispatch","children":[]},{"level":3,"title":"Motivação Ao invés de embutir a lógica em múltiplas classes, o Visitor oferece uma maneira de centralizar essas operações, isolando-as da estrutura das classes que elas manipulam. Isso facilita a adição de novos comportamentos sem alterar a estrutura existente.","slug":"motivacao-ao-inves-de-embutir-a-logica-em-multiplas-classes-o-visitor-oferece-uma-maneira-de-centralizar-essas-operacoes-isolando-as-da-estrutura-das-classes-que-elas-manipulam-isso-facilita-a-adicao-de-novos-comportamentos-sem-alterar-a-estrutura-existente","link":"#motivacao-ao-inves-de-embutir-a-logica-em-multiplas-classes-o-visitor-oferece-uma-maneira-de-centralizar-essas-operacoes-isolando-as-da-estrutura-das-classes-que-elas-manipulam-isso-facilita-a-adicao-de-novos-comportamentos-sem-alterar-a-estrutura-existente","children":[]},{"level":3,"title":"Aplicabilidade Use quando: - Precisa adicionar frequentemente novas operações em uma hierarquia de classes. - Deseja evitar a poluição das classes com múltiplos métodos diferentes.","slug":"aplicabilidade-use-quando-precisa-adicionar-frequentemente-novas-operacoes-em-uma-hierarquia-de-classes-deseja-evitar-a-poluicao-das-classes-com-multiplos-metodos-diferentes","link":"#aplicabilidade-use-quando-precisa-adicionar-frequentemente-novas-operacoes-em-uma-hierarquia-de-classes-deseja-evitar-a-poluicao-das-classes-com-multiplos-metodos-diferentes","children":[]},{"level":3,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[]},{"level":3,"title":"Colaborações","slug":"colaboracoes","link":"#colaboracoes","children":[]},{"level":3,"title":"Consequências","slug":"consequencias","link":"#consequencias","children":[]},{"level":3,"title":"Exemplo de Código","slug":"exemplo-de-codigo","link":"#exemplo-de-codigo","children":[]},{"level":3,"title":"Meu exemplo","slug":"meu-exemplo","link":"#meu-exemplo","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.9,"words":870},"filePathRelative":"includes/seminario-2-JoaoAugustoMPdJ/Seminario-3/Visitor.md","autoDesc":true}');export{u as comp,r as data};
