import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as p,c as r,a as n,b as s,d as o,e as t}from"./app-COmlyzQy.js";const l={},d={href:"https://imgur.com/BcOp0uB",target:"_blank",rel:"noopener noreferrer"},u={href:"https://imgur.com/SA6Niz4",target:"_blank",rel:"noopener noreferrer"};function m(k,a){const e=c("ExternalLinkIcon");return p(),r("div",null,[a[4]||(a[4]=n('<h1 id="abstract-factory" tabindex="-1"><a class="header-anchor" href="#abstract-factory"><span>Abstract Factory</span></a></h1><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><p>A implementação do padrão de projeto Abstract Factory consiste em fornecer uma interface para criação de famílias de objetos relacionados ou dependentes, sem especificar suas classes concretas. Para isso, ele pode ser composto por vários Factory Methods.</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como"><span>Também conhecido como</span></a></h2><ul><li>Factory of Factories</li><li>Virtual Constructor</li><li>Product Family Creator</li></ul><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><p>Existem situações em que um sistema precisa entregar para o cliente objetos compatíveis entre si. Codificar diretamente a criação desses objetos nas classes que os utilizam pode levar a várias complicações:</p><ul><li>se a criação dos objetos estiver diretamente codificada nas classes que utilizam esses objetos, o código dessas classes pode se tornar excessivamente complexo e difícil de manter, especialmente se o sistema precisar suportar diferentes famílias de produtos;</li><li>diferentes conjuntos de produtos podem ser mais apropriados em diferentes situações. Codificar diretamente a criação de produtos específicos limita a capacidade de trocar ou adicionar novos conjuntos de produtos sem alterar o código existente;</li><li>adicionar novos produtos ou variantes pode ser desafiador se a criação dos produtos for parte integrante da lógica de uma classe cliente.</li></ul><p>O padrão <strong>Abstract Factory</strong> busca definir uma interface para criar famílias de objetos relacionados, sem especificar suas classes concretas, abstraindo o processo de instanciação de objetos.</p><h3 id="o-que-sao-fabricas-e-produtos" tabindex="-1"><a class="header-anchor" href="#o-que-sao-fabricas-e-produtos"><span>O que são fábricas e produtos?</span></a></h3><p>Fábricas são <em><strong>operações</strong></em> que criam <em><strong>objetos</strong></em>. Ou seja, uma função que cria um objeto é uma fábrica. Produtos são os objetos que são retornados pelo método de fabricação (FACTORY METHOD).</p><h3 id="exemplo" tabindex="-1"><a class="header-anchor" href="#exemplo"><span>Exemplo</span></a></h3>',12)),s("p",null,[a[1]||(a[1]=s("img",{src:"https://i.imgur.com/BcOp0uB.png",alt:"Diagrama GUI",loading:"lazy"},null,-1)),s("a",d,[a[0]||(a[0]=o("Imgur")),t(e)])]),a[5]||(a[5]=n('<p>Imagine que estamos desenvolvendo uma aplicação que precisa gerar interfaces de usuário para diferentes plataformas, como Windows e Linux. A criação desses elementos de interface varia entre as plataformas, e a aplicação deve suportar essas variações sem alterar seu código central. Utilizando esse padrão de projeto, os participantes irão atuar da seguinte maneira:</p><ul><li><strong>AbstractFactory:</strong> define uma interface para criar produtos de uma família de produtos relacionados, por exemplo, GUIFactory pode ser a fábrica abstrata que cria componentes de interface como botões e formulários;</li><li><strong>ConcreteFactory:</strong> implementa a interface da GUIFactory para criar produtos concretos específicos para uma plataforma. Por exemplo, FactoryWindows cria botões e formulários específicos para Windows, enquanto FactoryLinux faz o mesmo para Linux;</li><li><strong>AbstractProduct:</strong> define uma interface para um tipo de produto, por exemplo, Botao e Form podem ser interfaces que definem os métodos que todos os botões e caixas de diálogo devem implementar;</li><li><strong>ConcreteProduct:</strong> implementa a interface dos produtos abstratos. Por exemplo, BotaoWindows e BotaoLinux são implementações concretas para botões no Windows e Linux, respectivamente;</li><li><strong>Client:</strong> utiliza apenas a interface da GUIFactory e dos produtos abstratos, permitindo a criação de produtos sem conhecer suas classes concretas. A classe cliente, por exemplo, Application, pode usar a fábrica para criar e interagir com botões e formulários sem saber se está no Windows ou Linux.</li></ul><p>Dependendo da plataforma alvo, a fábrica concreta (FactoryWindows ou FactoryLinux) será instanciada, e a aplicação criará seus componentes de interface utilizando a fábrica adequada.</p><p>Assim, ao utilizar o padrão Abstract Factory, o sistema é capaz de criar famílias de produtos relacionados de forma flexível e extensível, facilitando a adição de novos produtos e variações sem modificar o código cliente.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade"><span>Aplicabilidade</span></a></h2><p>A utilização do padrão de projeto Abstract Factory é ideal para quando há uma necessidade de restringir que objetos de tipos incompatíveis atuem na mesma família. Nesse caso, uma fábrica produzirá apenas objetos do mesmo tipo.</p><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h2><figure><img src="https://www.dofactory.com/img/diagrams/net/abstract.png" alt="diagrama livro" tabindex="0" loading="lazy"><figcaption>diagrama livro</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h2><ul><li><p><strong>AbstractFactory</strong></p><ul><li>define uma interface para criar objetos de um tipo de família de produtos;</li><li>pode incluir métodos para criar diferentes tipos de produtos relacionados, garantindo que os produtos criados pertençam à mesma família.</li></ul></li><li><p><strong>ConcreteFactory</strong></p><ul><li>implementa a interface AbstractFactory e cria as instâncias concretas dos produtos. Cada ConcreteFactory é responsável por criar uma família específica de produtos.</li></ul></li><li><p><strong>AbstractProduct</strong></p><ul><li>declara uma interface para um tipo de produto específico;</li><li>pode incluir métodos que definem o comportamento ou as propriedades dos produtos dessa categoria.</li></ul></li><li><p><strong>ConcreteProduct</strong></p><ul><li>implementa a interface AbstractProduct. Cada ConcreteProduct representa uma implementação específica de um produto na família que a ConcreteFactory cria.</li></ul></li><li><p><strong>Client</strong></p><ul><li>usa apenas as interfaces definidas pelos AbstractFactory e AbstractProduct. O cliente pode trabalhar com qualquer ConcreteFactory e seus respectivos ConcreteProducts sem precisar conhecer os detalhes específicos de suas implementações.</li></ul></li></ul><h2 id="outro-exemplo-meu-exemplo" tabindex="-1"><a class="header-anchor" href="#outro-exemplo-meu-exemplo"><span>Outro exemplo / Meu exemplo</span></a></h2><h3 id="jogo-da-segunda-guerra-mundial" tabindex="-1"><a class="header-anchor" href="#jogo-da-segunda-guerra-mundial"><span>Jogo da Segunda Guerra Mundial</span></a></h3>',12)),s("p",null,[a[3]||(a[3]=s("img",{src:"https://i.imgur.com/SA6Niz4.png",alt:"Meu Exemplo",loading:"lazy"},null,-1)),s("a",u,[a[2]||(a[2]=o("Imgur")),t(e)])]),a[6]||(a[6]=n(`<h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Consequências</span></a></h2><h3 id="pros" tabindex="-1"><a class="header-anchor" href="#pros"><span>Prós</span></a></h3><ul><li>Compatibilidade entre objetos <ul><li>Todos os objetos instanciados pelo método Abstract Factory são compatíveis, pois eles vem de uma herança abstrata única.</li></ul></li><li>Evita o Acoplamento entre objetos externos <ul><li>Ao utilizar uma classe abstrata para instanciar os objetos, os objetos não necessitam ter relações entre si</li></ul></li><li>Muito aderente ao SOLID <ul><li>Objetos ficam fechados para alteração, mas abertos para expansão (OCP)</li><li>Separa o codigo que cria (fábricas) do codigo que utiliza os objetos (cliente) (SRP)</li></ul></li></ul><h3 id="contras" tabindex="-1"><a class="header-anchor" href="#contras"><span>Contras</span></a></h3><ul><li>Complexidade <ul><li>O uso do Abstract Factory pode levar a um aumento significativo no número de classes no sistema, o que pode tornar o projeto mais difícil de gerenciar e compreender. Implementar esse padrão pode adicionar complexidade ao código devido à necessidade de criar múltiplas classes e interfaces para cada família de objetos.</li></ul></li><li>Manutenção <ul><li>Com o crescimento do sistema, a manutenção de múltiplas fábricas e suas implementações pode se tornar onerosa e difícil de gerenciar, já que qualquer mudança em uma família de objetos pode exigir alterações em todas as fábricas relacionadas. Além disso, o código cliente fica rigidamente acoplado às fábricas abstratas, pois a lógica de criação de objetos é delegada a fábricas, o que pode afetar a eficiência e flexibilidade do projeto.</li></ul></li></ul><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao"><span>Implementação</span></a></h2><p>No padrão Abstract Factory, as interfaces são essenciais para garantir que as fábricas e os produtos permaneçam desacoplados. O objetivo é permitir que o sistema crie famílias de objetos relacionados sem depender das classes concretas.</p><h3 id="definicao-das-interfaces" tabindex="-1"><a class="header-anchor" href="#definicao-das-interfaces"><span>Definição das Interfaces</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Interface para os produtos</span>
<span class="token keyword">interface</span> <span class="token class-name">Botao</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Form</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Interface para a fábrica abstrata</span>
<span class="token keyword">interface</span> <span class="token class-name">GUIFactory</span> <span class="token punctuation">{</span>
    <span class="token class-name">Botao</span> <span class="token function">createBotao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Form</span> <span class="token function">createForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="implementacoes-concretas-para-duas-familias-diferentes-de-produtos" tabindex="-1"><a class="header-anchor" href="#implementacoes-concretas-para-duas-familias-diferentes-de-produtos"><span>Implementações concretas para duas famílias diferentes de produtos</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Implementações concretas para a família Windows</span>
<span class="token keyword">class</span> <span class="token class-name">BotaoWindows</span> <span class="token keyword">implements</span> <span class="token class-name">Botao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Renderizando botão estilo Windows.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">FormWindows</span> <span class="token keyword">implements</span> <span class="token class-name">Form</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Renderizando formulario estilo Windows.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Implementações concretas para a família Linux</span>
<span class="token keyword">class</span> <span class="token class-name">BotaoLinux</span> <span class="token keyword">implements</span> <span class="token class-name">Botao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Renderizando botão estilo Linux.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">FormLinux</span> <span class="token keyword">implements</span> <span class="token class-name">Form</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Renderizando formulario estilo Linux.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fabricas-concretas-que-criam-os-produtos-especificos" tabindex="-1"><a class="header-anchor" href="#fabricas-concretas-que-criam-os-produtos-especificos"><span>Fábricas concretas que criam os produtos específicos</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Fábrica concreta para Windows</span>
<span class="token keyword">class</span> <span class="token class-name">FactoryWindows</span> <span class="token keyword">implements</span> <span class="token class-name">GUIFactory</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Botao</span> <span class="token function">createBotao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BotaoWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Form</span> <span class="token function">createForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FormWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Fábrica concreta para Linux</span>
<span class="token keyword">class</span> <span class="token class-name">FactoryLinux</span> <span class="token keyword">implements</span> <span class="token class-name">GUIFactory</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Botao</span> <span class="token function">createBotao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BotaoLinux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Form</span> <span class="token function">createForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FormLinux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aplicacao" tabindex="-1"><a class="header-anchor" href="#aplicacao"><span>Aplicação</span></a></h3><p>Agora, a classe Application será responsável por interagir com a fábrica abstrata. Ela não precisa conhecer as classes concretas dos produtos, apenas as interfaces.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">GUIFactory</span> factory<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Botao</span> button<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Form</span> formulario<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token class-name">GUIFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>button <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createBotao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>formulario <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">renderUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        button<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        formulario<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exemplo-de-uso" tabindex="-1"><a class="header-anchor" href="#exemplo-de-uso"><span>Exemplo de Uso</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Escolhe qual fábrica utilizar em tempo de execução</span>
        <span class="token class-name">GUIFactory</span> factory<span class="token punctuation">;</span>

        <span class="token class-name">String</span> osName <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;os.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>osName<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;win&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FactoryWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FactoryLinux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Application</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        app<span class="token punctuation">.</span><span class="token function">createUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        app<span class="token punctuation">.</span><span class="token function">renderUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos"><span>Usos Conhecidos</span></a></h2><p>Alguns usos comuns e cenários onde o padrão Abstract Factory é aplicado:</p><ul><li><strong>Interfaces de Usuário (UI) Multi-Plataforma:</strong> Se você está desenvolvendo uma aplicação que precisa ter uma aparência consistente em diferentes sistemas operacionais (Windows, macOS, Linux), o Abstract Factory pode criar diferentes famílias de widgets (botões, caixas de texto, menus) específicos para cada plataforma sem alterar o código cliente.</li><li><strong>Temas e Estilos de Aplicações:</strong> Em aplicações com suporte a temas ou skins, o Abstract Factory pode ser utilizado para criar diferentes conjuntos de estilos e componentes (cores, fontes, layouts) que podem ser aplicados dinamicamente, proporcionando uma experiência personalizada para o usuário.</li><li><strong>Configurações Regionais e Idiomas:</strong> Quando uma aplicação precisa suportar múltiplas localizações e idiomas, o Abstract Factory pode gerar diferentes conjuntos de recursos (mensagens de texto, formatos de data e hora, configurações de moeda) específicos para cada região.</li><li><strong>Desenvolvimento de Jogos:</strong> Em jogos, o padrão Abstract Factory pode ser usado para criar diferentes tipos de objetos de jogo (inimigos, armas, personagens) com base em temas ou mundos diferentes. Isso permite que o jogo suporte diversos estilos e mecânicas de forma modular.</li><li><strong>Frameworks e Bibliotecas:</strong> Bibliotecas que fornecem suporte para diferentes backends de banco de dados, ou frameworks que podem ser integrados a diferentes sistemas de mensagens ou de armazenamento, podem usar o Abstract Factory para criar as interfaces apropriadas para cada tecnologia sem alterar o código da aplicação.</li><li><strong>Design de APIs e SDKs:</strong> APIs e SDKs que precisam suportar várias implementações (como diferentes serviços de nuvem ou protocolos de comunicação) podem usar o Abstract Factory para fornecer interfaces uniformes para clientes sem que eles precisem se preocupar com as implementações específicas.</li></ul><p>O padrão Abstract Factory promove a flexibilidade e a escalabilidade, facilitando a adição de novas famílias de objetos sem modificar o código existente.</p><h2 id="padroes-relacionados" tabindex="-1"><a class="header-anchor" href="#padroes-relacionados"><span>Padrões Relacionados</span></a></h2><ol><li><strong>Abstract Factory:</strong> o Abstract Factory é uma extensão do Factory Method para criar conjuntos de objetos.</li><li><strong>Singleton:</strong> O Singleton é um padrão que garante que uma classe tenha apenas uma instância e fornece um ponto global de acesso a essa instância. Quando combinado com o Abstract Factory, um Singleton pode ser usado para garantir que a instância da fábrica seja única em toda a aplicação, evitando a criação de múltiplas fábricas.</li><li><strong>Bridge:</strong> O Bridge é um padrão estrutural que desacopla uma abstração de sua implementação, permitindo que ambos variem independentemente. Pode ser usado junto com o Abstract Factory para separar a criação de objetos e a implementação de suas funcionalidades, tornando o sistema mais flexível e extensível.</li></ol>`,24))])}const f=i(l,[["render",m],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/includes/seminario-1-Brenda-Martinez/","title":"Abstract Factory","lang":"pt-BR","frontmatter":{"description":"Abstract Factory Intenção A implementação do padrão de projeto Abstract Factory consiste em fornecer uma interface para criação de famílias de objetos relacionados ou dependente...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/includes/seminario-1-Brenda-Martinez/"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Abstract Factory"}],["meta",{"property":"og:description","content":"Abstract Factory Intenção A implementação do padrão de projeto Abstract Factory consiste em fornecer uma interface para criação de famílias de objetos relacionados ou dependente..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i.imgur.com/BcOp0uB.png"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Abstract Factory\\",\\"image\\":[\\"https://i.imgur.com/BcOp0uB.png\\",\\"https://www.dofactory.com/img/diagrams/net/abstract.png\\",\\"https://i.imgur.com/SA6Niz4.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Também conhecido como","slug":"tambem-conhecido-como","link":"#tambem-conhecido-como","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[{"level":3,"title":"O que são fábricas e produtos?","slug":"o-que-sao-fabricas-e-produtos","link":"#o-que-sao-fabricas-e-produtos","children":[]},{"level":3,"title":"Exemplo","slug":"exemplo","link":"#exemplo","children":[]}]},{"level":2,"title":"Aplicabilidade","slug":"aplicabilidade","link":"#aplicabilidade","children":[]},{"level":2,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[]},{"level":2,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":2,"title":"Outro exemplo / Meu exemplo","slug":"outro-exemplo-meu-exemplo","link":"#outro-exemplo-meu-exemplo","children":[{"level":3,"title":"Jogo da Segunda Guerra Mundial","slug":"jogo-da-segunda-guerra-mundial","link":"#jogo-da-segunda-guerra-mundial","children":[]}]},{"level":2,"title":"Consequências","slug":"consequencias","link":"#consequencias","children":[{"level":3,"title":"Prós","slug":"pros","link":"#pros","children":[]},{"level":3,"title":"Contras","slug":"contras","link":"#contras","children":[]}]},{"level":2,"title":"Implementação","slug":"implementacao","link":"#implementacao","children":[{"level":3,"title":"Definição das Interfaces","slug":"definicao-das-interfaces","link":"#definicao-das-interfaces","children":[]},{"level":3,"title":"Implementações concretas para duas famílias diferentes de produtos","slug":"implementacoes-concretas-para-duas-familias-diferentes-de-produtos","link":"#implementacoes-concretas-para-duas-familias-diferentes-de-produtos","children":[]},{"level":3,"title":"Fábricas concretas que criam os produtos específicos","slug":"fabricas-concretas-que-criam-os-produtos-especificos","link":"#fabricas-concretas-que-criam-os-produtos-especificos","children":[]},{"level":3,"title":"Aplicação","slug":"aplicacao","link":"#aplicacao","children":[]}]},{"level":2,"title":"Exemplo de Uso","slug":"exemplo-de-uso","link":"#exemplo-de-uso","children":[]},{"level":2,"title":"Usos Conhecidos","slug":"usos-conhecidos","link":"#usos-conhecidos","children":[]},{"level":2,"title":"Padrões Relacionados","slug":"padroes-relacionados","link":"#padroes-relacionados","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.42,"words":1626},"filePathRelative":"includes/seminario-1-Brenda-Martinez/README.md","autoDesc":true}');export{f as comp,g as data};
