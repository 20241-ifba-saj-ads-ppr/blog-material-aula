import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as e,a as o}from"./app-BfiXwhBG.js";const t={};function i(p,a){return n(),e("div",null,a[0]||(a[0]=[o(`<h1 id="revisao-poo" tabindex="-1"><a class="header-anchor" href="#revisao-poo"><span>Revisão POO</span></a></h1><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup> <sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><h2 id="objeto" tabindex="-1"><a class="header-anchor" href="#objeto"><span>Objeto</span></a></h2><ul><li>Um objeto é cada uma das entidades identificáveis num dado domínio de aplicação</li><li>Em um sistema Bancário teríamos objetos do tipo: Cliente, Conta, Conta Corrente, Dependente, etc.</li><li>Um objeto também pode ser visto como um agregado de outros objetos (suas partes)</li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/NOz12W8n34NtEKNetYj8rHE8It6HQOCjT5AdxMmKxsvmK4gp-Z-F5uYjZKfRvmJsdmgxHd9FZERmq1tDB2sR5w1E1o-Ko21Lh2CvhwhbBrj6TihFA64JtGYF985ZsTG9Akwk8NhFSjlhfQMl3bnV9tY3PV7w0E8lVG00" alt="uml diagram" loading="lazy"><figcaption> Um objeto como um conjuto de outros objetos.</figcaption></figure><ul><li>Um Objeto é uma entidade independente que armazena dados, encapsula serviços, troca mensagens com outros objetos e é modelado para executar as funções do sistema</li><li>Um Objeto pode ser descrito pela identificação de dois elementos básicos: estrutura e comportamento</li></ul><div class="hint-container tip"><p class="hint-container-title">Exemplo</p><p>Objeto do tipo <strong>Pessoa</strong></p><ul><li><strong>Estrutura</strong> : nome, cpf, idade</li><li><strong>Comportamento</strong> : trabalhar, descansar</li></ul></div><div class="hint-container tip"><p class="hint-container-title">Exemplo</p><p>Objeto do tipo <strong>Conta</strong></p><ul><li><strong>Estrutura:</strong> titular, código, saldo</li><li><strong>Comportamento:</strong> debitarValor, adicionarValor</li></ul></div><h3 id="mensagens" tabindex="-1"><a class="header-anchor" href="#mensagens"><span>Mensagens</span></a></h3><ul><li>São estímulos enviados aos objetos solicitando que alguma operação seja realizada por um dado objeto <ul><li>Nome da mensagem</li><li>Parâmetros</li></ul></li><li>Especifica O QUE deve ser feito</li><li>O comportamento de um objeto é dado pelo conjunto de mensagens que ele pode responder</li></ul><h3 id="caracteristicas-dos-objetos" tabindex="-1"><a class="header-anchor" href="#caracteristicas-dos-objetos"><span>Características dos Objetos</span></a></h3><ul><li>Único</li><li>Possui atributos que definem caraterísticas e/ou estado</li><li>Possuem capacidade de realizar ações que chamamos de métodos ou funções</li><li>Normalmente se diz que um objeto é uma instância de uma Classe.</li><li>O que é uma Classe ?</li></ul><h2 id="classe" tabindex="-1"><a class="header-anchor" href="#classe"><span>Classe</span></a></h2><h3 id="origem-do-termo" tabindex="-1"><a class="header-anchor" href="#origem-do-termo"><span>Origem do termo</span></a></h3><ul><li>A palavra classe vem da taxonomia da biologia. <ul><li>Todos os seres vivos de uma mesma classe biológica têm uma série de atributos e comportamentos em comum, mas não são iguais, podem variar nos valores desses atributos e como realizam esses comportamentos.</li></ul></li><li>Homo Sapiens define um grupo de seres que possuem características em comum <ul><li>Homo Sapiens é um ser humano?</li><li>Tudo está especificado na classe Homo Sapiens, mas se quisermos mandar alguém correr, comer, pular, precisaremos de uma instância de Homo Sapiens, ou então de um objeto do tipo Homo Sapiens.</li></ul></li></ul><h3 id="analogias" tabindex="-1"><a class="header-anchor" href="#analogias"><span>Analogias</span></a></h3><ul><li>Uma receita de bolo. <ul><li>Você come uma receita de bolo? <ul><li>Precisamos instaciá-la, criar um objeto bolo a partir dessa especificação (a classe) para utilizá-la.</li><li>Podemos criar centenas de bolos a partir dessa classe (a receita, no caso), eles podem ser bem semelhantes, alguns até idênticos, mas são objetos diferentes.</li></ul></li></ul></li><li>A planta de uma casa é uma casa?...</li></ul><h3 id="conceito" tabindex="-1"><a class="header-anchor" href="#conceito"><span>Conceito</span></a></h3><ul><li>Uma classe é uma descrição de um conjunto que compartilham os mesmos atributos(características), operações, relacionamentos e semântica</li><li>Todos os objetos são instâncias de classes, onde a classe descreve as propriedades e comportamentos daquele objeto</li><li><strong>Atributos</strong> são propriedades de uma classe, que descreve um intervalo de valores que as instâncias podem apresentar. Uma Classe pode ter qualquer número de atributos ou nenhum</li><li><strong>Operações</strong> correspondem aos processos que a classe pode realizar</li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/RT1B2i8m40RWVKunT5_eOwLWAOgUmar8fpgGXwHJN1HFuyA3z6AMj8YnhfB_J_AHfEvOUkwD5lLdfh5bO0UUBbU6XZmg9cU5aJT8ZjqD5RMavFWQdmxEja7eZGJbBCi4P3VF1l481qB81m5WUuFUmQxAfw0qeMMS4fnwBQsRkaxg9gndsPGq6GeRic-fYAGYalQesSVK9fBoY2eZgeoe0wcLjBgK20oaQRMy4hPWyVvR5__hSgbhj4tu_tby0m00" alt="uml diagram" loading="lazy"><figcaption> Representação de vários objetos de uma mesma estrutura.</figcaption></figure><ul><li>Estrutura (molde) que define os atributos e/ou estados de um conjunto de objetos com características similares.</li><li>Define o comportamento de seus objetos (ações que o objeto pode fazer) através de métodos.</li><li>Descreve os serviços (ações) providos por seus objetos</li><li>Quais informações eles podem armazenar</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> numero<span class="token punctuation">;</span>
  <span class="token class-name">String</span> cliente<span class="token punctuation">;</span>
  <span class="token keyword">double</span> saldo<span class="token punctuation">;</span>
  <span class="token keyword">double</span> limite<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="usando-a-classe" tabindex="-1"><a class="header-anchor" href="#usando-a-classe"><span>Usando a classe</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Objeto criado, mas como acessar?</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Conta</span> minhaConta<span class="token punctuation">;</span>
    minhaConta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Através da variável minhaConta, podemos acessar o objeto recém criado para alterar seu cliente, seu saldo, etc</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Conta</span> minhaConta<span class="token punctuation">;</span>
    minhaConta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    minhaConta<span class="token punctuation">.</span>cliente <span class="token operator">=</span> <span class="token string">&quot;Leandro&quot;</span><span class="token punctuation">;</span>
    minhaConta<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Saldo atual: &quot;</span><span class="token operator">+</span>minhaConta<span class="token punctuation">.</span>saldo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="atributos-de-uma-classe" tabindex="-1"><a class="header-anchor" href="#atributos-de-uma-classe"><span>Atributos de uma Classe</span></a></h3><ul><li>Caraterísticas e/ou estado de uma classe</li><li>Após a classe ser instanciada em um objeto os atributos vão receber valores (caraterísticas e/ou estados) que definem o objeto</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> numero<span class="token punctuation">;</span><span class="token comment">//atributo</span>
  <span class="token class-name">String</span> cliente<span class="token punctuation">;</span><span class="token comment">//atributo</span>
  <span class="token keyword">double</span> saldo<span class="token punctuation">;</span><span class="token comment">//atributo</span>
  <span class="token keyword">double</span> limite<span class="token punctuation">;</span><span class="token comment">//atributo</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="metodos-de-uma-classe" tabindex="-1"><a class="header-anchor" href="#metodos-de-uma-classe"><span>Métodos de uma Classe</span></a></h3><ul><li><p>Conjunto de ações que um determinado objeto pode executar</p></li><li><p>Definem o que um objeto pode fazer</p></li><li><p>São acionados por outros objetos</p><ul><li>Os objetos se comunicam através de métodos</li><li>Troca de mensagens</li></ul></li><li><p>Um método que saca uma determinada quantidade e não devolve nenhuma informação para quem acionar esse método</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> numero<span class="token punctuation">;</span>
  <span class="token class-name">String</span> cliente<span class="token punctuation">;</span>
  <span class="token keyword">double</span> saldo<span class="token punctuation">;</span>
  <span class="token keyword">double</span> limite<span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">saca</span><span class="token punctuation">(</span><span class="token keyword">double</span> quantidade<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//método</span>
    <span class="token keyword">double</span> novoSaldo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">-</span> quantidade<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">=</span> novoSaldo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Fazer um depósito</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> numero<span class="token punctuation">;</span>
  <span class="token class-name">String</span> cliente<span class="token punctuation">;</span>
  <span class="token keyword">double</span> saldo<span class="token punctuation">;</span>
  <span class="token keyword">double</span> limite<span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">saca</span><span class="token punctuation">(</span><span class="token keyword">double</span> quantidade<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//método</span>
    <span class="token keyword">double</span> novoSaldo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">-</span> quantidade<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">=</span> novoSaldo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">deposita</span><span class="token punctuation">(</span><span class="token keyword">double</span> quantidade<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//método</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">+=</span> quantidade<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Conta</span> minhaConta<span class="token punctuation">;</span>
    minhaConta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    minhaConta<span class="token punctuation">.</span>cliente <span class="token operator">=</span> <span class="token string">&quot;Leandro&quot;</span><span class="token punctuation">;</span>
    minhaConta<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>

    <span class="token comment">//saca 20</span>
    minhaConta<span class="token punctuation">.</span><span class="token function">saca</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//deposita 50</span>
    minhaConta<span class="token punctuation">.</span><span class="token function">deposita</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Saldo atual: &quot;</span><span class="token operator">+</span>minhaConta<span class="token punctuation">.</span>saldo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Método com retorno <ul><li>No caso do nosso método saca, podemos devolver um valor booleano indicando se a operação foi bem sucedida.</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token comment">//...</span>

  <span class="token keyword">boolean</span> <span class="token function">saca</span><span class="token punctuation">(</span><span class="token keyword">double</span> valor<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>saldo<span class="token operator">&lt;</span>valor<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">-=</span> valor<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//... </span>
    minhaConta<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> consegui<span class="token operator">=</span>minhaConta<span class="token punctuation">.</span><span class="token function">saca</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>consegui<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consegui sacar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Não consegui sacar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="referencia-ao-objeto" tabindex="-1"><a class="header-anchor" href="#referencia-ao-objeto"><span>Referência ao Objeto</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Conta</span> c1<span class="token punctuation">;</span>
    c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Conta</span> c2<span class="token punctuation">;</span>
    c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>c1 uma variável que &quot;aponta&quot; para o objeto(referência).</li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iufIaqiIyz9pKXMKV5Dpyuio4vMgkHI004d2EJ-l95598R5O8Tae5u-a8OPaiX5K6uQ48LGBM09eh8skBbGLq1WGnv2hbiiXDIy5w4W51HWB0000" alt="uml diagram" loading="lazy"><figcaption> Representação da memória com duas instancias de Conta.</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Conta</span> c1<span class="token punctuation">;</span>
    c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Conta</span> c2 <span class="token operator">=</span> c1<span class="token punctuation">;</span>    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iufIaqiIyz9pKXMKV5Dpyuio4vMgkHI004d2EJ-l95598R5O8Tam5rqosH0gWo5X194m0ai0TThewa9LGJb6NBLS3gbvAM0NGMW0" alt="uml diagram" loading="lazy"><figcaption> Representação da memória com apenas uma instancia de Conta.</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">?</p><p>Como seria a transferência de valores entre duas contas?</p></div><h4 id="comparando" tabindex="-1"><a class="header-anchor" href="#comparando"><span>Comparando</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Conta</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  c1<span class="token punctuation">.</span>cliente <span class="token operator">=</span> <span class="token string">&quot;Leandro&quot;</span><span class="token punctuation">;</span>    
  c1<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>    
  <span class="token class-name">Conta</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  c2<span class="token punctuation">.</span>cliente <span class="token operator">=</span> <span class="token string">&quot;Leandro&quot;</span><span class="token punctuation">;</span>    
  c2<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>    
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Contas iguais&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>O operador <code>==</code> compara o conteúdo das variáveis <ul><li>variáveis não guardam o objeto, e sim o endereço em que ele se encontra (referência)</li><li>As contas podem ser equivalentes no nosso critério de igualdade, porém elas não são o mesmo objeto.</li></ul></li></ul><h5 id="equals" tabindex="-1"><a class="header-anchor" href="#equals"><span>equals</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Conta</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  c1<span class="token punctuation">.</span>cliente <span class="token operator">=</span> <span class="token string">&quot;Leandro&quot;</span><span class="token punctuation">;</span>    
  c1<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>    
  <span class="token class-name">Conta</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  c2<span class="token punctuation">.</span>cliente <span class="token operator">=</span> <span class="token string">&quot;Leandro&quot;</span><span class="token punctuation">;</span>    
  c2<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>    
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Contas iguais&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Conta</span> outraConta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cliente<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>outraConta<span class="token punctuation">.</span>cliente<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">==</span> outraConta<span class="token punctuation">.</span>saldo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//...</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="construtor" tabindex="-1"><a class="header-anchor" href="#construtor"><span>Construtor</span></a></h2><ul><li>Método especial definido na classe e executado no momento que o objeto é instanciado</li><li>Diferente de outro método pois não possui retorno</li><li>Deve ter o mesmo nome da classe.</li><li>Pode receber parâmetros <ul><li>Normalmente utilizados para inicializar os valores dos atributos do objeto</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> numero<span class="token punctuation">;</span>
  <span class="token class-name">String</span> cliente<span class="token punctuation">;</span>
  <span class="token keyword">double</span> saldo<span class="token punctuation">;</span>
  <span class="token keyword">double</span> limite<span class="token punctuation">;</span>

  <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">saca</span><span class="token punctuation">(</span><span class="token keyword">double</span> quantidade<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">double</span> novoSaldo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">-</span> quantidade<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">=</span> novoSaldo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">deposita</span><span class="token punctuation">(</span><span class="token keyword">double</span> quantidade<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">+=</span> quantidade<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="o-que-o-new-faz" tabindex="-1"><a class="header-anchor" href="#o-que-o-new-faz"><span>O que o new faz?</span></a></h3><ul><li>A classe chamada é instanciada</li><li>Memória é alocada</li><li>Os passos definidos dentro do método construtor da classe são executados <ul><li>Construtor é um método especial para criar e inicializar novas instâncias da classe.</li><li>Construtores podem ser sobrecarregados</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>limite <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sobrecarga" tabindex="-1"><a class="header-anchor" href="#sobrecarga"><span>Sobrecarga</span></a></h3><ul><li><p>É a capacidade de definir métodos com o mesmo nome</p><ul><li>Assinatura seja diferente.</li><li>A mudança na assinatura ocorre alterando a quantidade e/ou tipo de parâmetros que um método recebe</li></ul></li><li><p>Sobrecarga é a capacidade de um objeto responder à mesma mensagem, com comportamentos (métodos) distintos, a depender dos tipos dos parâmetros recebidos</p><ul><li>aplicarInjecao()</li><li>aplicarInjecao(String nomeRemedio)</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//...</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">somar</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">operar</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token function">operar</span><span class="token punctuation">(</span><span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">operar</span><span class="token punctuation">(</span><span class="token keyword">char</span> op<span class="token punctuation">,</span> <span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">{</span> 
  <span class="token keyword">switch</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">case</span> <span class="token char">&#39;+&#39;</span><span class="token operator">:</span> 
      <span class="token keyword">return</span> <span class="token function">somar</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token keyword">break</span><span class="token punctuation">;</span> 
    <span class="token keyword">case</span> <span class="token char">&#39;-&#39;</span><span class="token operator">:</span> 
      <span class="token keyword">return</span> <span class="token function">subtrair</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token keyword">int</span> numero<span class="token punctuation">,</span> <span class="token class-name">String</span> cliente<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>numero <span class="token operator">=</span> numero<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cliente <span class="token operator">=</span> cliente<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>limite <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token keyword">int</span> numero<span class="token punctuation">,</span> <span class="token class-name">String</span> cliente<span class="token punctuation">,</span> <span class="token keyword">double</span> saldo<span class="token punctuation">,</span> <span class="token keyword">double</span> limite<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>numero<span class="token punctuation">,</span> cliente<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">=</span> saldo<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>limite <span class="token operator">=</span> limite<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Conta</span> minhaConta1<span class="token punctuation">;</span>
    minhaConta1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Leandro1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    minhaConta1<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token class-name">Conta</span> minhaConta2<span class="token punctuation">;</span>
    minhaConta2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Leandro2&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="estereotipo-de-uma-classe-em-uml" tabindex="-1"><a class="header-anchor" href="#estereotipo-de-uma-classe-em-uml"><span>Estereótipo de uma Classe em UML</span></a></h2><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iv9p4ekB5VpoSrDT4fr1xDHgBWKWI2mfoamgBSal1lDoKqloK_ABDJIvQhaSKlDIm6P0Q000" alt="uml diagram" loading="lazy"><figcaption>Modelo de uma classe em UML.</figcaption></figure><h3 id="estrutura-basica-de-uma-classe" tabindex="-1"><a class="header-anchor" href="#estrutura-basica-de-uma-classe"><span>Estrutura básica de uma classe</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Carro</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> cor<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> marca<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> velocidade<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Carro</span><span class="token punctuation">(</span><span class="token class-name">String</span> cor<span class="token punctuation">,</span> <span class="token class-name">String</span> marca<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>cor <span class="token operator">=</span> cor<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>marca <span class="token operator">=</span> marca<span class="token punctuation">;</span>
        velocidade <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acelerar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        velocidade<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        velocidade <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Carro</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carro</span><span class="token punctuation">(</span><span class="token string">&quot;vermelha&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;BMW&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Carro c2 = new Carro();// ERRO</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="representacao-uml" tabindex="-1"><a class="header-anchor" href="#representacao-uml"><span>Representação UML</span></a></h3><figure><img src="https://www.plantuml.com/plantuml/svg/LOv12eGm34NtFKMMYZDtA7W4J_19mr2ehQJLZSpT5GCpcato7taXlZPeM-Va_6_YX5ffX6gXtJawwpqrZVb3NFIHPoZ3ICoDDac5Oq0GquRhIFUNNtGNUrlQIWm4bYGAxUvmWP6lyvB3zQNr0m00" alt="uml diagram" loading="lazy"><figcaption> UML da classe carro.</figcaption></figure><ul><li><p>A UML é uma notação que podemos utilizar para representar classes e objetos em modelos computacionais</p></li><li><p>Linguagem para representação de modelos visuais com um significado especifico e padronizado</p></li><li><p>UML não é uma linguagem de programação</p></li><li><p>Os modelos são representados através de diagramas que possuem semântica própria O diagrama que representa a descrição das classes é o <strong>Diagrama de Classes</strong></p></li></ul><h3 id="dominio-de-aplicacao" tabindex="-1"><a class="header-anchor" href="#dominio-de-aplicacao"><span>Domínio de Aplicação</span></a></h3><ul><li>Um domínio é composto pelas entidades, informações e processos relacionados a um determinado contexto.</li><li>Uma aplicação pode ser desenvolvida para automatizar ou tornar factível as tarefas de um domínio.</li><li>Portanto, uma aplicação é basicamente o &quot;reflexo&quot; de um domínio.</li><li>Para exemplificar, suponha que estamos interessados em desenvolver uma aplicação para facilitar as tarefas do cotidiano de um banco. Podemos identificar clientes, funcionários, agências e contas como entidades desse domínio. Assim como podemos identificar as informações e os processos relacionados a essas entidades.</li></ul><h4 id="outras-classes-do-dominio-de-um-sistema-bancario" tabindex="-1"><a class="header-anchor" href="#outras-classes-do-dominio-de-um-sistema-bancario"><span>Outras classes do domínio de um sistema bancário</span></a></h4><figure><img src="https://www.plantuml.com/plantuml/svg/NOz13i9024NtSmgEKjFUmCGz3gGXOI2PeIlZtHshdHftV3x_0LCBhB4LJTEeKbPi3M1MOGk6HmAuHXLR0SmBToaM0Db9La_FCz01w0lFbKd2z-0-QLlXwZyOmi25RwX2I7mYBYjR5Zo2tzomPxVuDmSqVyxj3VBjhWmDbVoKAaNYlMjYe_udm56z0000" alt="uml diagram" loading="lazy"><figcaption> UML de classes do domínio bancários.</figcaption></figure><h2 id="membros-de-instancia-e-membros-de-classes" tabindex="-1"><a class="header-anchor" href="#membros-de-instancia-e-membros-de-classes"><span>Membros de instância e Membros de classes</span></a></h2><ul><li>Variáveis de Classe <ul><li>Quando um número de objetos são criados a partir de uma mesma classe, cada um tem suas próprias cópias distintas de variáveis de instância.</li><li>No caso de a classe de bicicleta, são as variáveis de instância engrenagem e velocidade. Cada objeto de bicicleta tem seus próprios valores para essas variáveis, armazenadas em diferentes locais de memória.</li></ul></li><li>Às vezes, é necessário ter variáveis que são comuns a todos os objetos.</li><li>Isto é conseguido com o modificador <code>static</code>.</li><li>Os campos que têm o modificador <code>static</code> em sua declaração são chamados de <strong>campos estáticos ou variáveis de classe.</strong></li><li>Eles estão associados com a classe. Cada instância compartilha uma variável de classe, que está em um local fixo na memória.</li><li>Qualquer objeto pode alterar o valor de uma variável de classe, mas variáveis de classe também pode ser manipulado sem criar uma instância da classe. <ul><li>exemplo: <ul><li>Caso seja necessário criar um número de objetos de bicicleta e atribuir a cada um número de série, começando com 1 para o primeiro objeto.</li><li>Esse número de identificação é única para cada objeto e é, portanto, uma variável de instância.</li><li>Ao mesmo tempo, você precisa de um campo para manter o controle de quantos objetos bicicletas foram criadas para que você saiba o ID para atribuir ao próximo.</li><li>Esse campo não está relacionada a qualquer objeto individual, mas para a classe como um todo.</li><li>Para isso, você precisa de uma variável de classe, numeroDeBicicletas:</li></ul></li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bicicleta</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> engrenagem<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> velocidade<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> numeroDeBicicletas <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Variáveis de classe são referenciados pelo próprio nome da classe:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Bicicleta</span><span class="token punctuation">.</span>numeroDeBicicletas
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Também é possível consultar a campos estáticos com uma referência de objeto como:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Bicicleta</span> minhaBicicleta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bicicleta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
minhaBicicleta<span class="token punctuation">.</span>numeroDeBicicletas<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>mas isso não deixa claro que é um atributo de classe e não de instancia, é recomendado que sempre que for acessar um atributo de classe acessar pela classe.</p></li><li><p>No construtor da Bicicleta pode ser setado o valor do atributo ID incrementar a variável de classe numeroDeBicicletas:</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bicicleta</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> numeroDeBicicletas <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Bicicleta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">++</span>numeroDeBicicletas<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> id<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Bicicleta</span> bicicleta1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bicicleta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      bicicleta1<span class="token punctuation">.</span><span class="token function">setVelocidade</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Bicicleta</span> bicicleta2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bicicleta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      bicicleta2<span class="token punctuation">.</span><span class="token function">setVelocidade</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://www.plantuml.com/plantuml/svg/bP513e8m44NtFKM36rt24ZV4U0mtG_j3cWp5j4LD39VnAbvCR0F2mXXdCt_p_fjaAX_8XRvbKKr92i5KWsLcSPK7eunY1DhkCY4SL23RC6IccBn79ZTdOZGEi7is5cMA0RUGubt8SQR6leNhZfXRVLciAZvSn1O-OtruFgmob8y4iL6ekKUInXJPTqhAXTReCZ_P2xXJHfD6kQwOmP68wF1T7k_zsrwixCKl-p3-e8BLyIzflm00" alt="uml diagram" loading="lazy"><figcaption>Atributos de classe e de instância.</figcaption></figure><h3 id="metodos-estaticos" tabindex="-1"><a class="header-anchor" href="#metodos-estaticos"><span>Métodos estáticos</span></a></h3><ul><li>A linguagem de programação Java suporta métodos estáticos, bem como variáveis estáticas.</li><li>Os métodos estáticos, que têm o modificador static em suas declarações, deve ser chamado com o nome da classe, sem a necessidade de criação de uma instância da classe</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ClassName</span><span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Um uso comum para métodos estáticos é acessar campos estáticos. Por exemplo, nós poderíamos adicionar um método estático para a classe de bicicleta para acessar o campo estático numeroDeBicicletas:</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bicicleta</span> <span class="token punctuation">{</span>
  <span class="token comment">//... </span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> numeroDeBicicletas <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Bicicleta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">++</span>numeroDeBicicletas<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> id<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getNumeroDeBicicletas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> numeroDeBicicletas<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Nem todas as combinações de variáveis e métodos de classe e de instância são permitidas: <ul><li>Métodos de instância podem acessar variáveis de instância e métodos de instância diretamente.</li><li>Métodos de instância podem acessar variáveis de classe e métodos de classe diretamente.</li><li>Métodos de classe podem acessar variáveis de classe e métodos de classe diretamente.</li><li>Métodos de classe não podem acessar variáveis de instância ou métodos de instância diretamente, eles devem usar uma referência de objeto. Além disso, métodos de classe não pode usar a palavra-chave <code>this</code>.</li></ul></li></ul><h3 id="constantes" tabindex="-1"><a class="header-anchor" href="#constantes"><span>Constantes</span></a></h3><ul><li>O modificador <em>static,</em> em combinação com o modificador <em>final,</em> é também usado para definir constantes.</li><li>O modificador <em>final</em> indica que o valor deste campo não pode mudar.</li></ul><h4 id="static-final" tabindex="-1"><a class="header-anchor" href="#static-final"><span>Static final</span></a></h4><ul><li>Por exemplo, a seguinte declaração variável define uma constante chamada PI, cujo valor é uma aproximação do pi</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.141592653589793</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Constantes definidas desta forma não pode ser alteradas, um erro de compilação ocorrerá caso seu programa tenta fazer isso.</li><li>Por convenção, os nomes das constantes estão escritas em letras maiúsculas.</li><li>Se o nome for composto por mais de uma palavra, as palavras são separadas por um sublinhado (_).</li></ul><h2 id="associacoes" tabindex="-1"><a class="header-anchor" href="#associacoes"><span>Associações</span></a></h2><ul><li>Forma como uma classe se relaciona com outra classe</li><li>Uma classe pode conter atributos que geram instâncias de outra classe <ul><li>Uma classe pode conter outra classe como atributo</li><li>Quando isto ocorre dizemos que uma classe possui outra classe associada a ela</li></ul></li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/LP313i8W38RlF4MFCswlO9Peucaddw02qIP0JM6x6D_TZJ4T70hvcl_dR_kOKDBedUf_BwKTnWXd5E6tWlbqS4j2uG6QfGOUHMED9kjOaq5Z2nyuiO1VQYR7rRhvUxQLNRjN78faOZA0sZehA4r5NxYYpvOyoxVa519edD1nt17XX9fjtFiOyXH6aYi9n_eB7BqDytxgrcAK1E_eddpXWOLBZ3mVTASoYEfjC7d7w_q5" alt="uml diagram" loading="lazy"><figcaption>Exemplo de Associação.</figcaption></figure><h3 id="agregacao" tabindex="-1"><a class="header-anchor" href="#agregacao"><span>Agregação</span></a></h3><ul><li><p>A classe contida não é instanciada no escopo da classe principal</p><ul><li>Não depende da principal para existir</li><li>Normalmente é passada por parâmetro</li></ul></li><li><p>Agregação é uma associação em que um objeto é parte de outro, de tal forma que a parte pode existir sem o todo.</p></li><li><p>Em mais baixo nível, uma agregação consiste de um objeto contendo referências para outros objetos, de tal forma que o primeiro seja o todo, e que os objetos referenciados sejam as partes do todo.</p></li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0ixYISnABYnK2Yl9JIalogxaKW41N8RYaA3ClNI4lFpSLAkAMNvINcfoQab-aa0PdSjN2z2EaSHa1KWkrHK4t7zayBeVKl1Imgo0q0000" alt="uml diagram" loading="lazy"><figcaption>Exemplo de Agregação.</figcaption></figure><h3 id="composicao" tabindex="-1"><a class="header-anchor" href="#composicao"><span>Composição</span></a></h3><ul><li>A classe contida é instanciada pela classe principal</li><li>Quando uma classe principal é retirada da memória, as outras classes também são.</li><li>O todo contém as partes (e não referências para as partes). Quando o todo desaparece, todas as partes também desaparecem.</li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/NL0v3i8m4EpzYgsHyWE4Wb8XKL3mWLNi10jdDzYRD8ZNKF2GV8mSJYpOPaOpE-CZ3u9UkiQfV6EgT1W2dCGq1JUjnwU2SJAuUDQTCBGBHjMImAD34gjHcoWMwBsb6qCPYNgjlQkrjbQEKQ17n_xAWYxAPnjad-vm02k6mcnENSc1R9UEKyHYW0cSfJkeQOE37Jx3cvKX3PFzayruUzQITQQIL72ilQdnBv-FRFwo1Ry0" alt="uml diagram" loading="lazy"><figcaption>Exemplo de Composição.</figcaption></figure><h2 id="encapsulamento" tabindex="-1"><a class="header-anchor" href="#encapsulamento"><span>Encapsulamento</span></a></h2><ul><li>Separar o programa em partes, tornando cada parte mais isolada possível uma da outra</li><li>A ideia é tornar o software mais flexível, fácil de modificar e de criar novas implementações</li><li>Permite utilizar o objeto de uma classe sem necessariamente conhecer sua implementação</li><li>Protege o acesso direto aos atributos de uma instância fora da classe onde estes foram criados</li><li>Uma grande vantagem do encapsulamento é que toda parte encapsulada pode ser modificada sem que os usuários da classe em questão sejam afetados</li></ul><h3 id="pacotes" tabindex="-1"><a class="header-anchor" href="#pacotes"><span>Pacotes</span></a></h3><ul><li>Forma de organizar classes dentro de uma estrutura de árvores.</li><li>Podemos entender a estrutura de árvores como os diretórios do sistema operacional.</li><li>O nome completo de uma classe é definido pelo seu pacote e o nome.</li><li>Organiza suas classes e bibliotecas <ul><li>Os diretórios estão diretamente relacionados aos chamados pacotes e costumam agrupar classes de funcionalidade parecida</li></ul></li><li>No pacote java.util por exemplo, temos as classes Date, SimpleDateFormat e GregorianCalendar; todas elas trabalham com datas de formas diferentes <ul><li>Significa que essas classes estão no diretório java/util/</li></ul></li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuN90OnKdvfHmSLLpAG11TGYO0W5jXQp4iaG4LrkXj2Gp1uclhU2IM98A5gZbgkNYSaZDIm6R1MA0ZOVG0000" alt="uml diagram" loading="lazy"><figcaption>Representação da estrutura de diretório.</figcaption></figure><ul><li>A palavra chave <em>package</em> indica qual pacote que contém a classe</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Para usar uma classe ou um pacote você precisa usar a import palavra-chave:</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">pacote<span class="token punctuation">.</span></span><span class="token class-name">Class</span></span><span class="token punctuation">;</span>   <span class="token comment">// Importa uma única classe</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">pacotenovo<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>   <span class="token comment">// Importa todas as classes do pacote</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><div class="multicolumn"><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0imeIaxCJqrCLiXBB4XKKghaKW00cLbgIcGCK0mc1nMkvQhaSKlDIm2P0Q000" alt="uml diagram" loading="lazy"><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0imeIaxCJqrCLiXBB4lLAIp9p51Ig5Q20gvRB8JKl1Qm1GWC0" alt="uml diagram" loading="lazy"></div><figcaption>Visualizações diferentes de subpacotes</figcaption></figure><ul><li>O nome da classe na verdade para o compilador é <ul><li>java.util.Date</li><li>java.util.SimpleDateFormat</li><li>java.util.GregorianCalendar</li><li>java.io.File</li></ul></li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/PO_12SCm34Nlci8JU0P3Ipf09_Ya8gYLus0xlHJlNjib8IMwIBpt9P1B6J6lNidjquBnXOdD4syOyo5JQsDh5gsieSxBdvMmvGiL6XKfzIkshTahCf_WNVoYtDGGeaS-1MwHfn05ymNAymFnc91W1r4cLqr_ujU_" alt="uml diagram" loading="lazy"><figcaption>Representação de classes em seus pacotes.</figcaption></figure><h3 id="importar-uma-classe" tabindex="-1"><a class="header-anchor" href="#importar-uma-classe"><span>Importar uma classe</span></a></h3><p>Se você encontrar uma classe que deseja usar, por exemplo, a classe <em>Scanner</em>, que é usada para obter a entrada do usuário, escreva o seguinte código:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>No exemplo acima, <em>java.util</em> é um pacote, enquanto <em>Scanner</em> é uma classe do pacote <em>java.util</em>.</p><p>Para usar a classe <em>Scanner</em>, crie um objeto da classe e use qualquer um dos métodos disponíveis encontrados na documentação da classe <em>Scanner</em>. Em nosso exemplo, usaremos o método <em>nextLine()</em>, que é usado para ler uma linha completa:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Informe o nome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> nome <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;nome é : &quot;</span> <span class="token operator">+</span> nome<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="usar-uma-classe-sem-import" tabindex="-1"><a class="header-anchor" href="#usar-uma-classe-sem-import"><span>Usar uma classe sem import</span></a></h4><p>Para utilizar uma classe sem a palavra reservada <code>import</code> você pode referenciar a classe pelo nome completo (pacote.nomeClasse). Exemplo:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Informe o nome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> nome <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;nome é : &quot;</span> <span class="token operator">+</span> nome<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="modificadores-de-acesso" tabindex="-1"><a class="header-anchor" href="#modificadores-de-acesso"><span>Modificadores de acesso</span></a></h3><ul><li>private</li><li>protected</li><li>public</li><li>&lt;padrão&gt; (package, quando não é especificado nenhum dos 3 acima)</li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/ZP713e8m38RlVOecNZJ45-34W1SPO-3YO6OKBaQUtKrG5X7rr7xPr-PlbdJ4BVMD1aXUhT2ywv3X5Owg9UHaLT6JOR0BCOKnn0oY4FDfjf5aIiFsXsbsmjJXk63cC5emTtW3Q0r9rB8YD1MoE5vI85wi6ZX9a6s9tjkKquVi7WN9yhUUUPsBCw__s9rxkI-q4c-kLVNfAS_tRsPUkzyYh-tjn6ltK-34TVxBvte7" alt="uml diagram" loading="lazy"><figcaption>Modificadores de acesso.</figcaption></figure><ul><li><p>São aplicados a atributos, métodos, construtores e classes</p></li><li><p>As classes só podem ser declaradas como public ou padrão</p><ul><li>Uma classe com acesso padrão só pode ser detectada por classes do mesmo pacote</li><li>Uma classe com acesso público pode ser detectada por classes de todos os pacotes</li></ul></li><li><p>Private</p><ul><li>Os membros privados só podem ser acessados por um código da mesma classe</li></ul></li><li><p>Protected</p><ul><li>Os membros protegidos podem ser acessados por outras classes do mesmo pacote, além de subclasses independente do pacote</li></ul></li><li><p>Public</p><ul><li>Os membros públicos podem ser acessados por todas as outras classes, mesmo de pacotes diferentes</li></ul></li><li><p>Padrão</p><ul><li>Os membros padrão só podem ser acessados por outras classes do mesmo pacote</li></ul></li></ul><h4 id="metodos-de-acesso-get-e-set" tabindex="-1"><a class="header-anchor" href="#metodos-de-acesso-get-e-set"><span>Métodos de acesso (get e set)</span></a></h4><p>Como os atributos/métodos privados ​​só podem ser acessadas dentro da mesma classe (uma classe externa não tem acesso a ela) é possível acessá-los se fornecermos métodos públicos <em>get</em> e <em>set</em>.</p><p>O <em>get</em> retorna o valor da variável e o <em>set</em> define o valor.</p><p>A sintaxe para ambos é que eles começam com <em>get</em> ou <em>set</em> seguido pelo nome do atributo com a primeira letra em maiúscula:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pessoa</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> nome<span class="token punctuation">;</span> <span class="token comment">// private = acesso restrito</span>
  <span class="token comment">// Get</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> nome<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Set</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNome</span><span class="token punctuation">(</span><span class="token class-name">String</span> novoNome<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>novoNome<span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>novoNome<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>novoNome<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>nome <span class="token operator">=</span> novoNome<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O método <em>get</em> retorna o valor da variável name.</p><p>O método <em>set</em> pega um parâmetro ( novoNome) e o atribui ao atributo <em>nome</em>.</p><p>A palavra-chave <code>this</code> é usada para se referir ao objeto atual.</p><p>No entanto, como o atributo <code>name</code> é declarada como <code>private</code>, não podemos acessá-la de fora desta classe:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Pessoa</span> pessoa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pessoa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pessoa<span class="token punctuation">.</span>nome <span class="token operator">=</span> <span class="token string">&quot;João&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// error</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pessoa<span class="token punctuation">.</span>nome<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error </span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Se o atributo foi declarada como <em>public,</em> esperaríamos a seguinte saída:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>    João
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>No entanto, ao tentar acessar um atributo <em>private,</em> obtemos um erro:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>    Main.java:4: error: nome has private access <span class="token keyword">in</span> Pessoa
        pessoa.nome <span class="token operator">=</span> <span class="token string">&quot;João&quot;</span><span class="token punctuation">;</span>
              ^
    Main.java:5: error: nome has private access <span class="token keyword">in</span> Pessoa
        System.out.println<span class="token punctuation">(</span>pessoa.nome<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                 ^
    <span class="token number">2</span> errors
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Em vez disso, usamos os métodos getNome()e setNome()para acessar e atualizar a variável:</p><p>Exemplo</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Pessoa</span> pessoa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pessoa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pessoa<span class="token punctuation">.</span><span class="token function">setNome</span><span class="token punctuation">(</span><span class="token string">&quot;João&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Seta o valor do atributo nome para &quot;João&quot;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pessoa<span class="token punctuation">.</span><span class="token function">getNome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>saida</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>    <span class="token string">&quot;João&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="por-que-encapsulamento" tabindex="-1"><a class="header-anchor" href="#por-que-encapsulamento"><span>Por que encapsulamento?</span></a></h3><ul><li>Melhor controle dos atributos e métodos da classe</li><li>Os atributos de classe podem ser somente leitura (se você usar apenas o método <em>get</em>) ou somente gravação (se você usar apenas o método <em>set</em>)</li><li>Flexível: o programador pode alterar uma parte do código sem afetar outras partes</li><li>Maior segurança de dados</li></ul><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias"><span>Referências</span></a></h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Caelum. Java e Orientação a Objetos - Curso fj-11. <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>P.D. DEITEL e H. Deitel.JAVA: como programar, 10a Edição.Pearson, 2016. <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li></ol></section>`,153)]))}const u=s(t,[["render",i],["__file","01_revisao_poo.html.vue"]]),d=JSON.parse('{"path":"/posts/OO/01_revisao_poo.html","title":"Revisão POO","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2024-03-14T21:40:00.000Z","tag":["revisao","poo"],"category":["aula"],"order":1,"gitInclude":["../../../src/includes/bib.md"],"description":"Revisão POO [1] [2] Objeto Um objeto é cada uma das entidades identificáveis num dado domínio de aplicação Em um sistema Bancário teríamos objetos do tipo: Cliente, Conta, Conta...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/posts/OO/01_revisao_poo.html"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Revisão POO"}],["meta",{"property":"og:description","content":"Revisão POO [1] [2] Objeto Um objeto é cada uma das entidades identificáveis num dado domínio de aplicação Em um sistema Bancário teríamos objetos do tipo: Cliente, Conta, Conta..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"og:updated_time","content":"2024-09-12T22:16:05.000Z"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["meta",{"property":"article:tag","content":"revisao"}],["meta",{"property":"article:tag","content":"poo"}],["meta",{"property":"article:published_time","content":"2024-03-14T21:40:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-12T22:16:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Revisão POO\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-14T21:40:00.000Z\\",\\"dateModified\\":\\"2024-09-12T22:16:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Objeto","slug":"objeto","link":"#objeto","children":[{"level":3,"title":"Mensagens","slug":"mensagens","link":"#mensagens","children":[]},{"level":3,"title":"Características dos Objetos","slug":"caracteristicas-dos-objetos","link":"#caracteristicas-dos-objetos","children":[]}]},{"level":2,"title":"Classe","slug":"classe","link":"#classe","children":[{"level":3,"title":"Origem do termo","slug":"origem-do-termo","link":"#origem-do-termo","children":[]},{"level":3,"title":"Analogias","slug":"analogias","link":"#analogias","children":[]},{"level":3,"title":"Conceito","slug":"conceito","link":"#conceito","children":[]},{"level":3,"title":"Atributos de uma Classe","slug":"atributos-de-uma-classe","link":"#atributos-de-uma-classe","children":[]},{"level":3,"title":"Métodos de uma Classe","slug":"metodos-de-uma-classe","link":"#metodos-de-uma-classe","children":[]},{"level":3,"title":"Referência ao Objeto","slug":"referencia-ao-objeto","link":"#referencia-ao-objeto","children":[]}]},{"level":2,"title":"Construtor","slug":"construtor","link":"#construtor","children":[{"level":3,"title":"O que o new faz?","slug":"o-que-o-new-faz","link":"#o-que-o-new-faz","children":[]},{"level":3,"title":"Sobrecarga","slug":"sobrecarga","link":"#sobrecarga","children":[]}]},{"level":2,"title":"Estereótipo de uma Classe em UML","slug":"estereotipo-de-uma-classe-em-uml","link":"#estereotipo-de-uma-classe-em-uml","children":[{"level":3,"title":"Estrutura básica de uma classe","slug":"estrutura-basica-de-uma-classe","link":"#estrutura-basica-de-uma-classe","children":[]},{"level":3,"title":"Representação UML","slug":"representacao-uml","link":"#representacao-uml","children":[]},{"level":3,"title":"Domínio de Aplicação","slug":"dominio-de-aplicacao","link":"#dominio-de-aplicacao","children":[]}]},{"level":2,"title":"Membros de instância e Membros de classes","slug":"membros-de-instancia-e-membros-de-classes","link":"#membros-de-instancia-e-membros-de-classes","children":[{"level":3,"title":"Métodos estáticos","slug":"metodos-estaticos","link":"#metodos-estaticos","children":[]},{"level":3,"title":"Constantes","slug":"constantes","link":"#constantes","children":[]}]},{"level":2,"title":"Associações","slug":"associacoes","link":"#associacoes","children":[{"level":3,"title":"Agregação","slug":"agregacao","link":"#agregacao","children":[]},{"level":3,"title":"Composição","slug":"composicao","link":"#composicao","children":[]}]},{"level":2,"title":"Encapsulamento","slug":"encapsulamento","link":"#encapsulamento","children":[{"level":3,"title":"Pacotes","slug":"pacotes","link":"#pacotes","children":[]},{"level":3,"title":"Importar uma classe","slug":"importar-uma-classe","link":"#importar-uma-classe","children":[]},{"level":3,"title":"Modificadores de acesso","slug":"modificadores-de-acesso","link":"#modificadores-de-acesso","children":[]},{"level":3,"title":"Por que encapsulamento?","slug":"por-que-encapsulamento","link":"#por-que-encapsulamento","children":[]}]},{"level":2,"title":"Referências","slug":"referencias","link":"#referencias","children":[]}],"git":{"createdTime":1726179365000,"updatedTime":1726179365000,"contributors":[{"name":"leandro-costa","email":"leandro.costa@ifba.edu.br","commits":1}]},"readingTime":{"minutes":12.62,"words":3786},"filePathRelative":"posts/OO/01_revisao_poo.md","localizedDate":"14 de março de 2024","autoDesc":true}');export{u as comp,d as data};
