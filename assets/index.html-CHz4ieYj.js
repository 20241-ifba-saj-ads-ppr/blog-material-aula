import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a,b as s,e as i}from"./app-D1DVgmHE.js";const l={},u={href:"https://mermaid.live/edit#pako:eNqlkbFuAyEMhl8FeWrU3AugLFW7dkqVicUBekEBfPLBUF3v3csdyYm26lQW7O-3fmw8gSZjQYL2OI4vDnvGoKIo52kYvNOYHEVx6DoSJ-u0t1WssTh8dp1446yvv_Ez8jcoxeMxsYu90OTpL-3MGE2rFakGD7sfWHuKK618naA2M1UiNtdQhvQbLJ3dzURjs2Rz61Xq_uXUejW_Od2VGfYQLAd0pmxgfUpButhgFcgSGuSrAhWXOsyJjh9Rg0yc7R6Ycn8B-Y5-LFkeDCZ7W99GrXGJ-PW24OWavwD0s5nR",target:"_blank",rel:"noopener noreferrer"};function r(d,n){const e=p("ExternalLinkIcon");return o(),c("div",null,[n[2]||(n[2]=a(`<h1 id="prototype" tabindex="-1"><a class="header-anchor" href="#prototype"><span>Prototype</span></a></h1><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><p>O Prototype é um padrão de projeto criacional que permite copiar objetos existentes sem fazer seu código ficar dependente de suas classes.</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><p>O objetivo do prototype é criar objetos existentes sem a necessidade da criação de uma nova classe, ou da dependência das mesmas. Problema</p><p>Numa situação em que você tem um objeto, e planeja criar uma copia desse objeto, sem a utilização desse padrão, você precisaria atribuir a esse novo objeto todos os atributos do objeto original, além de que no objeto original podem haver atributos privados.</p><p>Outro problema é que você precisa saber a classe do objeto original para gerar uma copia com os mesmos atributos, e em algumas vezes só há o conhecimento da interface que o objeto original implementa, sem saber o resto.</p><p>Ainda seguindo os problemas que esse padrão se propõe a resolver, supondo que você faca parte de uma equipe de desenvolvimento de software em uma grande multinacional, e o produto desenvolvido requer alta performance. Toda vez que você deseja instanciar um objeto, a maneira mais fácil seria apenas gerar uma nova instancia da classe, contudo, essa nova instancia pode gerar uma nova conexão com o banco de dados, ou realizar a leitura de um arquivo em algum repositório, operações que vão afetar no desempenho, e caso haja a necessidade de criar diversos objetos, haverá um problema consistente de performance, então, por que não apenas clonar um único objeto que já está devidamente configurado e preparado para o uso?</p><h2 id="solucao" tabindex="-1"><a class="header-anchor" href="#solucao"><span>Solução</span></a></h2><p>O padrão prototype define que o objeto deve ser capaz de gerar um clone de si mesmo. O padrão define uma interface comum, com a função de clonar, e todos os objetos que implementem essa interface implementarão esse método gerando uma instancia de si mesmo, esse método de clonagem permite até mesmo carregar atributos privados do objeto original, que estarão presentes na instancia gerada no método de clonagem. Um objeto que suporta a clonagem é chamado de protótipo, e se demonstra muito útil quando seu objeto possui diversos atributos e várias possibilidades distintas de configuração, sendo uma alternativa valida para a utilização de subclasses.</p><p>A clonagem do desse padrão de apresenta de duas formas:</p><ul><li><p>Shallow Copy: Na copia superficial, caso os atributos do objeto original sejam primitivos, o objeto gerado irá receber todos os valores desses atributos, contudo, caso haja um atributo que seja a referencia a algum outro objeto, o objeto gerado não receberá o objeto, mas o original passará a frente essa referencia para o seu clone, podendo ambos, objeto original e objeto gerado, terem acesso ao mesmo objeto por referencia, possibilitando o uso e alteração desse objeto passado por referencia.</p></li><li><p>Deep Copy: Na copia profunda, além do objeto copiar os dados dos atributos primitivos, quando há um atributo não primitivo, caberá ao objeto original gerar uma nova instancia dessa dependência e passa-lo para o objeto clone, realizando o desacoplamento da dependência de ambos, tendo em vista que cada um deles terá acesso a uma instancia diferente daquela dependência.</p></li></ul><p>Não existe uma regra definitiva para a aplicação do Shallow copy ou Deep copy, tudo vai depender de como será aplicado e requerido pelo desenvolvedor, contudo, existem dicas de uso que são as seguintes: Se você está lidando com dependências que possuem métodos e atributos imutáveis, ou seja, não mudarão durante o programa desde a sua instancia, o melhor caminho é utilizar a Shallow copy, mas, se as suas dependências podem mudar seus atributos ou comportamentos ao decorrer do programa, e essas mudanças podem influenciar no comportamento do mesmo, o ideal seria a Deep copy.</p><h2 id="aplicabilidade-estrutura" tabindex="-1"><a class="header-anchor" href="#aplicabilidade-estrutura"><span>Aplicabilidade / Estrutura</span></a></h2><p>Para a aplicação do prototype, inicialmente é necessário que exista uma interface, a qual declarará o método de clonagem, como no exemplo abaixo disponibilizado pelo refactoring guru:</p><figure><img src="https://refactoring.guru/images/patterns/diagrams/prototype/example.png" alt="Diagrama de classe Refactoring Guru" tabindex="0" loading="lazy"><figcaption>Diagrama de classe Refactoring Guru</figcaption></figure><p>No exemplo acima a interface Shape declara o método *clone(), o qual as subclasses devem invocar o método de clonagem superior antes de copiar seus valores e campos.</p><p>Seguindo o exemplo de código disponibilizado pelo Refactoring Guru em Java, mostrando a implementação do padrão.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">refactoring_guru<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>example<span class="token punctuation">.</span>shapes</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>
	
  <span class="token keyword">public</span> <span class="token class-name">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token class-name">Shape</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> target<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> target<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> target<span class="token punctuation">.</span>color<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Shape</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>object2 <span class="token keyword">instanceof</span> <span class="token class-name">Shape</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">Shape</span> shape2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Shape</span><span class="token punctuation">)</span> object2<span class="token punctuation">;</span>
    <span class="token keyword">return</span> shape2<span class="token punctuation">.</span>x <span class="token operator">==</span> x <span class="token operator">&amp;&amp;</span> shape2<span class="token punctuation">.</span>y <span class="token operator">==</span> y <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>shape2<span class="token punctuation">.</span>color<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O exemplo acima declara a interface Shape, contendo os atributos x, y e color, além dos construtores, sobrescrita do equals e o método abstrato de clonagem que deve ser implementado pelas classes filhas</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">refactoring_guru<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>example<span class="token punctuation">.</span>shapes</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> radius<span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token class-name">Circle</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> target<span class="token punctuation">.</span>radius<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Shape</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>object2 <span class="token keyword">instanceof</span> <span class="token class-name">Circle</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>object2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">Circle</span> shape2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">)</span> object2<span class="token punctuation">;</span>
    <span class="token keyword">return</span> shape2<span class="token punctuation">.</span>radius <span class="token operator">==</span> radius<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Já no exemplo acima, há a implementação do método <em>clone()</em> , que retorna uma instancia preenchida com os dados de si mesmo, vale notar que cada classe que implementa o protótipo deve sobrescrever o método <em>clonar()</em> levando em consideração a instancia de resposta fornecida por esse método.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">refactoring_guru<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">refactoring_guru<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>example<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span></span><span class="token class-name">Circle</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">refactoring_guru<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>example<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span></span><span class="token class-name">Shape</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span> shapes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span> shapesCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token class-name">Circle</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  circle<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  circle<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  circle<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
  circle<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
  shapes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>circle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token class-name">Circle</span> anotherCircle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">)</span> circle<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  shapes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>anotherCircle<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token function">cloneAndCompare</span><span class="token punctuation">(</span>shapes<span class="token punctuation">,</span> shapesCopy<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cloneAndCompare</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span> shapes<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Shape</span><span class="token punctuation">&gt;</span></span> shapesCopy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Shape</span> shape <span class="token operator">:</span> shapes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      shapesCopy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>shape<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> shapes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>shapes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> shapesCopy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;: Shapes are different objects (yay!)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>shapes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>shapesCopy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;: And they are identical (yay!)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;: But they are not identical (booo!)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;: Shape objects are the same (booo!)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O código acima exibirá a saída do comparativo entre os objetos da lista:</p><pre><code>0: Shapes are different objects (yay!)
0: And they are identical (yay!)
1: Shapes are different objects (yay!)
1: And they are identical (yay!)
</code></pre><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h2><ul><li>Prototype <ul><li>declara uma interface para clonar a si próprio.</li></ul></li><li>ConcretePrototype <ul><li>implementa uma operação para clonar a si próprio.</li></ul></li><li>Client <ul><li>cria um novo</li></ul></li></ul><h2 id="outro-exemplo" tabindex="-1"><a class="header-anchor" href="#outro-exemplo"><span>Outro Exemplo</span></a></h2><p>Exemplo com classe veiculo:</p>`,29)),s("figure",null,[s("a",u,[n[0]||(n[0]=s("img",{src:"https://mermaid.ink/img/pako:eNqlkbFuAyEMhl8FeWrU3AugLFW7dkqVicUBekEBfPLBUF3v3csdyYm26lQW7O-3fmw8gSZjQYL2OI4vDnvGoKIo52kYvNOYHEVx6DoSJ-u0t1WssTh8dp1446yvv_Ez8jcoxeMxsYu90OTpL-3MGE2rFakGD7sfWHuKK618naA2M1UiNtdQhvQbLJ3dzURjs2Rz61Xq_uXUejW_Od2VGfYQLAd0pmxgfUpButhgFcgSGuSrAhWXOsyJjh9Rg0yc7R6Ycn8B-Y5-LFkeDCZ7W99GrXGJ-PW24OWavwD0s5nR?type=png",alt:"",tabindex:"0",loading:"lazy"},null,-1)),i(e)]),n[1]||(n[1]=s("figcaption",null,null,-1))]),n[3]||(n[3]=a(`<p>O diagrama acima representa a criação de uma frota de veiculos a partir da clonagem de um veiculo original, podendo realizar alterações como modelo, ou cor do mesmo.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Veicle</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> <span class="token class-name">Veicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token class-name">Veicle</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> target<span class="token punctuation">.</span>brand<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> target<span class="token punctuation">.</span>color<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Shape</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>object2 <span class="token keyword">instanceof</span> <span class="token class-name">Veicle</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">Veicle</span> veicle2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Veicle</span><span class="token punctuation">)</span> object2<span class="token punctuation">;</span>
    <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>veicle2<span class="token punctuation">.</span>brand<span class="token punctuation">,</span> brand<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>veicle2<span class="token punctuation">.</span>color<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Acima a implementação da interface Veicle.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Veicle</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> string model<span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">Circle</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token operator">=</span> target<span class="token punctuation">.</span>model<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>object2 <span class="token keyword">instanceof</span> <span class="token class-name">Car</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>object2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">Car</span> car2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">)</span> object2<span class="token punctuation">;</span>
    <span class="token keyword">return</span> car2<span class="token punctuation">.</span>model <span class="token operator">==</span> model<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Acima, temos a classe Car, que implementa a inteface Veicle, implementando também o metodo clone(), aonde ele repassa para o seu clone uma nova instancia com os atributos de si mesmo.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Veicle</span><span class="token punctuation">&gt;</span></span> veicleList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Veicle</span><span class="token punctuation">&gt;</span></span> veicleListcopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        circle<span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token string">&quot;Jetta&quot;</span><span class="token punctuation">;</span>  
        circle<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">&quot;VW&quot;</span><span class="token punctuation">;</span>  
        circle<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&quot;Black&quot;</span><span class="token punctuation">;</span>  
        veicleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
        <span class="token class-name">Car</span> anotherCer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">)</span> car<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        veicleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>anotherCer<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cloneAndCompare</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Veicle</span><span class="token punctuation">&gt;</span></span> veicleList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Veicle</span><span class="token punctuation">&gt;</span></span> veicleListcopy<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Veicle</span> veicle <span class="token operator">:</span> veicleList<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            veicleListcopy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>veicle<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
  
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> veicleList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token keyword">if</span> <span class="token punctuation">(</span>veicleList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> veicleListcopy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;: Veicles are different objects&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token keyword">if</span> <span class="token punctuation">(</span>veicleList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>veicleListcopy<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;: And they are identical &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;: But they are not identical&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token punctuation">}</span>  
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;: Veicles objects are the same&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Acima temos o exemplo de funcionamento de uma frota de veiculos, aonde um veiculo original irá se clonar, gerando uma frota de veiculos identicos a si mesmo, aonde só existe a necessidade de alterar alguns atributos específicos, ao invés de gerar uma nova instancia e ter de popular os atributos manualmente e com código repetitivo.</p><h2 id="consequencia" tabindex="-1"><a class="header-anchor" href="#consequencia"><span>Consequência</span></a></h2><p>Ao utilizar o padrão prototype, você adquire alguns benefícios como poder realizar a clonagem dos objetos sem acoplá-los a sua classe concreta, não existe mais a necessidade de ter código de inicialização de objeto repetitivo, basta clonar o objeto e configurar da forma pretendida, é possível produzir objetos mais complexos com mais facilidade além de ter uma alternativa para herança quando lidar com configurações complexas e pré-determinadas de um objeto, contudo, diante desses benefícios, existe o problema de clonagem de objetos que possuem dependências circulares, o que pode ser um problema considerável a depender da complexidade do objeto.</p><h2 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos"><span>Usos Conhecidos</span></a></h2><p>Talvez o primeiro exemplo do padrão Prototype se encontre no sistema Sketchpad de Ivan Sutherland. A primeira aplicação amplamente conhecida do padrão numa linguagem orientada a objeto foi em ThingLab, na qual os usuários poderiam formar um objeto composto e então promovê-lo a um protótipo pela sua instalação numa biblioteca de objetos reutilizáveis</p><h2 id="padroes-relacionados" tabindex="-1"><a class="header-anchor" href="#padroes-relacionados"><span>Padrões Relacionados</span></a></h2><ul><li><p>Diversos projetos iniciam utilizando o Factory, por ser menos complexo, e com o decorrer do escalnamento, migra para o Abstract Fabtory ou o Prototype</p></li><li><p>É possível compor métodos de classes Abstract Factory com o Prototype</p></li><li><p>As Fábricas Abstratas, Construtores, e Protótipos podem todos ser implementados como Singletons.</p></li><li><p>Projetos que usam o Composite ou Decorator podem utilizar do Prototype para criar clones de estruturas complexas sem precisar construi-las do zero</p></li></ul>`,13))])}const v=t(l,[["render",r],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/includes/seminario-1-GabrielMreira/","title":"Prototype","lang":"pt-BR","frontmatter":{"description":"Prototype Intenção O Prototype é um padrão de projeto criacional que permite copiar objetos existentes sem fazer seu código ficar dependente de suas classes. Motivação O objetiv...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/includes/seminario-1-GabrielMreira/"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Prototype"}],["meta",{"property":"og:description","content":"Prototype Intenção O Prototype é um padrão de projeto criacional que permite copiar objetos existentes sem fazer seu código ficar dependente de suas classes. Motivação O objetiv..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://refactoring.guru/images/patterns/diagrams/prototype/example.png"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Prototype\\",\\"image\\":[\\"https://refactoring.guru/images/patterns/diagrams/prototype/example.png\\",\\"https://mermaid.ink/img/pako:eNqlkbFuAyEMhl8FeWrU3AugLFW7dkqVicUBekEBfPLBUF3v3csdyYm26lQW7O-3fmw8gSZjQYL2OI4vDnvGoKIo52kYvNOYHEVx6DoSJ-u0t1WssTh8dp1446yvv_Ez8jcoxeMxsYu90OTpL-3MGE2rFakGD7sfWHuKK618naA2M1UiNtdQhvQbLJ3dzURjs2Rz61Xq_uXUejW_Od2VGfYQLAd0pmxgfUpButhgFcgSGuSrAhWXOsyJjh9Rg0yc7R6Ycn8B-Y5-LFkeDCZ7W99GrXGJ-PW24OWavwD0s5nR?type=png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":2,"title":"Solução","slug":"solucao","link":"#solucao","children":[]},{"level":2,"title":"Aplicabilidade / Estrutura","slug":"aplicabilidade-estrutura","link":"#aplicabilidade-estrutura","children":[]},{"level":2,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":2,"title":"Outro Exemplo","slug":"outro-exemplo","link":"#outro-exemplo","children":[]},{"level":2,"title":"Consequência","slug":"consequencia","link":"#consequencia","children":[]},{"level":2,"title":"Usos Conhecidos","slug":"usos-conhecidos","link":"#usos-conhecidos","children":[]},{"level":2,"title":"Padrões Relacionados","slug":"padroes-relacionados","link":"#padroes-relacionados","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.43,"words":1628},"filePathRelative":"includes/seminario-1-GabrielMreira/README.md","autoDesc":true}');export{v as comp,b as data};
