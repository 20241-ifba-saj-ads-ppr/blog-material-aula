import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as a,d as e,e as o,a as t,o as i,r as l}from"./app-BrOvOMMH.js";const u={},r={href:"https://github.com/JoaoAugustoMPdJ",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/RiansFonseca",target:"_blank",rel:"noopener noreferrer"};function k(m,n){const s=l("ExternalLinkIcon");return i(),c("div",null,[n[2]||(n[2]=a("h1",{id:"front-controller",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#front-controller"},[a("span",null,"Front Controller")])],-1)),n[3]||(n[3]=a("h2",{id:"joao-augusto-moura-peixoto-de-jesus-20211tadssaj0004",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#joao-augusto-moura-peixoto-de-jesus-20211tadssaj0004"},[a("span",null,"João Augusto Moura Peixoto de Jesus (20211TADSSAJ0004)")])],-1)),a("p",null,[a("a",r,[n[0]||(n[0]=e("@JoaoAugustoMPdJ")),o(s)])]),n[4]||(n[4]=t(`<h1 id="padrao-de-projeto-front-controller-por-joao-augusto" tabindex="-1"><a class="header-anchor" href="#padrao-de-projeto-front-controller-por-joao-augusto"><span>Padrão de Projeto: Front Controller por João Augusto</span></a></h1><h3 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h3><p>O padrão Front Controller visa centralizar o gerenciamento de requisições em uma única entidade, que controla e direciona o fluxo de uma aplicação. Em vez de ter múltiplos pontos de entrada em uma aplicação, o Front Controller unifica as requisições, permitindo um controle mais eficiente e coeso.</p><h3 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h3><p>Em aplicações complexas, como sistemas web ou jogos, pode haver uma grande variedade de requisições que precisam ser processadas. Se cada parte do sistema gerencia suas próprias requisições, isso pode levar a uma duplicação de código, dificuldade de manutenção e problemas de segurança. O padrão Front Controller centraliza esse processo, garantindo que todas as requisições sejam tratadas de maneira uniforme e coordenada.</p><h3 id="outros-nomes" tabindex="-1"><a class="header-anchor" href="#outros-nomes"><span>Outros Nomes</span></a></h3><ul><li><em>Application Controller</em></li><li><em>Request Controller</em></li></ul><h3 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h3><p>A estrutura básica do padrão <em>Front Controller</em> inclui os seguintes componentes:</p><ul><li><em>FrontController</em>: Recebe todas as requisições e decide qual ação tomar. Pode incluir funcionalidades adicionais como autenticação e registro de logs.</li><li><em>Dispatcher</em>: Encaminha a requisição para o controlador apropriado com base na natureza da solicitação.</li><li><em>Controller</em>: Classes que processam a lógica específica para cada tipo de requisição.</li><li><em>View</em>: Classes que representam a interface que será apresentada ao usuário.</li></ul><p><em>Estrutura básica do UML</em>:</p><figure><img src="https://www.plantuml.com/plantuml/svg/ZPFFJiCm3CRlVGeVYqPVe8Uf4uWJ1mJIxg6nsaXPiYKf4qAyEutxPwcxJHmgfVu-sx_4IUM3SA4xwAoQLxKMtiEBioOyzP-pMgE3dmoW0AdyKOIwHLV2yxpkfGsqmaYDxtZgq8VSuQc4Z-2KQHwXyz4__3sKy6MLf1JbTrreqGHLYu0oPxvFQpKAGrPjcokbfsA_sKXzOHg1XJmeSzb62RjbO32vda3ZmiP3PEmfbjLUbm52dSxeBYZ38DeD-DQUINaJ3URh90wLfWtQzKI6cQIHSgDR1DahF8_sk2yjlczY_STAxUuR-SKhYcrwrP89HuMFaykhCJ837o2VozmZGcVh0IHDoC5FUkv1QeL6nYSsBVu0" alt="uml diagram" loading="lazy"><figcaption>Estrutura Front Controler.</figcaption></figure><h3 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes"><span>Colaborações</span></a></h3><ul><li>O <em>FrontController</em> recebe todas as requisições do sistema e delega o processamento ao <strong>Dispatcher</strong>.</li><li>O <em>Dispatcher</em> analisa a requisição e encaminha para o <em>Controller</em> específico que lida com aquela ação.</li><li>O <em>Controller</em> processa a lógica da ação e seleciona a <em>View</em> apropriada para exibição.</li><li>A <em>View</em> exibe a interface ao usuário com base nas informações fornecidas pelo <em>Controller</em>.</li></ul><h3 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Consequências</span></a></h3><p><em>Benefícios</em>:</p><ul><li><em>Centralização do Controle</em>: Todas as requisições passam por um único ponto, facilitando a gestão e aplicação de políticas comuns, como autenticação e logging.</li><li><em>Facilidade de Manutenção</em>: Reduz a duplicação de código, já que a lógica de controle é centralizada.</li><li><em>Reutilização de Código</em>: Promove a reutilização de lógica de controle e despacho.</li></ul><p><em>Desvantagens</em>:</p><ul><li><em>Ponto Único de Falha</em>: Se o Front Controller falhar, toda a aplicação pode ficar indisponível.</li><li><em>Complexidade Inicial</em>: A configuração inicial pode ser mais complexa, especialmente em aplicações pequenas.</li></ul><h3 id="implementacao-conhecida" tabindex="-1"><a class="header-anchor" href="#implementacao-conhecida"><span>Implementação Conhecida</span></a></h3><p><em>Servlets em Java</em>: Em muitas aplicações Java, os Servlets atuam como Front Controllers, recebendo todas as requisições HTTP e despachando-as para os controladores e views apropriados. Frameworks como Struts e Spring MVC utilizam o conceito de Front Controller em suas arquiteturas.</p><h3 id="padroes-relacionados" tabindex="-1"><a class="header-anchor" href="#padroes-relacionados"><span>Padrões Relacionados</span></a></h3><ul><li><em>View Helper</em>: Ajuda na separação da lógica de apresentação da lógica de controle. O Front Controller delega a exibição à View, que pode usar View Helpers para formatar dados.</li><li><em>Intercepting Filter</em>: Pode ser utilizado junto com Front Controller para realizar pré-processamento de requisições (como autenticação, logging) antes de chegar ao controlador.</li></ul><h4 id="exemplo-de-codigo-em-java" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo-em-java"><span>Exemplo de Código em Java</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Front Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FrontController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Dispatcher</span> dispatcher<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">FrontController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dispatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isAuthenticUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;User is authenticated successfully.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">trackRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Page requested: &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchRequest</span><span class="token punctuation">(</span><span class="token class-name">String</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Track each request</span>
        <span class="token function">trackRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// Authenticate the user</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAuthenticUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dispatcher<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Dispatcher</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dispatcher</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">HomeView</span> homeView<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">StudentView</span> studentView<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        homeView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HomeView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        studentView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;STUDENT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            studentView<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            homeView<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Command/View</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeView</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Displaying Home Page&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentView</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Displaying Student Page&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Testando o Front Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FrontControllerPatternDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FrontController</span> frontController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FrontController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frontController<span class="token punctuation">.</span><span class="token function">dispatchRequest</span><span class="token punctuation">(</span><span class="token string">&quot;HOME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frontController<span class="token punctuation">.</span><span class="token function">dispatchRequest</span><span class="token punctuation">(</span><span class="token string">&quot;STUDENT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h3><ol><li><p><em>FrontController</em></p><ul><li><em>Responsabilidade</em>: Centralizar a gestão de todas as requisições e decidir para onde elas devem ser encaminhadas.</li><li><em>Métodos</em>: <ul><li><code>handleAction(String action)</code>: Processa a ação solicitada e despacha para o controlador apropriado.</li><li><code>logAction(String action)</code>: Registra a ação recebida para fins de auditoria ou depuração.</li></ul></li></ul></li><li><p><em>Dispatcher</em></p><ul><li><em>Responsabilidade</em>: Encaminhar a requisição ao controlador apropriado com base na ação solicitada.</li><li><em>Métodos</em>: <ul><li><code>dispatch(String action)</code>: Encaminha a requisição ao controlador correto.</li></ul></li></ul></li><li><p><em>Controller</em></p><ul><li><em>Responsabilidade</em>: Processar a lógica específica da requisição e preparar os dados para a exibição.</li><li><em>Métodos</em>: <ul><li>Métodos específicos para cada tipo de controle, como <code>showInventory()</code>, <code>startCombat()</code>, <code>showStatus()</code>.</li></ul></li></ul></li><li><p><em>View</em></p><ul><li><em>Responsabilidade</em>: Exibir a interface do usuário com base nos dados fornecidos pelo controlador.</li><li><em>Métodos</em>: <ul><li><code>display()</code>: Método para exibir a interface correspondente.</li></ul></li></ul></li></ol><h3 id="meu-exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#meu-exemplo-de-codigo"><span>Meu exemplo de Código</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Front Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FrontController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Dispatcher</span> dispatcher<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">FrontController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dispatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">logAction</span><span class="token punctuation">(</span><span class="token class-name">String</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Ação recebida: &quot;</span> <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleAction</span><span class="token punctuation">(</span><span class="token class-name">String</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Log da ação</span>
        <span class="token function">logAction</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// Despacha a ação para o Dispatcher</span>
        dispatcher<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Dispatcher</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dispatcher</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">InventoryController</span> inventoryController<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">CombatController</span> combatController<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">StatusController</span> statusController<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        inventoryController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InventoryController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        combatController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CombatController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        statusController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatusController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&quot;inventario&quot;</span><span class="token operator">:</span>
                inventoryController<span class="token punctuation">.</span><span class="token function">showInventory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;combate&quot;</span><span class="token operator">:</span>
                combatController<span class="token punctuation">.</span><span class="token function">startCombat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&quot;status&quot;</span><span class="token operator">:</span>
                statusController<span class="token punctuation">.</span><span class="token function">showStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Ação desconhecida.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Controllers e Views</span>
<span class="token keyword">class</span> <span class="token class-name">InventoryController</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showInventory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InventoryView</span> inventoryView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InventoryView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inventoryView<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">CombatController</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startCombat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CombatView</span> combatView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CombatView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        combatView<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">StatusController</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StatusView</span> statusView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatusView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        statusView<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Views</span>
<span class="token keyword">class</span> <span class="token class-name">InventoryView</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Exibindo o Inventário&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">CombatView</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Iniciando Combate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">StatusView</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Exibindo Status do Personagem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Testando o Front Controller no RPG</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RPGFrontControllerDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FrontController</span> frontController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FrontController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frontController<span class="token punctuation">.</span><span class="token function">handleAction</span><span class="token punctuation">(</span><span class="token string">&quot;inventario&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frontController<span class="token punctuation">.</span><span class="token function">handleAction</span><span class="token punctuation">(</span><span class="token string">&quot;combate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frontController<span class="token punctuation">.</span><span class="token function">handleAction</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="diagrama" tabindex="-1"><a class="header-anchor" href="#diagrama"><span>Diagrama</span></a></h3><img src="https://www.plantuml.com/plantuml/svg/ZLFB3i8W4Bpp5NkiCVv03wP6O-BPn3ksf2MXO62hCSP_jwMrKAYF0u7ip7PcEv0Pf1gRMf1iFEM26WDxhIHkswML44p3Wm0ieU3cGZ6lc4vXDvujL55P2BR9aIkPKBkbS4JDPRb8uQfuOMb2bLyvJp8OS9yVjBcyCebAtvsh50vnqP9pLPyf-injKB6qTcXiZ4yx1fN9sByypxWPp9jAtKOqYHf3S--kBfCUYtj2fvvI3oMV_PquktcH2lhHqp_CNkuxCxnFgzNQlq5UsXqo5sj0YV8Cy2Z8kN0cMjq094h2QLay-kjEo-8PauLzJ_t-0W00" alt="uml diagram" loading="lazy"><h4 id="explicacao" tabindex="-1"><a class="header-anchor" href="#explicacao"><span>Explicação</span></a></h4><p>Neste exemplo, o Front Controller gerencia as ações do jogador em um jogo de RPG, como acessar o inventário, iniciar um combate ou verificar o status do personagem. O Dispatcher distribui essas ações para os controladores corretos, que então chamam as Views apropriadas para exibir as telas correspondentes. Esse exemplo é adaptado para um contexto de jogo, o que ajuda a ilustrar como o padrão Front Controller pode ser aplicado em diferentes tipos de aplicações.</p><h2 id="rian-silva-da-fonseca-20221tadssaj0002" tabindex="-1"><a class="header-anchor" href="#rian-silva-da-fonseca-20221tadssaj0002"><span>Rian Silva da Fonseca (20221TADSSAJ0002)</span></a></h2>`,34)),a("p",null,[a("a",d,[n[1]||(n[1]=e("@RiansFonseca")),o(s)])]),n[5]||(n[5]=t(`<h2 id="introducao" tabindex="-1"><a class="header-anchor" href="#introducao"><span>Introdução</span></a></h2><p>O padrão de projeto Front Controller é amplamente utilizado em frameworks modernos e sistemas web para gerenciar requisições de forma centralizada. Ele é implementado em frameworks como Struts e JSF, que são amplamente utilizados em projetos Java para aplicações web. O Front Controller atua como um ponto único de entrada para tratar todas as solicitações de um site e direcionar para as ações apropriadas, facilitando a implementação de funcionalidades transversais como segurança, internacionalização e resposta a páginas. No restante deste artigo, exploraremos o funcionamento do padrão, suas vantagens, desvantagens e apresentaremos um exemplo prático.</p><h2 id="intencao-1" tabindex="-1"><a class="header-anchor" href="#intencao-1"><span>Intenção</span></a></h2><p>O padrão Front Controller visa centralizar o tratamento de todas as requisições em uma única entidade, o controlador frontal. Esse controlador recebe todas as solicitações do usuário, processa as informações necessárias e encaminha a requisição para o manipulador adequado, que pode então gerar a resposta apropriada. O objetivo é evitar a duplicação de lógica comum, consolidando o tratamento de solicitações em um único ponto e melhorando a manutenção e a organização do código.</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como"><span>Também conhecido como</span></a></h2><ul><li><strong>Controlador Frontal</strong></li><li><strong>Main Controller</strong></li><li><strong>Central Controller</strong></li></ul><h2 id="motivacao-1" tabindex="-1"><a class="header-anchor" href="#motivacao-1"><span>Motivação</span></a></h2><p>Em aplicações web complexas, muitas funcionalidades precisam ser implementadas de maneira uniforme para cada solicitação, como segurança, internacionalização e geração de páginas. Se cada funcionalidade for tratada separadamente em diferentes partes da aplicação, isso pode levar a uma duplicação de código e dificultar a manutenção. O Front Controller resolve esse problema ao consolidar o tratamento dessas requisições em um único controlador, o que simplifica a implementação e a manutenção, e permite a aplicação de decoradores para funcionalidades adicionais.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade"><span>Aplicabilidade</span></a></h2><p>O padrão Front Controller é aplicável quando:</p><ul><li>Há necessidade de um ponto único para o tratamento de todas as requisições de uma aplicação web.</li><li>É necessário implementar funcionalidades comuns a todas as requisições, como autenticação, autorização e logging.</li><li>A aplicação possui múltiplas páginas ou ações que precisam de um tratamento uniforme.</li></ul><h2 id="estrutura-1" tabindex="-1"><a class="header-anchor" href="#estrutura-1"><span>Estrutura</span></a></h2><figure><img src="https://github.com/user-attachments/assets/64af2200-293c-4c79-a94b-74c6a4cc1c04" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="participantes-1" tabindex="-1"><a class="header-anchor" href="#participantes-1"><span>Participantes</span></a></h2><ul><li><p><strong>Handler (ou Manipulador Web)</strong>: O Handler é um componente do FrontController que lida diretamente com a requisição. Ele recebe as solicitações HTTP (POST, GET, etc.), analisa a URL e decide qual comando deve ser executado. O Handler é responsável por fazer o roteamento das requisições para os comandos específicos e, portanto, é uma parte fundamental do FrontController.</p></li><li><p><strong>Command</strong>: Um Command é uma interface ou classe abstrata que define a estrutura para os comandos executáveis. Cada comando é uma implementação concreta que encapsula a lógica para processar uma requisição específica e determina a resposta adequada. O Command interage com o modelo e decide qual visualização deve ser usada para gerar a resposta.</p></li><li><p><strong>View</strong>: A View é responsável por renderizar a resposta final que será enviada ao usuário. Depois que um Command processa a requisição, ele decide qual View deve ser utilizada para apresentar a resposta. A View cuida da geração da saída, exibindo as informações de acordo com a lógica definida pelo Command.</p></li></ul><h2 id="consequencias-1" tabindex="-1"><a class="header-anchor" href="#consequencias-1"><span>Consequências</span></a></h2><ul><li><strong>Centralização</strong>: O Front Controller centraliza o tratamento das requisições, simplificando a configuração e manutenção.</li><li><strong>Flexibilidade</strong>: Permite a adição de novos comandos dinamicamente sem necessidade de alterar o controlador principal.</li><li><strong>Concorrência</strong>: Como os comandos são criados por solicitação, não há preocupação com concorrência, já que cada comando é isolado.</li><li><strong>Extensibilidade</strong>: Decoradores podem ser usados para adicionar funcionalidades como autenticação e codificação de caracteres em tempo de execução.</li></ul><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao"><span>Implementação</span></a></h2><p>A aplicação é relativamente simples, mas demonstra claramente o objetivo do padrão e como ele pode ser estruturado através de um controlador e objetos de comando associados. Basicamente temos uma aplicação que tem uma página inicial contendo um link para noticias e informações de um clube de futebol (grêmio) e outro link para informações de outro clube de futebol (internacional). Dependendo do link clicado a aplicação recebe a URL e desmembra essa URL em busca do Comando a ser chamado. Esse Comando terá a responsabilidade de repassar para a tela do usuário a página correta para a solicitação do usuário. ###Estrutura <img src="https://github.com/user-attachments/assets/d0bb004e-fcaf-4441-a72f-94f8fd51f798" alt="image" loading="lazy"></p><h3 id="classe-controller" tabindex="-1"><a class="header-anchor" href="#classe-controller"><span>Classe Controller</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Controller</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>

	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

        <span class="token comment">//Executa o Comando conforme a URL</span>
        <span class="token class-name">Command</span> comando <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		comando <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Command</span><span class="token punctuation">)</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;commands.&quot;</span><span class="token operator">+</span>request
        <span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

       comando<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Podemos verificar no código acima que os métodos doGet() e doPost() recebem solicitações HTTP do tipo GET ou POST. Ambos delegam para o método processRequest() que pega o parâmetro “command” da URL e associa com uma classe Command. Para exemplificar podemos considerar a URL abaixo:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span><span class="token class-name">ProjetoFrontController</span><span class="token operator">/</span><span class="token class-name">Controller</span><span class="token operator">?</span>command<span class="token operator">=</span><span class="token class-name">ExibePaginaGremistas</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>O nosso Controlador pega o que foi passado como valor no parâmetro “command” (o valor está depois do igual), ou seja, “ExibePaginaGremistas”, e chama a classe Comando que possui este nome. Por sua vez o Comando é responsável por direcionar o usuário para uma página especifica. O Comando também poderia fazer diversas outras coisas mais especificas, mas nesse caso para exemplificar ele apenas chama a página de exibição adequada para a solicitação do usuário. Segue nas Listagens 2, 3 e 4 um exemplo da interface Command e das classes concretas ExibePaginaGremistas e ExibePaginaColorados.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExibePaginaColorados</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>

			<span class="token class-name">RequestDispatcher</span> d <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/colorados.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			d<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExibePaginaGremistas</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>

			<span class="token class-name">RequestDispatcher</span> d <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/gremistas.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			d<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo"><span>Exemplo de Código</span></a></h1><p>O exemplo abaixo trata-se de uma simples API REST de calculadora feita com o Spring-Boot, framework que facilita os conceitos pregados pelo Padrão de Projeto Front Controller. A API vai receber os parâmetros via URL, e por conta das facilidades oferecidas pelo Spring, a requisição enviada já será direcionada para seu respectivo endpoint com base no endereço mapeado para ele, e assim, será encaminhada para seu respectivo service (Comand), que realizará a operação.</p><h2 id="classe-controller-1" tabindex="-1"><a class="header-anchor" href="#classe-controller-1"><span>Classe Controller</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/calculate&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControladorCalculadora</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{operacao}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> operacao<span class="token punctuation">,</span> 
                                           <span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">double</span> a<span class="token punctuation">,</span> 
                                           <span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Operacao</span> service <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Operacao</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.seu.pacote.Servico&quot;</span> <span class="token operator">+</span> <span class="token function">capitalize</span><span class="token punctuation">(</span>operacao<span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                <span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                <span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">calcular</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">badRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span>
        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="interface-service-interface-command" tabindex="-1"><a class="header-anchor" href="#interface-service-interface-command"><span>Interface Service (Interface Command)</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Operacao</span> <span class="token punctuation">{</span>
    <span class="token class-name">Double</span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="service-soma-concret-command" tabindex="-1"><a class="header-anchor" href="#service-soma-concret-command"><span>Service Soma (Concret Command)</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServicoSoma</span> <span class="token keyword">implements</span> <span class="token class-name">Operacao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="service-subtracao-concret-command" tabindex="-1"><a class="header-anchor" href="#service-subtracao-concret-command"><span>Service Subtração (Concret Command)</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServicoSubtracao</span> <span class="token keyword">implements</span> <span class="token class-name">Operacao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="service-multiplicacao-concret-command" tabindex="-1"><a class="header-anchor" href="#service-multiplicacao-concret-command"><span>Service Multiplicação (Concret Command)</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServicoMultiplicacao</span> <span class="token keyword">implements</span> <span class="token class-name">Operacao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="service-divisao-concret-command" tabindex="-1"><a class="header-anchor" href="#service-divisao-concret-command"><span>Service Divisão (Concret Command)</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServicoDivisao</span> <span class="token keyword">implements</span> <span class="token class-name">Operacao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token string">&quot;Divisão por zero&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41))])}const g=p(u,[["render",k],["__file","Front_Controller.html.vue"]]),h=JSON.parse('{"path":"/posts/Seminarios/seminario-2/Front_Controller.html","title":"Front Controller","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2024-08-22T23:10:00.000Z","tag":["Front Controller","gof"],"category":["seminario-2"],"order":10,"excerpt":"Apresentação do Padrão de Projeto Front Controller","author":"JoaoAugustoMPdJ RiansFonseca","gitInclude":["../../../../src/includes/seminario-2-JoaoAugustoMPdJ/README.md","../../../../src/includes/seminario-2-RiansFonseca/README.md"],"description":"Front Controller João Augusto Moura Peixoto de Jesus (20211TADSSAJ0004) @JoaoAugustoMPdJ Padrão de Projeto: Front Controller por João Augusto Intenção O padrão Front Controller ...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/posts/Seminarios/seminario-2/Front_Controller.html"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Front Controller"}],["meta",{"property":"og:description","content":"Front Controller João Augusto Moura Peixoto de Jesus (20211TADSSAJ0004) @JoaoAugustoMPdJ Padrão de Projeto: Front Controller por João Augusto Intenção O padrão Front Controller ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"og:updated_time","content":"2024-09-30T13:40:45.000Z"}],["meta",{"property":"article:author","content":"JoaoAugustoMPdJ RiansFonseca"}],["meta",{"property":"article:tag","content":"Front Controller"}],["meta",{"property":"article:tag","content":"gof"}],["meta",{"property":"article:published_time","content":"2024-08-22T23:10:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-30T13:40:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Front Controller\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-22T23:10:00.000Z\\",\\"dateModified\\":\\"2024-09-30T13:40:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JoaoAugustoMPdJ RiansFonseca\\"}]}"]]},"headers":[{"level":2,"title":"João Augusto Moura Peixoto de Jesus (20211TADSSAJ0004)","slug":"joao-augusto-moura-peixoto-de-jesus-20211tadssaj0004","link":"#joao-augusto-moura-peixoto-de-jesus-20211tadssaj0004","children":[{"level":3,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":3,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":3,"title":"Outros Nomes","slug":"outros-nomes","link":"#outros-nomes","children":[]},{"level":3,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[]},{"level":3,"title":"Colaborações","slug":"colaboracoes","link":"#colaboracoes","children":[]},{"level":3,"title":"Consequências","slug":"consequencias","link":"#consequencias","children":[]},{"level":3,"title":"Implementação Conhecida","slug":"implementacao-conhecida","link":"#implementacao-conhecida","children":[]},{"level":3,"title":"Padrões Relacionados","slug":"padroes-relacionados","link":"#padroes-relacionados","children":[]},{"level":3,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":3,"title":"Meu exemplo de Código","slug":"meu-exemplo-de-codigo","link":"#meu-exemplo-de-codigo","children":[]},{"level":3,"title":"Diagrama","slug":"diagrama","link":"#diagrama","children":[]}]},{"level":2,"title":"Rian Silva da Fonseca (20221TADSSAJ0002)","slug":"rian-silva-da-fonseca-20221tadssaj0002","link":"#rian-silva-da-fonseca-20221tadssaj0002","children":[]},{"level":2,"title":"Introdução","slug":"introducao","link":"#introducao","children":[]},{"level":2,"title":"Intenção","slug":"intencao-1","link":"#intencao-1","children":[]},{"level":2,"title":"Também conhecido como","slug":"tambem-conhecido-como","link":"#tambem-conhecido-como","children":[]},{"level":2,"title":"Motivação","slug":"motivacao-1","link":"#motivacao-1","children":[]},{"level":2,"title":"Aplicabilidade","slug":"aplicabilidade","link":"#aplicabilidade","children":[]},{"level":2,"title":"Estrutura","slug":"estrutura-1","link":"#estrutura-1","children":[]},{"level":2,"title":"Participantes","slug":"participantes-1","link":"#participantes-1","children":[]},{"level":2,"title":"Consequências","slug":"consequencias-1","link":"#consequencias-1","children":[]},{"level":2,"title":"Implementação","slug":"implementacao","link":"#implementacao","children":[{"level":3,"title":"Classe Controller","slug":"classe-controller","link":"#classe-controller","children":[]}]},{"level":2,"title":"Classe Controller","slug":"classe-controller-1","link":"#classe-controller-1","children":[]},{"level":2,"title":"Interface Service (Interface Command)","slug":"interface-service-interface-command","link":"#interface-service-interface-command","children":[]},{"level":2,"title":"Service Soma (Concret Command)","slug":"service-soma-concret-command","link":"#service-soma-concret-command","children":[]},{"level":2,"title":"Service Subtração (Concret Command)","slug":"service-subtracao-concret-command","link":"#service-subtracao-concret-command","children":[]},{"level":2,"title":"Service Multiplicação (Concret Command)","slug":"service-multiplicacao-concret-command","link":"#service-multiplicacao-concret-command","children":[]},{"level":2,"title":"Service Divisão (Concret Command)","slug":"service-divisao-concret-command","link":"#service-divisao-concret-command","children":[]}],"git":{"createdTime":1727703645000,"updatedTime":1727703645000,"contributors":[{"name":"Leandro Costa","email":"leandro.costa@ifba.edu.br","commits":1}]},"readingTime":{"minutes":0.19,"words":58},"filePathRelative":"posts/Seminarios/seminario-2/Front_Controller.md","localizedDate":"22 de agosto de 2024","autoDesc":true}');export{g as comp,h as data};
