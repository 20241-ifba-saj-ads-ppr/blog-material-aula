import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as e,o as t}from"./app-BrOvOMMH.js";const o={};function p(c,a){return t(),s("div",null,a[0]||(a[0]=[e(`<h2 id="introducao" tabindex="-1"><a class="header-anchor" href="#introducao"><span>Introdução</span></a></h2><p>O padrão de projeto Front Controller é amplamente utilizado em frameworks modernos e sistemas web para gerenciar requisições de forma centralizada. Ele é implementado em frameworks como Struts e JSF, que são amplamente utilizados em projetos Java para aplicações web. O Front Controller atua como um ponto único de entrada para tratar todas as solicitações de um site e direcionar para as ações apropriadas, facilitando a implementação de funcionalidades transversais como segurança, internacionalização e resposta a páginas. No restante deste artigo, exploraremos o funcionamento do padrão, suas vantagens, desvantagens e apresentaremos um exemplo prático.</p><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><p>O padrão Front Controller visa centralizar o tratamento de todas as requisições em uma única entidade, o controlador frontal. Esse controlador recebe todas as solicitações do usuário, processa as informações necessárias e encaminha a requisição para o manipulador adequado, que pode então gerar a resposta apropriada. O objetivo é evitar a duplicação de lógica comum, consolidando o tratamento de solicitações em um único ponto e melhorando a manutenção e a organização do código.</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como"><span>Também conhecido como</span></a></h2><ul><li><strong>Controlador Frontal</strong></li><li><strong>Main Controller</strong></li><li><strong>Central Controller</strong></li></ul><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><p>Em aplicações web complexas, muitas funcionalidades precisam ser implementadas de maneira uniforme para cada solicitação, como segurança, internacionalização e geração de páginas. Se cada funcionalidade for tratada separadamente em diferentes partes da aplicação, isso pode levar a uma duplicação de código e dificultar a manutenção. O Front Controller resolve esse problema ao consolidar o tratamento dessas requisições em um único controlador, o que simplifica a implementação e a manutenção, e permite a aplicação de decoradores para funcionalidades adicionais.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade"><span>Aplicabilidade</span></a></h2><p>O padrão Front Controller é aplicável quando:</p><ul><li>Há necessidade de um ponto único para o tratamento de todas as requisições de uma aplicação web.</li><li>É necessário implementar funcionalidades comuns a todas as requisições, como autenticação, autorização e logging.</li><li>A aplicação possui múltiplas páginas ou ações que precisam de um tratamento uniforme.</li></ul><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h2><figure><img src="https://github.com/user-attachments/assets/64af2200-293c-4c79-a94b-74c6a4cc1c04" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h2><ul><li><p><strong>Handler (ou Manipulador Web)</strong>: O Handler é um componente do FrontController que lida diretamente com a requisição. Ele recebe as solicitações HTTP (POST, GET, etc.), analisa a URL e decide qual comando deve ser executado. O Handler é responsável por fazer o roteamento das requisições para os comandos específicos e, portanto, é uma parte fundamental do FrontController.</p></li><li><p><strong>Command</strong>: Um Command é uma interface ou classe abstrata que define a estrutura para os comandos executáveis. Cada comando é uma implementação concreta que encapsula a lógica para processar uma requisição específica e determina a resposta adequada. O Command interage com o modelo e decide qual visualização deve ser usada para gerar a resposta.</p></li><li><p><strong>View</strong>: A View é responsável por renderizar a resposta final que será enviada ao usuário. Depois que um Command processa a requisição, ele decide qual View deve ser utilizada para apresentar a resposta. A View cuida da geração da saída, exibindo as informações de acordo com a lógica definida pelo Command.</p></li></ul><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Consequências</span></a></h2><ul><li><strong>Centralização</strong>: O Front Controller centraliza o tratamento das requisições, simplificando a configuração e manutenção.</li><li><strong>Flexibilidade</strong>: Permite a adição de novos comandos dinamicamente sem necessidade de alterar o controlador principal.</li><li><strong>Concorrência</strong>: Como os comandos são criados por solicitação, não há preocupação com concorrência, já que cada comando é isolado.</li><li><strong>Extensibilidade</strong>: Decoradores podem ser usados para adicionar funcionalidades como autenticação e codificação de caracteres em tempo de execução.</li></ul><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao"><span>Implementação</span></a></h2><p>A aplicação é relativamente simples, mas demonstra claramente o objetivo do padrão e como ele pode ser estruturado através de um controlador e objetos de comando associados. Basicamente temos uma aplicação que tem uma página inicial contendo um link para noticias e informações de um clube de futebol (grêmio) e outro link para informações de outro clube de futebol (internacional). Dependendo do link clicado a aplicação recebe a URL e desmembra essa URL em busca do Comando a ser chamado. Esse Comando terá a responsabilidade de repassar para a tela do usuário a página correta para a solicitação do usuário. ###Estrutura <img src="https://github.com/user-attachments/assets/d0bb004e-fcaf-4441-a72f-94f8fd51f798" alt="image" loading="lazy"></p><h3 id="classe-controller" tabindex="-1"><a class="header-anchor" href="#classe-controller"><span>Classe Controller</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Controller</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>

	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

        <span class="token comment">//Executa o Comando conforme a URL</span>
        <span class="token class-name">Command</span> comando <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		comando <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Command</span><span class="token punctuation">)</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;commands.&quot;</span><span class="token operator">+</span>request
        <span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;command&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

       comando<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Podemos verificar no código acima que os métodos doGet() e doPost() recebem solicitações HTTP do tipo GET ou POST. Ambos delegam para o método processRequest() que pega o parâmetro “command” da URL e associa com uma classe Command. Para exemplificar podemos considerar a URL abaixo:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span><span class="token class-name">ProjetoFrontController</span><span class="token operator">/</span><span class="token class-name">Controller</span><span class="token operator">?</span>command<span class="token operator">=</span><span class="token class-name">ExibePaginaGremistas</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>O nosso Controlador pega o que foi passado como valor no parâmetro “command” (o valor está depois do igual), ou seja, “ExibePaginaGremistas”, e chama a classe Comando que possui este nome. Por sua vez o Comando é responsável por direcionar o usuário para uma página especifica. O Comando também poderia fazer diversas outras coisas mais especificas, mas nesse caso para exemplificar ele apenas chama a página de exibição adequada para a solicitação do usuário. Segue nas Listagens 2, 3 e 4 um exemplo da interface Command e das classes concretas ExibePaginaGremistas e ExibePaginaColorados.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExibePaginaColorados</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>

			<span class="token class-name">RequestDispatcher</span> d <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/colorados.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			d<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExibePaginaGremistas</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>

			<span class="token class-name">RequestDispatcher</span> d <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/gremistas.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			d<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ServletException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo"><span>Exemplo de Código</span></a></h1><p>O exemplo abaixo trata-se de uma simples API REST de calculadora feita com o Spring-Boot, framework que facilita os conceitos pregados pelo Padrão de Projeto Front Controller. A API vai receber os parâmetros via URL, e por conta das facilidades oferecidas pelo Spring, a requisição enviada já será direcionada para seu respectivo endpoint com base no endereço mapeado para ele, e assim, será encaminhada para seu respectivo service (Comand), que realizará a operação.</p><h2 id="classe-controller-1" tabindex="-1"><a class="header-anchor" href="#classe-controller-1"><span>Classe Controller</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/calculate&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControladorCalculadora</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{operacao}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> operacao<span class="token punctuation">,</span> 
                                           <span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">double</span> a<span class="token punctuation">,</span> 
                                           <span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Operacao</span> service <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Operacao</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.seu.pacote.Servico&quot;</span> <span class="token operator">+</span> <span class="token function">capitalize</span><span class="token punctuation">(</span>operacao<span class="token punctuation">)</span><span class="token punctuation">)</span>
                                                <span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                                <span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">calcular</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">badRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span>
        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="interface-service-interface-command" tabindex="-1"><a class="header-anchor" href="#interface-service-interface-command"><span>Interface Service (Interface Command)</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Operacao</span> <span class="token punctuation">{</span>
    <span class="token class-name">Double</span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="service-soma-concret-command" tabindex="-1"><a class="header-anchor" href="#service-soma-concret-command"><span>Service Soma (Concret Command)</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServicoSoma</span> <span class="token keyword">implements</span> <span class="token class-name">Operacao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="service-subtracao-concret-command" tabindex="-1"><a class="header-anchor" href="#service-subtracao-concret-command"><span>Service Subtração (Concret Command)</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServicoSubtracao</span> <span class="token keyword">implements</span> <span class="token class-name">Operacao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="service-multiplicacao-concret-command" tabindex="-1"><a class="header-anchor" href="#service-multiplicacao-concret-command"><span>Service Multiplicação (Concret Command)</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServicoMultiplicacao</span> <span class="token keyword">implements</span> <span class="token class-name">Operacao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="service-divisao-concret-command" tabindex="-1"><a class="header-anchor" href="#service-divisao-concret-command"><span>Service Divisão (Concret Command)</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServicoDivisao</span> <span class="token keyword">implements</span> <span class="token class-name">Operacao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">calcular</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token string">&quot;Divisão por zero&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41)]))}const r=n(o,[["render",p],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/includes/seminario-2-RiansFonseca/","title":"Exemplo de Código","lang":"pt-BR","frontmatter":{"description":"Introdução O padrão de projeto Front Controller é amplamente utilizado em frameworks modernos e sistemas web para gerenciar requisições de forma centralizada. Ele é implementado...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/includes/seminario-2-RiansFonseca/"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Exemplo de Código"}],["meta",{"property":"og:description","content":"Introdução O padrão de projeto Front Controller é amplamente utilizado em frameworks modernos e sistemas web para gerenciar requisições de forma centralizada. Ele é implementado..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/user-attachments/assets/64af2200-293c-4c79-a94b-74c6a4cc1c04"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Exemplo de Código\\",\\"image\\":[\\"https://github.com/user-attachments/assets/64af2200-293c-4c79-a94b-74c6a4cc1c04\\",\\"https://github.com/user-attachments/assets/d0bb004e-fcaf-4441-a72f-94f8fd51f798\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Introdução","slug":"introducao","link":"#introducao","children":[]},{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Também conhecido como","slug":"tambem-conhecido-como","link":"#tambem-conhecido-como","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":2,"title":"Aplicabilidade","slug":"aplicabilidade","link":"#aplicabilidade","children":[]},{"level":2,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[]},{"level":2,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":2,"title":"Consequências","slug":"consequencias","link":"#consequencias","children":[]},{"level":2,"title":"Implementação","slug":"implementacao","link":"#implementacao","children":[{"level":3,"title":"Classe Controller","slug":"classe-controller","link":"#classe-controller","children":[]}]},{"level":2,"title":"Classe Controller","slug":"classe-controller-1","link":"#classe-controller-1","children":[]},{"level":2,"title":"Interface Service (Interface Command)","slug":"interface-service-interface-command","link":"#interface-service-interface-command","children":[]},{"level":2,"title":"Service Soma (Concret Command)","slug":"service-soma-concret-command","link":"#service-soma-concret-command","children":[]},{"level":2,"title":"Service Subtração (Concret Command)","slug":"service-subtracao-concret-command","link":"#service-subtracao-concret-command","children":[]},{"level":2,"title":"Service Multiplicação (Concret Command)","slug":"service-multiplicacao-concret-command","link":"#service-multiplicacao-concret-command","children":[]},{"level":2,"title":"Service Divisão (Concret Command)","slug":"service-divisao-concret-command","link":"#service-divisao-concret-command","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.02,"words":1205},"filePathRelative":"includes/seminario-2-RiansFonseca/README.md","autoDesc":true}');export{r as comp,u as data};
