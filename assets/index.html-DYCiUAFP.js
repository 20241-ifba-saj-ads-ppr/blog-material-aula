import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as e,b as s,d as t,e as r,o as l,r as p}from"./app-BrOvOMMH.js";const c={},d={href:"https://github.com/20241-ifba-saj-ads-ppr/seminario-2-Brenda-Martinez/tree/main/ExemploCor/1-codecompleto.java",target:"_blank",rel:"noopener noreferrer"};function m(u,a){const n=p("ExternalLinkIcon");return l(),i("div",null,[a[1]||(a[1]=e(`<h1 id="bridge" tabindex="-1"><a class="header-anchor" href="#bridge"><span>Bridge</span></a></h1><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><p>Desacoplar uma abstração da sua implementação, permitindo que ambas possam variar de forma independente. Em outras palavras, ele separa a abstração (interface) da implementação concreta para que mudanças em uma não afetem a outra.</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><p>Quando você está desenvolvendo um sistema que precisa <em><strong>se adaptar a diferentes requisitos e cenários</strong></em>, pode se deparar com um dilema: como manter a flexibilidade e a manutenibilidade sem criar uma <em>complexidade excessiva</em>? Um problema comum é quando a necessidade de variações na abstração e na implementação leva à criação de <em><strong>múltiplas hierarquias de classes</strong></em>, resultando em um número explosivo de combinações possíveis. Isso pode tornar o sistema difícil de gerenciar e evoluir.</p><p>Imagine um cenário onde você está desenvolvendo um sistema gráfico que precisa suportar diferentes tipos de formas (círculos, quadrados, etc.) e diferentes métodos de renderização (vetorial, raster, etc.). Se você criar uma classe para cada combinação possível de forma e método de renderização, o número de classes se torna rapidamente <em>incontrolável</em>. Além disso, qualquer mudança em uma forma ou método de renderização pode exigir alterações em várias classes, tornando a manutenção do código uma tarefa árdua.</p><p>O padrão de projeto Bridge é a resposta a esse desafio. Ele oferece uma maneira de <strong>desacoplar a abstração da implementação</strong>, permitindo que ambas <strong>evoluam independentemente</strong>. Em vez de criar uma nova classe para cada combinação de abstração e implementação, o Bridge utiliza uma <em><strong>hierarquia de abstração</strong></em> e uma <em><strong>hierarquia de implementação</strong></em> que são separadas, mas interagem através de uma interface comum.</p><p>Com o padrão Bridge, você define uma abstração com uma referência a um <strong>objeto que implementa a interface de implementação</strong>. Isso permite que você adicione novas abstrações e implementações <em><strong>sem precisar alterar o código existente</strong></em>, promovendo uma estrutura de código mais limpa e flexível. Assim, a complexidade é gerida de maneira mais eficaz, e o sistema se torna mais fácil de manter e expandir.</p><h3 id="beneficios" tabindex="-1"><a class="header-anchor" href="#beneficios"><span>Benefícios:</span></a></h3><ul><li><strong>Desacoplamento:</strong> Mantenha a abstração e a implementação separadas, facilitando alterações e extensões sem impacto direto uma na outra.</li><li><strong>Flexibilidade:</strong> Adicione novas abstrações e implementações de forma independente, reduzindo a necessidade de alterações no código existente.</li><li><strong>Simplicidade:</strong> Evite a criação de uma explosão combinatória de classes, mantendo o sistema mais simples e gerenciável. Adotar o padrão Bridge é investir em um design mais adaptável e menos propenso a problemas de manutenção, preparando seu sistema para um futuro de mudanças e crescimento com muito mais tranquilidade.</li></ul><h3 id="exemplo" tabindex="-1"><a class="header-anchor" href="#exemplo"><span>Exemplo</span></a></h3><p>Considere uma classe pai Forma com duas subclasses, Círculo e Quadrado. Agora, você deseja estender essa hierarquia de classes para incluir a noção de cores, como Vermelho e Azul. No entanto, seguindo essa abordagem, você acabaria criando subclasses para todas as combinações possíveis, resultando em classes como CírculoAzul e QuadradoVermelho. Isso levaria à explosão de subclasses, onde o número de classes necessárias cresce exponencialmente com a adição de novas variáveis como a cor.</p><img src="https://www.plantuml.com/plantuml/svg/RL0x3i8m3DrzYfoW9s08Gc9dOJUrfKHA2BATWT_TAmA5gcIo_RwIlHgArPp0VpSO4wgwVP6CTtX-pbsKiQPoPCcSGlaZjhUQVk2X8WbIHpupinvQZziyXc7TiQJMWHtRAx5dQJY4IEmuN-pgq4pYgHhh4irieP02U3vJ-yXxJW00" alt="uml diagram" loading="lazy"><p>Adicionando novas formas e novas cores, a quantidade de classes cresceria exponencialmente.</p><img src="https://www.plantuml.com/plantuml/svg/RP9D3i8W44RtSmfEu0bSr9YuDp7knpAn953CC2pykxkcsfRIMG7V8o_V49eao9A3XsRQGUin9NE87F09x_znxxZDFfw90_akhi3kaVqw3CZaYyl7Z9RHAfgHB3rJMejExB2_geKcj5JDyUo2OKYpVMqsArwovJWbgGggmh6YOjHG_KPwoUziMiCgBbyLe7EM38MRt0sAiBjaeLIcWQIBDW4qrDlXL_pM3m00" alt="uml diagram" loading="lazy"><p>Como solução para esse problema, o padrão Bridge substitui a herança pela composição de objetos. Dessa forma, caso haja a necessidade de, por exemplo, construir um quadrado vermelho, basta chamar o código que implementa a cor vermelha no quadrado.</p><img src="https://www.plantuml.com/plantuml/svg/JP7TYi8m48NlvobogSZw08iiNLm4hnP1l9zjHXl8JvbC1EtwxjQchRdAd8_CEIUaYe8ioLcevWcC5-8prgHsWHrsiDgxrf8ZBwW3VwfjO5XTWz5AKoJV82-My02eBSQejeRhP4FNammE2JNtcszoP8F-CbugydhZRdGsSsIDuGT_M-BNL0QTY1tP9fjaz7rFjfGEcSQKuIqgV7mDzRFQ_A_NKzyIJOrBDdU6VZ-ZgS2RlF8BbUC16gD9aMlbfb24pLyIYYLr94tG4Q0YhuVloESJ" alt="uml diagram" loading="lazy"><h3 id="explicacao" tabindex="-1"><a class="header-anchor" href="#explicacao"><span>Explicação</span></a></h3><p>A interface Cor e suas implementações (Vermelho, Amarelo e Azul) representam a implementação concreta que pode variar.</p><p>A classe abstrata Forma mantém uma referência a um objeto Cor e define o método abstrato desenhar(), que é implementado pelas classes refinadas.</p><p>As classes refinadas Circulo, Triangulo e Quadrado estendem Forma e implementam o método desenhar(), utilizando a implementação de cor injetada.</p><p>Com esse exemplo, a abstração (Forma) e a implementação (Cor) estão desacopladas. Você pode adicionar novas formas e novas cores sem modificar o código existente para outras formas ou cores, aproveitando a flexibilidade oferecida pelo padrão Bridge.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade"><span>Aplicabilidade</span></a></h2><p>O padrão Bridge é particularmente útil quando você precisa de flexibilidade no design e quando a abstração e a implementação podem mudar frequentemente ou crescer de forma independente. É interessante aplicá-lo ao se deparar com as seguintes situações:</p><ul><li>Quando você prevê que uma combinação de várias abstrações e implementações pode levar à criação de um número excessivo de subclasses. Por exemplo, se você tem múltiplas formas e múltiplas cores, e tenta criar uma classe para cada combinação, o número de classes pode crescer exponencialmente. O Bridge ajuda a evitar essa explosão combinatória.</li><li>Quando você precisa poder alterar ou estender a abstração ou a implementação sem afetar a outra parte. Isso é comum em sistemas que precisam ser altamente flexíveis e capazes de se adaptar a mudanças de requisitos.</li><li>Se você está desenvolvendo um sistema que precisa ser executado em diferentes plataformas, o Bridge pode ser utilizado para separar a interface do sistema da implementação específica de cada plataforma, permitindo que a aplicação seja portável.</li><li>Quando diferentes implementações de uma abstração precisam coexistir no mesmo sistema. Por exemplo, diferentes estratégias de renderização para uma interface gráfica (ex. renderização rasterizada vs. vetorial).</li><li>Em grandes sistemas, manter a interface separada da implementação ajuda na manutenção e no desenvolvimento paralelo. Equipes diferentes podem trabalhar em abstrações e implementações sem interferir no trabalho uma da outra.</li><li>Ao desenvolver bibliotecas ou frameworks que devem ser extensíveis e configuráveis, o Bridge pode ser utilizado para permitir que usuários da biblioteca possam fornecer suas próprias implementações sem precisar alterar o código da abstração.</li></ul><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h2><img src="https://www.plantuml.com/plantuml/svg/ZP7B2i8m44NtynLPAeM2NOf8VMnS2Vx1D9dQG9EKP2f8zT-55lg0eAuIvfx9cI5vOFJScXhoyGRQClaI9Ob34TYZHDT1SZ5DJOOiet9-AuvUgpj1yd1QYMj3FRPQmnj0rXZ2r7kZKbjKkEc-X5aVJkR9DjXxZPuNpnYpBlfEpafFl317WS4-3YLSkb-2isptIjF8SZ-931Ol3bHytB_93A3IYWIPXfy2cRqkMgOmhnhYoga0a9DL_KyFvmS0" alt="uml diagram" loading="lazy"><figure><img src="https://i.imgur.com/95SOBml.png" alt="UML" tabindex="0" loading="lazy"><figcaption>UML</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h2><ul><li><p><strong>Abstraction</strong> (Refactoring Guru: Forma; Meu exemplo: Pintura)</p><ul><li>define a interface abstrata para o lado de alto nível da hierarquia de classes</li><li>mantém uma referência a um objeto do tipo Implementor</li></ul></li><li><p><strong>RefinedAbstraction</strong> (Refactoring Guru: Circulo, Quadrado; Meu exemplo: Renascimento, Barroco)</p><ul><li>estende a interface da Abstraction e geralmente adiciona comportamentos específicos</li></ul></li><li><p><strong>Implementor</strong> (Refactoring Guru: Cor; Meu exemplo: Tecnica)</p><ul><li>define a interface para as partes de baixo nível da hierarquia, ou seja, a implementação</li></ul></li><li><p><strong>ConcreteImplementor</strong> (Refactoring Guru: Vermelho, Azul; Meu exemplo: OleoSobreTela, Pontilhismo)</p><ul><li>fornece uma implementação concreta da interface Implementor</li><li>define métodos específicos para o sistema que realiza o trabalho concreto que será utilizado pela Abstraction.</li></ul></li></ul><h2 id="outro-exemplo-meu-exemplo" tabindex="-1"><a class="header-anchor" href="#outro-exemplo-meu-exemplo"><span>Outro exemplo / Meu exemplo</span></a></h2><h3 id="aplicativo-de-estilizacao-de-fotografias" tabindex="-1"><a class="header-anchor" href="#aplicativo-de-estilizacao-de-fotografias"><span>Aplicativo de Estilização de Fotografias</span></a></h3><img src="https://www.plantuml.com/plantuml/svg/LP1DQiD038NtEiKi6q9oW1A2ATrqrT3c0igCYWKp8wEH2y79tVFZgMkl9Bw7tdkeAOPgVOhGJ1jmDj8VzEGEzxLN763zaRf8YR9X47rrH_APFSBwLpYuG8LoY_goWYk0ZrYA-wACnVFZH8Ox7kaRgef_WbbCTHkg7KzP7kKTgpet_umatt9IEbB4uPyV91l7baiQ8sf_9vlDVkhy1tUNxNPHSwdKgb3FHhW8NagpR82M0pbAdPqTcYcVUgCofucibL006ihX-VzntW00" alt="uml diagram" loading="lazy"><h2 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes"><span>Colaborações</span></a></h2><ul><li>O padrão <em><strong>Abstract Factory</strong></em> pode ser usado para criar as instâncias de Implementor que são usadas pelo Bridge. A Abstract Factory fornece uma interface para criar famílias de objetos relacionados ou dependentes sem especificar suas classes concretas, o que se alinha bem com a ideia do Bridge de desacoplar a abstração da implementação. Além disso, essa combinação pode ser <strong>útil quando algumas abstrações definidas pelo Bridge só podem trabalhar com implementações específicas.</strong></li><li>O padrão <em><strong>Decorator</strong></em> pode ser usado para adicionar responsabilidades a objetos do Implementor de maneira dinâmica, mantendo a separação das preocupações do Bridge.</li><li>O padrão <em><strong>Builder</strong></em> pode ser utilizado para construir as partes complexas de uma Abstraction ou Implementor. O Builder pode ajudar a compor objetos Bridge com vários componentes, assegurando que todos os componentes necessários sejam configurados antes de serem utilizados.</li></ul><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Consequências</span></a></h2><h3 id="pros" tabindex="-1"><a class="header-anchor" href="#pros"><span>Prós</span></a></h3><ul><li>Flexibilidade <ul><li>Ao desacoplar a abstração da implementação, o desenvolvedor pode modificar ou estender qualquer uma das partes sem impactar diretamente uma na outra</li></ul></li><li>Expansão <ul><li>Como novas implementações podem ser adicionadas facilmente, o sistema consegue se expandir sem alterar o código já existente</li></ul></li><li>Redução da Complexidade <ul><li>Ao evitar a necessidade de criar várias subclasses para cada combinação possível de abstração e implementação, o código torna-se mais limpo e de fácil compreensão</li></ul></li><li>Facilidade de Manutenção <ul><li>Devido ao número reduzido de classes e ao desacoplamento delas, a manutenção torna-se mais simples e eficaz</li></ul></li></ul><h3 id="contras" tabindex="-1"><a class="header-anchor" href="#contras"><span>Contras</span></a></h3><ul><li>Overhead de Desenho <ul><li>Para sistemas pequenos ou quando as mudanças nas abstrações e implementações são improváveis, o uso do Bridge pode ser considerado um &quot;overengineering&quot;, ou seja, um excesso de design para um problema simples. Isso pode resultar em código mais complexo do que o necessário.</li></ul></li><li>Aumento da Complexidade Inicial <ul><li>Caso não haja necessidade da aplicação do bridge, a utilização dele pode causar um efeito reverso e aumentar a complexidade do código, principalmente para novos desenvolvedores.</li></ul></li></ul><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao"><span>Implementação</span></a></h2><p>A implementação do padrão Bridge envolve a criação de uma estrutura que desacopla a abstração de sua implementação, permitindo que ambas possam evoluir independentemente.</p><p>Primeiro, define-se a interface da Abstração, que mantém uma referência a um objeto do tipo Implementor.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Abstracao</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Implementor</span> funcao<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Abstracao</span><span class="token punctuation">(</span><span class="token class-name">Implementor</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>funcao <span class="token operator">=</span> f<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">operacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A abstração declara operações que podem ser refinadas por subclasses concretas (as RefinedAbstractions).</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AbstracaoRefinada1</span> <span class="token keyword">extends</span> <span class="token class-name">Abstracao</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">AbstracaoRefinada1</span><span class="token punctuation">(</span><span class="token class-name">Implementor</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        implementor<span class="token punctuation">.</span><span class="token function">operacaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Em seguida, define-se a interface Implementor, que especifica as operações que as implementações concretas devem fornecer. As ConcreteImplementors implementam essa interface, realizando as operações específicas.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Implementor</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">operacaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteImplementor1</span> <span class="token keyword">implements</span> <span class="token class-name">Implementor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operacaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Implementacao do ConcreteImplementor1.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteImplementor2</span> <span class="token keyword">implements</span> <span class="token class-name">Implementor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operacaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Implementacao ConcreteImplementor1.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finalmente, a abstração e as implementações interagem de forma que a abstração delega o trabalho para o implementador, permitindo que novas abstrações e implementações sejam adicionadas ou modificadas sem a necessidade de alterar o código existente. Isso resulta em um design flexível e extensível, que é mais fácil de manter e evoluir ao longo do tempo.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Aplicacao</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Implementor</span> implementor1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteImplementor1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Abstracao</span> abstracao1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbstracaoRefinada1</span><span class="token punctuation">(</span>implementor1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AbstracaoA</span><span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Implementor</span> implementor2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteImplementor2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Abstracao</span> abstracao2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbstracaoRefinada1</span><span class="token punctuation">(</span>implementor2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AbstracaoB</span><span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo"><span>Exemplo de Código</span></a></h2>`,51)),s("p",null,[s("a",d,[a[0]||(a[0]=t("Acessar o Repositorio")),r(n)])]),a[2]||(a[2]=e('<h2 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos"><span>Usos Conhecidos</span></a></h2><p>Alguns usos comuns e cenários onde o padrão Bridge é aplicado:</p><ul><li><strong>UI Components:</strong> Componentes de interface gráfica que precisam ser renderizados de forma diferente em plataformas diferentes.</li><li><strong>Drivers de Hardware:</strong> Interface de software que deve se comunicar com diferentes implementações de drivers de hardware.</li><li><strong>Persistência de Dados:</strong> Quando você deseja separar a lógica de persistência de dados (por exemplo, em diferentes bancos de dados ou formatos) da lógica de negócio.</li></ul><p>Muitos frameworks e bibliotecas optam por utilizar esse padrão, a exemplo de:</p><ol><li>Java AWT (Abstract Window Toolkit) <ul><li>A classe Component em AWT atua como a Abstraction, enquanto as classes como ButtonPeer ou TextFieldPeer são Implementors</li></ul></li><li>JDBC (Java Database Connectivity) <ul><li>A interface Driver no JDBC atua como a Implementor, e classes como Connection, Statement, e ResultSet são exemplos de Abstraction. Cada driver JDBC específico (como para MySQL, Oracle, etc.) é uma implementação concreta (ConcreteImplementor) que lida com a comunicação com o banco de dados específico.</li></ul></li><li>.NET Framework <ul><li>As classes de manipulação de dispositivos gráficos, como System.Drawing, usam o padrão Bridge para suportar diferentes sistemas de renderização (por exemplo, GDI+ para Windows e implementações alternativas para outros sistemas).</li></ul></li><li>Hibernate <ul><li>Utiliza abstrações para representar entidades e suas operações (como salvar, buscar, etc.), enquanto a implementação concreta pode variar dependendo do banco de dados subjacente (como MySQL, PostgreSQL, etc.).</li></ul></li></ol><h2 id="padroes-relacionados" tabindex="-1"><a class="header-anchor" href="#padroes-relacionados"><span>Padrões Relacionados</span></a></h2><ul><li><strong>Adapter</strong>: pode ser usado em um contexto Bridge para adaptar uma implementação existente (que não segue a interface Implementor) para ser usada pelo Bridge.</li><li><strong>Abstract Factory</strong>: pode ser utilizado para fornecer as implementações do Implementor para o Bridge, permitindo uma criação mais flexível e intercambiável de objetos.</li><li><strong>Strategy</strong>: pode ser usado como uma implementação dentro do Bridge, onde diferentes estratégias podem ser aplicadas a uma implementação específica, proporcionando uma flexibilidade adicional.</li><li><strong>Composite</strong>: pode usar o Bridge para tratar a parte da implementação separadamente da estrutura hierárquica, permitindo que diferentes implementações de componentes sejam tratadas de maneira uniforme na árvore.</li><li><strong>Decorator</strong>: pode ser usado para adicionar funcionalidades extras a uma implementação dentro do Bridge sem alterar a estrutura base do código.</li></ul><h3 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias"><span>Referencias</span></a></h3><ul><li>Refactoring Guru <ul><li>Exemplo de Codigo</li></ul></li><li>GOF <ul><li>Inspiração para escrita do documento</li></ul></li></ul>',9))])}const b=o(c,[["render",m],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/includes/seminario-2-Brenda-Martinez/","title":"Bridge","lang":"pt-BR","frontmatter":{"description":"Bridge Intenção Desacoplar uma abstração da sua implementação, permitindo que ambas possam variar de forma independente. Em outras palavras, ele separa a abstração (interface) d...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/includes/seminario-2-Brenda-Martinez/"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Bridge"}],["meta",{"property":"og:description","content":"Bridge Intenção Desacoplar uma abstração da sua implementação, permitindo que ambas possam variar de forma independente. Em outras palavras, ele separa a abstração (interface) d..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i.imgur.com/95SOBml.png"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bridge\\",\\"image\\":[\\"https://i.imgur.com/95SOBml.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[{"level":3,"title":"Benefícios:","slug":"beneficios","link":"#beneficios","children":[]},{"level":3,"title":"Exemplo","slug":"exemplo","link":"#exemplo","children":[]},{"level":3,"title":"Explicação","slug":"explicacao","link":"#explicacao","children":[]}]},{"level":2,"title":"Aplicabilidade","slug":"aplicabilidade","link":"#aplicabilidade","children":[]},{"level":2,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[]},{"level":2,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":2,"title":"Outro exemplo / Meu exemplo","slug":"outro-exemplo-meu-exemplo","link":"#outro-exemplo-meu-exemplo","children":[{"level":3,"title":"Aplicativo de Estilização de Fotografias","slug":"aplicativo-de-estilizacao-de-fotografias","link":"#aplicativo-de-estilizacao-de-fotografias","children":[]}]},{"level":2,"title":"Colaborações","slug":"colaboracoes","link":"#colaboracoes","children":[]},{"level":2,"title":"Consequências","slug":"consequencias","link":"#consequencias","children":[{"level":3,"title":"Prós","slug":"pros","link":"#pros","children":[]},{"level":3,"title":"Contras","slug":"contras","link":"#contras","children":[]}]},{"level":2,"title":"Implementação","slug":"implementacao","link":"#implementacao","children":[]},{"level":2,"title":"Exemplo de Código","slug":"exemplo-de-codigo","link":"#exemplo-de-codigo","children":[]},{"level":2,"title":"Usos Conhecidos","slug":"usos-conhecidos","link":"#usos-conhecidos","children":[]},{"level":2,"title":"Padrões Relacionados","slug":"padroes-relacionados","link":"#padroes-relacionados","children":[{"level":3,"title":"Referencias","slug":"referencias","link":"#referencias","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":7.1,"words":2130},"filePathRelative":"includes/seminario-2-Brenda-Martinez/README.md","autoDesc":true}');export{b as comp,k as data};
