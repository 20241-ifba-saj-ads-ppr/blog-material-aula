import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,a as e,b as s,d as t,e as o,o as i,r as l}from"./app-BrOvOMMH.js";const u={},r={href:"https://refactoring.guru/pt-br/design-patterns/decorator/java/example",target:"_blank",rel:"noopener noreferrer"},d={href:"https://mermaid.live/edit#pako:eNqVU8tuwyAQ_BXEqVWTfIBlRWoaVarUXporFwprQLHB4qGocvPvxTFxguy2KRezs7PjWRY6zAwHXGBWU-e2igpLG6KJRnFtgvdGo_JrtULPxjYpniY31MEQb4EZS72xo8Y0FWuWS_Qkge134JzKqv6u6Z286MrcWvRqxDsI5TzYibtT16mVboD6VZZKR3pFGazXF_gBcfPIfDR8dz-gx1zockhdXhU-akAHxb2cwSUoIf11wnmrtEDM1Ofubvr9zBFkPtLIDpa2LfxHeHZWmfQ14zeRyfCmKmfKDzJz48xEUhYicZTAC9yAbaji8aqf2AR7CQ0QXMQtp3ZPMNE9jwZvdp-a4cLbAAtsTRASFxWtXYxCy6mH9E5GFLiKLt7SS-o_x2-6BxTE",target:"_blank",rel:"noopener noreferrer"};function k(m,n){const a=l("ExternalLinkIcon");return i(),c("div",null,[n[4]||(n[4]=e(`<h1 id="decorator" tabindex="-1"><a class="header-anchor" href="#decorator"><span>Decorator</span></a></h1><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><p>O padrão decorator permite que novos comportamentos sejam atribuídos a um objeto, envolvendo esse objeto em outros objetos que possuem esse comportamento desejado</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como"><span>Também conhecido como</span></a></h2><p>Wrapper ou Envoltório.</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><p>O objetivo do padrão é manipular o comportamento de objetos sem necessariamente alterar sua instancia, fazendo isso através de outros objetos que adicionarão esse comportamento.</p><p>Imaginando um cenário em que você esteja implementando uma nova funcionalidade no sistema de sua empresa, e percebe que essa funcionalidade faz sentido em um objeto, contudo, você foi instruído para não alterar essa classe especifica, qual seria a solução? Envolver esse objeto dessa classe com outro objeto que tenha o comportamento que você desejar, sem alterar o código da classe principal, nem gerar um filho para esse novo objeto.</p><p>Imaginando um cenário em que você deseje desenvolver uma classe que permita o envio de mensagens, e o código cliente irá definir por quais meios essa mensagem será enviada, seja por Whatzapp, seja por SMS ou por Email, nesse caso há de se imaginar que uma boa solução seria criar uma interface de mensagem, que teria o método de enviar, e cada tipo de envio iria ser uma nova classe que iria implementar essa interface, sendo possível que você envie essa mensagem por um desses três meios. Contudo, caso o cliente deseje ser notificado em mais de um meio diferente, qual seria a solução? Criar uma nova subclasse que implemente mensagem e por os dois métodos juntos, não seria possível herdar outras duas subclasses implementadas, já que a maioria das linguagens não o permite. Levando isso em conta, seria necessário mapear cada possibilidade de envio por mais de um meio e implementar em subclasses, o que pode terminar em uma quantidade gigante de arquivos, e códigos extensos, principalmente se o cliente solicitar a adição de mais meios de envio, nesse caso você ira alterar vários arquivos para o funcionamento da função como no exemplo abaixo disponibilizado pelo site Refactoring Guru</p><figure><img src="https://refactoring.guru/images/patterns/diagrams/decorator/problem3.png?id=f3b3e7a107d870871f2c3167adcb7ccb" alt="Diagrama de classe Refactoring Guru" tabindex="0" loading="lazy"><figcaption>Diagrama de classe Refactoring Guru</figcaption></figure><h2 id="solucao" tabindex="-1"><a class="header-anchor" href="#solucao"><span>Solução</span></a></h2><p>Para driblar esse problema, podemos utilizar do padrão decorator para adicionar comportamentos a um objeto já existente, sem precisar criar uma nova subclasse para um novo meio de envio de mensagens. O objeto decorador é ligado com o objeto alvo e contem o mesmo conjunto de métodos que o alvo, delegando ao mesmo as chamadas das funções, contudo, podendo realizar operações antes ou depois de chamar a função do alvo. Para que isso funcione, é necessário que o decorador terá de implementar a mesma interface que o objeto decorado, para que o código cliente os enxerque como o mesmo, além que o decorator deve possuir um atributo para a injeção do objeto decorado.</p><p>É interessante notar que todo o comportamento que envolve o decorator evita a utilização de diversas subclasses, e dá prioridade a utilização de agregação ou composição, que seriam respectivamente: Um objeto contem outro mas pode viver sem ele, e um objeto contem outro, mas seu ciclo de vida está intimamente ligado, não podendo existir sem ele. Ao utilizar essa abordagem, ´fica mais simples mudar o comportamento de um objeto principal, utilizando-se do comportamento de varias outras classes decoradoras, sendo esse principio de agregação ou composição a base de vários outros padrões.</p><figure><img src="https://refactoring.guru/images/patterns/diagrams/decorator/solution1-pt-br.png?id=2678803c5fbd7265a1f993d1c514d250" alt="Composição/Agregação X Herança" tabindex="0" loading="lazy"><figcaption>Composição/Agregação X Herança</figcaption></figure><h2 id="aplicabilidade-estrutura" tabindex="-1"><a class="header-anchor" href="#aplicabilidade-estrutura"><span>Aplicabilidade/Estrutura</span></a></h2><p>Para a aplicação do decorator, é necessário que primeiro exista uma interface, de onde o objeto alvo da decoração irá implementar os métodos, assim como o decorator base. O decorator base terá um atributo que será do tipo da interface, aonde será injetado o objeto a ser decorado, geralmente, o decorator base faz apenas a chamada ao método do objeto decorado, a responsabilidade por adicionar novos comportamentos sobre o base decorator e consequentemente sobre o objeto base fica com os decoradores concretos que herdarão do decorador base, podendo após a chamada do super, realizar alguma tarefa especifica.</p><figure><img src="https://refactoring.guru/images/patterns/diagrams/decorator/structure.png?id=8c95d894aecce5315cc1b12093a7ea0c" alt="Exemplo decorator UML" tabindex="0" loading="lazy"><figcaption>Exemplo decorator UML</figcaption></figure><p>Como já dito anteriormente, o decorator possibilita projetar comportamentos adicionais para um objeto em tempo de execução, sem quebrar as funcionalidades antes existentes, permitindo estruturar a lógica de negócios em camadas, compondo objetos com varias variações dessas logicas.</p><p>Geralmente, o decorator é usado quando se torna complicado demais, ou até impossível estender o comportamento de um objeto utilizando herança, além de que quando uma classe não pode ser mais estendida por escolha do programador, esse padrão de projeto permite adicionar novos comportamentos sem a necessidade de gerar um filho para essa classe.</p><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h2><ul><li>Component(Button) <ul><li>Define a interface para objetos que podem ter responsabilidades acrescenta-das aos mesmos dinamicamente.</li></ul></li><li>ConcreteComponent(FormButton) <ul><li>Define um objeto para o qual responsabilidades adicionais podem ser atribuídas.</li></ul></li><li>Decorator(BaseButtonDecorator) <ul><li>Mantém uma referência para um objeto Component e define uma interface que segue a interface de Component.</li></ul></li><li>ConcreteDecorator(CheckSessionDecorator, LogRegisterDecorator, CheckFormInfoDecorator) <ul><li>Acrescenta responsabilidades ao componente.</li></ul></li></ul><h2 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes"><span>Colaborações</span></a></h2><p>Decorator repassa solicitações para o seu objeto Component. Opcionalmente, ele pode executar operações adicionais antes e depois de repassar a solicitação.</p><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Consequências</span></a></h2><ul><li>Você pode estender o comportamento de um objeto sem fazer um nova subclasse.</li><li>Você pode adicionar ou remover responsabilidades de um objeto no momento da execução.</li><li>Você pode combinar diversos comportamentos ao envolver o objeto com múltiplos decoradores.</li><li>Princípio de responsabilidade única_. Você pode dividir uma classe monolítica que implementa muitas possíveis variantes de um comportamento em diversas classes menores.</li><li>É difícil remover um invólucro de uma pilha de invólucros.</li><li>É difícil implementar um decorador de tal maneira que seu comportamento não dependa da ordem do pilha de decoradores.</li><li>A configuração inicial do código de camadas pode ficar bastante feia.</li></ul><h2 id="como-implementar" tabindex="-1"><a class="header-anchor" href="#como-implementar"><span>Como Implementar</span></a></h2><p>Primeiramente, seu domínio de negócios deve ser representado como um componente primário que pode ter sobre si várias camadas opcionais, após essa verificação, é necessário visualizar os métodos que são comuns tanto para o componente base quanto para as camadas opcionais.</p><p>Após esses passos, crie uma classe concreta do componente e defina nela o comportamento básico a ser exercido, depois crie uma classe decorator base, ela deve ter uma propriedade que armazena o objeto a ser decorado, que deve ser do tipo da interface do componente para permitir a ligação entre os componentes concretos e decoradores, sendo assim, o decorador base delega o trabalho para o objeto envolvido por ele.</p><p>Assim que todas as classes do decorator implementarem a interface do componente, crie decorators concretos entendendo-os a partir do decorator base. Um decorator concreto deve executar seu comportamento antes ou depois da chamada para o método pai, por fim o código cliente deve ser responsável por criar os decoradores e compô-los da forma desejada</p><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao"><span>Implementação</span></a></h2><p>Segue abaixo um exemplo de implementação disponibilizado pelo Refactoring Guru</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">refactoring_guru<span class="token punctuation">.</span>decorator<span class="token punctuation">.</span>example<span class="token punctuation">.</span>decorators</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DataSource</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">writeData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Acima a declaração da interface DaraSource, que será a base para as classes concretas do componente e decorators</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">refactoring_guru<span class="token punctuation">.</span>decorator<span class="token punctuation">.</span>example<span class="token punctuation">.</span>decorators</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDataSource</span> <span class="token keyword">implements</span> <span class="token class-name">DataSource</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">FileDataSource</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Após a declaração da interface, há a implementação da mesma pela classe FileDataSource juntamente com seus métodos.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">refactoring_guru<span class="token punctuation">.</span>decorator<span class="token punctuation">.</span>example<span class="token punctuation">.</span>decorators</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">DataSource</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> wrappee<span class="token punctuation">;</span>

    <span class="token class-name">DataSourceDecorator</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>wrappee <span class="token operator">=</span> source<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        wrappee<span class="token punctuation">.</span><span class="token function">writeData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> wrappee<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Acima a declaração da classe abstrata que será utilizada como decorator base, tendo uma propriedade privada do mesmo tipo da interface declarada inicialmente</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">refactoring_guru<span class="token punctuation">.</span>decorator<span class="token punctuation">.</span>example<span class="token punctuation">.</span>decorators</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncryptionDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">DataSourceDecorator</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">EncryptionDecorator</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">writeData</span><span class="token punctuation">(</span><span class="token function">encode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">refactoring_guru<span class="token punctuation">.</span>decorator<span class="token punctuation">.</span>example<span class="token punctuation">.</span>decorators</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span></span><span class="token class-name">Deflater</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span></span><span class="token class-name">DeflaterOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span></span><span class="token class-name">InflaterInputStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompressionDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">DataSourceDecorator</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> compLevel <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">CompressionDecorator</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCompressionLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> compLevel<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCompressionLevel</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        compLevel <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeData</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">writeData</span><span class="token punctuation">(</span><span class="token function">compress</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">decompress</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token class-name">String</span> stringData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> stringData<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">ByteArrayOutputStream</span> bout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">DeflaterOutputStream</span> dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeflaterOutputStream</span><span class="token punctuation">(</span>bout<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Deflater</span><span class="token punctuation">(</span>compLevel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            dos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>bout<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">decompress</span><span class="token punctuation">(</span><span class="token class-name">String</span> stringData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>stringData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">InflaterInputStream</span> iin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InflaterInputStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ByteArrayOutputStream</span> bout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> b<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> iin<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                bout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            iin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bout<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Acima temos a implementação de 2 decorators concretos, observe que ambos estendem da classe DataSourceDecorator, e a sobrescrita dos métodos originais realizam operações antes da chamada do super</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">refactoring_guru<span class="token punctuation">.</span>decorator<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">refactoring_guru<span class="token punctuation">.</span>decorator<span class="token punctuation">.</span>example<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> salaryRecords <span class="token operator">=</span> <span class="token string">&quot;Name,Salary\\nJohn Smith,100000\\nSteven Jobs,912000&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">DataSourceDecorator</span> encoded <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompressionDecorator</span><span class="token punctuation">(</span>
                                         <span class="token keyword">new</span> <span class="token class-name">EncryptionDecorator</span><span class="token punctuation">(</span>
                                             <span class="token keyword">new</span> <span class="token class-name">FileDataSource</span><span class="token punctuation">(</span><span class="token string">&quot;out/OutputDemo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        encoded<span class="token punctuation">.</span><span class="token function">writeData</span><span class="token punctuation">(</span>salaryRecords<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DataSource</span> plain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileDataSource</span><span class="token punctuation">(</span><span class="token string">&quot;out/OutputDemo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;- Input ----------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>salaryRecords<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;- Encoded --------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>plain<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;- Decoded --------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoded<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Por fim na classe cliente observamos a instancia dos decoradores e do componente com o seguinte retorno:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-- Input ----------------
Name,Salary
John Smith,100000
Steven Jobs,912000
-- Encoded --------------
Zkt7e1Q5eU8yUm1Qe0ZsdHJ2VXp6dDBKVnhrUHtUe0sxRUYxQkJIdjVLTVZ0dVI5Q2IwOXFISmVUMU5rcENCQmdxRlByaD4+
--Decoded --------------
Name,Salary
John Smith,100000
Steven Jobs,912000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43)),s("p",null,[n[1]||(n[1]=t("Download do código disponível ")),s("a",r,[n[0]||(n[0]=t("aqui")),o(a)])]),n[5]||(n[5]=s("h2",{id:"outro-exemplo",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#outro-exemplo"},[s("span",null,"Outro exemplo")])],-1)),n[6]||(n[6]=s("p",null,"Outro prático que se pode imaginar utilizando esse padrão é a adição de comportamentos em um botão de um formulário. Supondo que você tenha um objeto de um botão padrão no seu projeto, que tenha como comportamento padrão chamar uma próxima tela do sistema, contudo, você quer adicionar alguns comportamentos no botão, como verificação de sessão, verificação dos dados do formulário ou registro do log, seguindo essas regras podemos imaginar o seguinte cenário:",-1)),s("figure",null,[s("a",d,[n[2]||(n[2]=s("img",{src:"https://mermaid.ink/img/pako:eNqVU8tuwyAQ_BXEqVWTfIBlRWoaVarUXporFwprQLHB4qGocvPvxTFxguy2KRezs7PjWRY6zAwHXGBWU-e2igpLG6KJRnFtgvdGo_JrtULPxjYpniY31MEQb4EZS72xo8Y0FWuWS_Qkge134JzKqv6u6Z286MrcWvRqxDsI5TzYibtT16mVboD6VZZKR3pFGazXF_gBcfPIfDR8dz-gx1zockhdXhU-akAHxb2cwSUoIf11wnmrtEDM1Ofubvr9zBFkPtLIDpa2LfxHeHZWmfQ14zeRyfCmKmfKDzJz48xEUhYicZTAC9yAbaji8aqf2AR7CQ0QXMQtp3ZPMNE9jwZvdp-a4cLbAAtsTRASFxWtXYxCy6mH9E5GFLiKLt7SS-o_x2-6BxTE?type=png",alt:"",tabindex:"0",loading:"lazy"},null,-1)),o(a)]),n[3]||(n[3]=s("figcaption",null,null,-1))]),n[7]||(n[7]=e(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">interfaces</span><span class="token punctuation">;</span>  
  
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Antes de tudo, temos a interface em comum que será utilizada pelo decorator base e o componente principal.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">classes</span><span class="token punctuation">;</span>  
  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">interfaces<span class="token punctuation">.</span></span><span class="token class-name">Button</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FormButton</span> <span class="token keyword">implements</span> <span class="token class-name">Button</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">double</span> width<span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span>  
    <span class="token keyword">public</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>  
    <span class="token annotation punctuation">@Override</span>  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment">//Call next page  </span>
  <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Acima temos o componente a ser decorado.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token class-name">Decorators</span><span class="token punctuation">;</span>  
  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">interfaces<span class="token punctuation">.</span></span><span class="token class-name">Button</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseButtonDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">Button</span><span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token class-name">Button</span> wrapper<span class="token punctuation">;</span>  
  
    <span class="token class-name">BaseButtonDecorator</span><span class="token punctuation">(</span><span class="token class-name">Button</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token keyword">this</span><span class="token punctuation">.</span>wrapper <span class="token operator">=</span> wrapper<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
    <span class="token annotation punctuation">@Override</span>  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        wrapper<span class="token punctuation">.</span><span class="token function">doAction</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>E também o decorator base.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token class-name">Decorators</span><span class="token punctuation">;</span>  
  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">interfaces<span class="token punctuation">.</span></span><span class="token class-name">Button</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckFormInfoDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">BaseButtonDecorator</span><span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token class-name">CheckFormInfoDecorator</span><span class="token punctuation">(</span><span class="token class-name">Button</span> wrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doAction</span><span class="token punctuation">(</span><span class="token function">checkForm</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">checkForm</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token comment">//checkForm  </span>
  <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token class-name">Decorators</span><span class="token punctuation">;</span>  
  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">interfaces<span class="token punctuation">.</span></span><span class="token class-name">Button</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckSessionDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">BaseButtonDecorator</span> <span class="token punctuation">{</span>  
  
    <span class="token keyword">public</span> <span class="token class-name">CheckSessionDecorator</span><span class="token punctuation">(</span><span class="token class-name">Button</span> wrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doAction</span><span class="token punctuation">(</span><span class="token function">checkSession</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">checkSession</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token comment">//Check session  </span>
  <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token class-name">Decorators</span><span class="token punctuation">;</span>  
  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">interfaces<span class="token punctuation">.</span></span><span class="token class-name">Button</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogRegisterDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">BaseButtonDecorator</span><span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token class-name">LogRegisterDecorator</span><span class="token punctuation">(</span><span class="token class-name">Button</span> wrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doAction</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">registerLog</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token comment">//Register log  </span>
  <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Por fim temos os três decoradores que adicionarão novos comportamentos ao objeto principal, <strong>FormButton</strong>.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token class-name">Decorators</span><span class="token punctuation">.</span><span class="token class-name">BaseButtonDecorator</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token class-name">Decorators</span><span class="token punctuation">.</span><span class="token class-name">CheckFormInfoDecorator</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token class-name">Decorators</span><span class="token punctuation">.</span><span class="token class-name">CheckSessionDecorator</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token class-name">Decorators</span><span class="token punctuation">.</span><span class="token class-name">LogRegisterDecorator</span></span><span class="token punctuation">;</span>  
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">classes<span class="token punctuation">.</span></span><span class="token class-name">FormButton</span></span><span class="token punctuation">;</span>  
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">BaseButtonDecorator</span> decorator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheckSessionDecorator</span>
        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LogRegisterDecorator</span>
        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CheckFormInfoDecorator</span>
        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FormButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        decorator<span class="token punctuation">.</span><span class="token function">doAction</span><span class="token punctuation">(</span><span class="token string">&quot;Action&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Quando o objeto <em>decorator</em> do main invocar a função doAction, ele fará com que o comportamento de todos os outros decoratos associados seja disparado na ordem de execução.</p>`,12))])}const g=p(u,[["render",k],["__file","index.html.vue"]]),y=JSON.parse('{"path":"/includes/seminario-2-GabrielMreira/","title":"Decorator","lang":"pt-BR","frontmatter":{"description":"Decorator Intenção O padrão decorator permite que novos comportamentos sejam atribuídos a um objeto, envolvendo esse objeto em outros objetos que possuem esse comportamento dese...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/includes/seminario-2-GabrielMreira/"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Decorator"}],["meta",{"property":"og:description","content":"Decorator Intenção O padrão decorator permite que novos comportamentos sejam atribuídos a um objeto, envolvendo esse objeto em outros objetos que possuem esse comportamento dese..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://refactoring.guru/images/patterns/diagrams/decorator/problem3.png?id=f3b3e7a107d870871f2c3167adcb7ccb"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Decorator\\",\\"image\\":[\\"https://refactoring.guru/images/patterns/diagrams/decorator/problem3.png?id=f3b3e7a107d870871f2c3167adcb7ccb\\",\\"https://refactoring.guru/images/patterns/diagrams/decorator/solution1-pt-br.png?id=2678803c5fbd7265a1f993d1c514d250\\",\\"https://refactoring.guru/images/patterns/diagrams/decorator/structure.png?id=8c95d894aecce5315cc1b12093a7ea0c\\",\\"https://mermaid.ink/img/pako:eNqVU8tuwyAQ_BXEqVWTfIBlRWoaVarUXporFwprQLHB4qGocvPvxTFxguy2KRezs7PjWRY6zAwHXGBWU-e2igpLG6KJRnFtgvdGo_JrtULPxjYpniY31MEQb4EZS72xo8Y0FWuWS_Qkge134JzKqv6u6Z286MrcWvRqxDsI5TzYibtT16mVboD6VZZKR3pFGazXF_gBcfPIfDR8dz-gx1zockhdXhU-akAHxb2cwSUoIf11wnmrtEDM1Ofubvr9zBFkPtLIDpa2LfxHeHZWmfQ14zeRyfCmKmfKDzJz48xEUhYicZTAC9yAbaji8aqf2AR7CQ0QXMQtp3ZPMNE9jwZvdp-a4cLbAAtsTRASFxWtXYxCy6mH9E5GFLiKLt7SS-o_x2-6BxTE?type=png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Também conhecido como","slug":"tambem-conhecido-como","link":"#tambem-conhecido-como","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":2,"title":"Solução","slug":"solucao","link":"#solucao","children":[]},{"level":2,"title":"Aplicabilidade/Estrutura","slug":"aplicabilidade-estrutura","link":"#aplicabilidade-estrutura","children":[]},{"level":2,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":2,"title":"Colaborações","slug":"colaboracoes","link":"#colaboracoes","children":[]},{"level":2,"title":"Consequências","slug":"consequencias","link":"#consequencias","children":[]},{"level":2,"title":"Como Implementar","slug":"como-implementar","link":"#como-implementar","children":[]},{"level":2,"title":"Implementação","slug":"implementacao","link":"#implementacao","children":[]},{"level":2,"title":"Outro exemplo","slug":"outro-exemplo","link":"#outro-exemplo","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.66,"words":1999},"filePathRelative":"includes/seminario-2-GabrielMreira/README.md","autoDesc":true}');export{g as comp,y as data};
