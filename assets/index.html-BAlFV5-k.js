import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c as d,b as a,d as e,e as r,a as s}from"./app-B49PEt90.js";const c={},p=s('<h1 id="seminario-1" tabindex="-1"><a class="header-anchor" href="#seminario-1"><span>Seminario - 1</span></a></h1><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao"><span>Intenção</span></a></h2><ul><li>A intenção do padrão Builder é separar a construção de um objeto complexo da sua representação, permitindo que o mesmo processo de construção possa criar diferentes representações.</li></ul><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como"><span>Também Conhecido Como</span></a></h2><ul><li>Construtor</li></ul><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao"><span>Motivação</span></a></h2><ul><li>Imagine um objeto complexo que pode ser construído de várias maneiras. A classe construtora precisa lidar com diferentes configurações e opções, tornando o código complicado e difícil de manter. O padrão Builder resolve isso ao separar o processo de construção em passos mais gerenciáveis e permitir que diferentes partes de um objeto sejam configuradas de maneira modular.</li></ul><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade"><span>Aplicabilidade</span></a></h2><h3 id="use-o-padrao-builder-quando" tabindex="-1"><a class="header-anchor" href="#use-o-padrao-builder-quando"><span>Use o padrão Builder quando:</span></a></h3><ul><li>A criação de um objeto envolve muitos passos e configurações complexas.</li><li>O objeto precisa ser criado de diferentes maneiras ou representações.</li><li>Você quer evitar construtores longos e complexos com muitos parâmetros opcionais.</li><li>Builder com interface fluente</li></ul><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura"><span>Estrutura</span></a></h2><h3 id="o-padrao-builder-normalmente-envolve-os-seguintes-componentes" tabindex="-1"><a class="header-anchor" href="#o-padrao-builder-normalmente-envolve-os-seguintes-componentes"><span>O padrão Builder normalmente envolve os seguintes componentes:</span></a></h3><ul><li>Builder: Interface ou classe abstrata que define todos os passos de criação que devem ser implementados.</li><li>ConcreteBuilder(contrução concreta/real): Implementa a interface Builder e fornece a implementação específica dos passos de construção.</li><li>Produto: O objeto complexo a ser construído.</li><li>Diretor: (Opcional) Gerencia o processo de construção utilizando o Builder.</li></ul>',13),u=s('<h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes"><span>Participantes</span></a></h2><ul><li>Pessoa possui um relacionamento de &quot;tem&quot; com Telefone</li><li>Uma Pessoa pode ter um atributo do tipo Telefone.</li><li>PessoaBuilder cria instâncias de Pessoa:</li><li>O PessoaBuilder é usado para construir uma nova Pessoa com os atributos desejados.</li></ul><h1 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias"><span>Consequências:</span></a></h1><h2 id="vantagens" tabindex="-1"><a class="header-anchor" href="#vantagens"><span>Vantagens</span></a></h2><ul><li>Separa a criação da utilização(principio da responsabilidade unica).</li><li>Permite criar diferentes representações de um objeto.</li><li>A criação do objeto pode variar de acordo com a necessidade</li><li>Código de construção é mais modular e fácil de manter.</li><li>Mantem o principio Aberto-Fechado (OCP) podendo criar varios objetos Builders diferentes.</li></ul><h2 id="desvantagens" tabindex="-1"><a class="header-anchor" href="#desvantagens"><span>Desvantagens</span></a></h2><ul><li>Introduz complexidade adicional.</li><li>Pode ser exagerado para objetos simples.</li></ul><h1 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao"><span>Implementação</span></a></h1><ul><li>Para implementar o padrão Builder, siga estes passos:</li><li>Crie uma interface ou classe abstrata Builder que define os métodos para a construção das partes do produto.</li><li>Crie uma ou mais classes ConcreteBuilder que implementam a interface Builder.</li><li>Crie uma classe Produto que representa o objeto complexo a ser construído.</li><li>Opcionalmente, crie uma classe Diretor que usa o Builder para construir o Produto por etapas desejadas.</li></ul><h1 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos"><span>Usos Conhecidos</span></a></h1><ul><li>Construção de documentos complexos em diferentes formatos (HTML, PDF, DOC, etc.).</li><li>Configuração de objetos em jogos, como personagens ou níveis, onde diferentes partes precisam ser configuradas.</li></ul><h1 id="padroes-relacionados" tabindex="-1"><a class="header-anchor" href="#padroes-relacionados"><span>Padrões Relacionados</span></a></h1><ul><li>Abstract Factory: O Builder pode ser considerado uma variação mais flexível do Abstract Factory.</li><li>Composite: Pode ser usado com o Builder para construir árvores de objetos complexos.</li><li>Prototype: O Builder pode ser usado em conjunto com o Prototype para construir objetos complexos a partir de protótipos.</li></ul>',13),m={href:"https://mermaid.js.org/syntax/classDiagram.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://docs.github.com/pt/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax",target:"_blank",rel:"noopener noreferrer"};function g(b,f){const n=i("Mermaid"),o=i("ExternalLinkIcon");return l(),d("div",null,[p,a(n,{id:"mermaid-89",code:"eJy9UkGOwjAMvPcVORbt5gM97GEFdyT4gGkNREpq5IQT4u80cZqqigQ3LEWx7LE9GUdr3cQTTLDYqT16T6BQHdHimUZUKdtb8H5r4MLgGjVZCszoRwpF04fAZryokRxWQXRgbBX1dGJc48vskJ2S+pGJrVz/d2MH5M2SDiRd202nxEu5Z1ORzrXf5N5fwcEArRRPDFdMFtyAh7nvR2xPbhepfQSOd4dMM7t2dt50ZgOc5S6oWs3y3lpIuiHDQCxVK4kTmWVWoSX537w7WWwel/+a1n/LzG5SWf7jeqkRlPGdig9pJnsB2DXZgQ=="}),u,e("p",null,[e("a",m,[r("Mermaid Class Diagram.html"),a(o)])]),e("p",null,[e("a",h,[r("Markdown"),a(o)])])])}const B=t(c,[["render",g],["__file","index.html.vue"]]),q=JSON.parse('{"path":"/includes/seminario-1-gabrielflb/","title":"Seminario - 1","lang":"pt-BR","frontmatter":{"description":"Seminario - 1 Intenção A intenção do padrão Builder é separar a construção de um objeto complexo da sua representação, permitindo que o mesmo processo de construção possa criar ...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-ppr.github.io/blog-material-aula/blog-material-aula/includes/seminario-1-gabrielflb/"}],["meta",{"property":"og:site_name","content":"20241 PPR Blog das Aulas"}],["meta",{"property":"og:title","content":"Seminario - 1"}],["meta",{"property":"og:description","content":"Seminario - 1 Intenção A intenção do padrão Builder é separar a construção de um objeto complexo da sua representação, permitindo que o mesmo processo de construção possa criar ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Seminario - 1\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Intenção","slug":"intencao","link":"#intencao","children":[]},{"level":2,"title":"Também Conhecido Como","slug":"tambem-conhecido-como","link":"#tambem-conhecido-como","children":[]},{"level":2,"title":"Motivação","slug":"motivacao","link":"#motivacao","children":[]},{"level":2,"title":"Aplicabilidade","slug":"aplicabilidade","link":"#aplicabilidade","children":[{"level":3,"title":"Use o padrão Builder quando:","slug":"use-o-padrao-builder-quando","link":"#use-o-padrao-builder-quando","children":[]}]},{"level":2,"title":"Estrutura","slug":"estrutura","link":"#estrutura","children":[{"level":3,"title":"O padrão Builder normalmente envolve os seguintes componentes:","slug":"o-padrao-builder-normalmente-envolve-os-seguintes-componentes","link":"#o-padrao-builder-normalmente-envolve-os-seguintes-componentes","children":[]}]},{"level":2,"title":"Participantes","slug":"participantes","link":"#participantes","children":[]},{"level":2,"title":"Vantagens","slug":"vantagens","link":"#vantagens","children":[]},{"level":2,"title":"Desvantagens","slug":"desvantagens","link":"#desvantagens","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.71,"words":514},"filePathRelative":"includes/seminario-1-gabrielflb/README.md","autoDesc":true}');export{B as comp,q as data};
